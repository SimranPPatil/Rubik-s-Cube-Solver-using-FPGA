
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x100001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00011dac memsz 0x00011dac flags r-x
    LOAD off    0x00012dcc vaddr 0x10011dcc paddr 0x100138b8 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x000153a4 vaddr 0x100153a4 paddr 0x100153a4 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011198  100001bc  100001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a78  10011354  10011354  00012354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  10011dcc  100138b8  00012dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  100153a4  100153a4  000153a4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  000148b8  2**0
                  CONTENTS
  7 .sdram        00000000  10015504  10015504  000148b8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000148b8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000d28  00000000  00000000  000148e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000235f7  00000000  00000000  00015608  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008f1f  00000000  00000000  00038bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b15f  00000000  00000000  00041b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000022cc  00000000  00000000  0004cc80  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000032fe  00000000  00000000  0004ef4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016d4c  00000000  00000000  0005224a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00068f98  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001370  00000000  00000000  00068fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006d6de  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006d6e1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006d6ed  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006d6ee  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006d6ef  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006d6f3  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006d6f7  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006d6fb  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006d706  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006d711  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0006d71c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000001a  00000000  00000000  0006d727  2**0
                  CONTENTS, READONLY
 30 .jdi          00004442  00000000  00000000  0006d741  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00079aca  00000000  00000000  00071b83  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
100001bc l    d  .text	00000000 .text
10011354 l    d  .rodata	00000000 .rodata
10011dcc l    d  .rwdata	00000000 .rwdata
100153a4 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10015504 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
100001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
10000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
100153a4 l     O .bss	00000002 ctl_reg.3318
100153a6 l     O .bss	00000002 no_device.3319
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10011b12 l     O .rodata	00000010 zeroes.4181
10011b22 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
100045c8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
10006170 l     F .text	00000008 __fp_lock
10006178 l     F .text	00000008 __fp_unlock
1000618c l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10011dcc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10012210 l     O .rwdata	00000020 lc_ctype_charset
100121f0 l     O .rwdata	00000020 lc_message_charset
10012230 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10011b54 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
100096bc l     F .text	000000fc __sprint_r.part.0
10011c88 l     O .rodata	00000010 blanks.4125
10011c78 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
1000c1c0 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000eb10 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000ec38 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000ec64 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000ed6c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000ee68 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000ef4c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000f130 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
100138a8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1000f3e4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000f534 l     F .text	00000038 alt_dev_reg
10012818 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000f810 l     F .text	00000204 altera_avalon_jtag_uart_irq
1000fa14 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
100102e8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10010780 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
100108d8 l     F .text	00000050 alt_get_errno
10010928 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10008cfc g     F .text	00000074 _mprec_log10
10008de8 g     F .text	0000008c __any_on
1000b0e8 g     F .text	00000054 _isatty_r
10011b60 g     O .rodata	00000028 __mprec_tinytens
1000f078 g     F .text	00000078 alt_main
10002214 g     F .text	000000b8 _puts_r
10015404 g     O .bss	00000100 alt_irq
1000b13c g     F .text	0000005c _lseek_r
100138b8 g       *ABS*	00000000 __flash_rwdata_start
1000d530 g     F .text	00000084 .hidden __eqdf2
10015504 g       *ABS*	00000000 __alt_heap_start
100021d8 g     F .text	0000003c printf
1000b364 g     F .text	0000009c _wcrtomb_r
100095b4 g     F .text	0000005c __sseek
100064d4 g     F .text	00000010 __sinit
1000b1f4 g     F .text	00000154 __swbuf_r
10006f4c g     F .text	0000007c _setlocale_r
1000632c g     F .text	00000078 __sfmoreglue
1000f110 g     F .text	00000020 __malloc_unlock
100020b0 g     F .text	00000080 UsbGetRetryCnt
10007bac g     F .text	0000015c memmove
100001f8 g     F .text	00000050 IO_init
100064bc g     F .text	00000018 _cleanup
10007e2c g     F .text	000000a8 _Balloc
1000d5b4 g     F .text	000000e0 .hidden __gtdf2
10010d18 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000b090 g     F .text	00000058 _fstat_r
100153c0 g     O .bss	00000004 errno
10009530 g     F .text	00000008 __seofread
100153c8 g     O .bss	00000004 alt_argv
1001b878 g       *ABS*	00000000 _gp
1000f3b4 g     F .text	00000030 usleep
10012698 g     O .rwdata	00000180 alt_fd_list
10010d38 g     F .text	00000090 alt_find_dev
10007a74 g     F .text	00000138 memcpy
10006180 g     F .text	0000000c _cleanup_r
1000e938 g     F .text	000000d0 .hidden __floatsidf
10010860 g     F .text	00000078 alt_io_redirect
1000d694 g     F .text	000000e0 .hidden __ltdf2
10011354 g       *ABS*	00000000 __DTOR_END__
100022cc g     F .text	00000014 puts
10009414 g     F .text	00000074 __fpclassifyd
10008c58 g     F .text	000000a4 __ratio
1000abf4 g     F .text	00000024 __vfiprintf_internal
1000fc10 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
100021ac g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000c2dc g     F .text	00000008 .hidden __udivsi3
1000edbc g     F .text	000000ac isatty
10011bb0 g     O .rodata	000000c8 __mprec_tens
10006fc8 g     F .text	0000000c __locale_charset
100153bc g     O .bss	00000004 __malloc_top_pad
10001750 g     F .text	00000264 UsbGetConfigDesc2
10013880 g     O .rwdata	00000004 __mb_cur_max
10006ff8 g     F .text	0000000c _localeconv_r
10008254 g     F .text	0000003c __i2b
10006938 g     F .text	000004a4 __sfvwrite_r
10009488 g     F .text	00000054 _sbrk_r
1000b198 g     F .text	0000005c _read_r
100138a0 g     O .rwdata	00000004 alt_max_fd
1000ada0 g     F .text	00000100 _fclose_r
10006140 g     F .text	00000030 fflush
100153b8 g     O .bss	00000004 __malloc_max_sbrked_mem
1000c314 g     F .text	0000089c .hidden __adddf3
10008a00 g     F .text	0000011c __b2d
1000bba4 g     F .text	0000061c .hidden __umoddi3
1000ef9c g     F .text	000000dc lseek
10013878 g     O .rwdata	00000004 _global_impure_ptr
10008e74 g     F .text	000005a0 _realloc_r
10015504 g       *ABS*	00000000 __bss_end
10010690 g     F .text	000000f0 alt_iic_isr_register
10010c14 g     F .text	00000104 alt_tick
1000b564 g     F .text	00000640 .hidden __udivdi3
1000aeb4 g     F .text	00000184 _fputwc_r
10011b88 g     O .rodata	00000028 __mprec_bigtens
10008038 g     F .text	00000104 __s2b
1000ea08 g     F .text	000000a4 .hidden __floatunsidf
100087a8 g     F .text	00000060 __mcmp
100011b0 g     F .text	000000fc UsbSetAddress
100064f4 g     F .text	00000018 __fp_lock_all
10010644 g     F .text	0000004c alt_ic_irq_enabled
10010b7c g     F .text	00000098 alt_alarm_stop
100153d0 g     O .bss	00000004 alt_irq_active
100000ec g     F .exceptions	000000d0 alt_irq_handler
10012670 g     O .rwdata	00000028 alt_dev_null
100102cc g     F .text	0000001c alt_dcache_flush_all
1000813c g     F .text	00000068 __hi0bits
100002b4 g     F .text	00000068 IO_read
1000e8b0 g     F .text	00000088 .hidden __fixdfsi
100138b8 g       *ABS*	00000000 __ram_rwdata_end
10013898 g     O .rwdata	00000008 alt_dev_list
1000f434 g     F .text	00000100 write
10011dcc g       *ABS*	00000000 __ram_rodata_end
1000ecb4 g     F .text	000000b8 fstat
1000d694 g     F .text	000000e0 .hidden __ledf2
10002130 g     F .text	0000007c UsbPrintMem
10008520 g     F .text	00000140 __pow5mult
100097d0 g     F .text	00001424 ___vfiprintf_internal_r
100153b0 g     O .bss	00000004 __nlocale_changed
1000c2e4 g     F .text	00000008 .hidden __umodsi3
10015504 g       *ABS*	00000000 end
1000f74c g     F .text	000000c4 altera_avalon_jtag_uart_init
10011354 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000eaac g     F .text	00000064 .hidden __clzsi2
1000fe1c g     F .text	00000218 altera_avalon_jtag_uart_write
100064e4 g     F .text	00000004 __sfp_lock_acquire
1000798c g     F .text	000000e8 memchr
10002378 g     F .text	000020fc ___vfprintf_internal_r
10001ab0 g     F .text	000000fc UsbClassRequest
10006648 g     F .text	000002f0 _free_r
10006fd4 g     F .text	00000010 __locale_mb_cur_max
1001118c g     F .text	00000194 __call_exitprocs
100153ac g     O .bss	00000004 __mlocale_changed
10013884 g     O .rwdata	00000004 __malloc_sbrk_base
100001bc g     F .text	0000003c _start
100153d4 g     O .bss	00000004 _alt_tick_rate
10008660 g     F .text	00000148 __lshift
100153d8 g     O .bss	00000004 _alt_nticks
1000f180 g     F .text	00000104 read
1000f5a0 g     F .text	00000048 alt_sys_init
10011078 g     F .text	00000114 __register_exitproc
10008290 g     F .text	00000290 __multiply
1000fabc g     F .text	00000068 altera_avalon_jtag_uart_close
1000c2ec g     F .text	00000028 .hidden __mulsi3
10011dcc g       *ABS*	00000000 __ram_rwdata_start
10011354 g       *ABS*	00000000 __ram_rodata_start
100153dc g     O .bss	00000028 __malloc_current_mallinfo
10008b1c g     F .text	0000013c __d2b
100012ac g     F .text	00000144 UsbGetDeviceDesc1
1000f5e8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10010edc g     F .text	000000d4 alt_get_fd
10010174 g     F .text	00000158 alt_busy_sleep
1000ac74 g     F .text	00000054 _close_r
10010ffc g     F .text	0000007c memcmp
1000f6a8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10015504 g       *ABS*	00000000 __alt_stack_base
1000f6f8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10004498 g     F .text	00000130 __swsetup_r
1000cbb0 g     F .text	00000980 .hidden __divdf3
100063a4 g     F .text	00000118 __sfp
10008d70 g     F .text	00000078 __copybits
10012268 g     O .rwdata	00000408 __malloc_av_
100064f0 g     F .text	00000004 __sinit_lock_release
1000d774 g     F .text	0000086c .hidden __muldf3
100094dc g     F .text	00000054 __sread
1000202c g     F .text	00000084 UsbWaitTDListDone
10010dc8 g     F .text	00000114 alt_find_file
10010338 g     F .text	000000a4 alt_dev_llist_insert
1000f0f0 g     F .text	00000020 __malloc_lock
1000f304 g     F .text	000000b0 sbrk
10005f18 g     F .text	00000228 _fflush_r
1000acc8 g     F .text	000000d8 _calloc_r
100153a4 g       *ABS*	00000000 __bss_start
10007d08 g     F .text	00000124 memset
1000031c g     F .text	00000d4c main
100153cc g     O .bss	00000004 alt_envp
100153b4 g     O .bss	00000004 __malloc_max_total_mem
1000f648 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
100019b4 g     F .text	000000fc UsbSetConfig
1000b348 g     F .text	0000001c __swbuf
10009610 g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000aea0 g     F .text	00000014 fclose
100047f0 g     F .text	00001728 _dtoa_r
100071e4 g     F .text	000007a8 _malloc_r
1000b4d8 g     F .text	00000030 __ascii_wctomb
100138a4 g     O .rwdata	00000004 alt_errno
10006ddc g     F .text	000000b8 _fwalk
1000c22c g     F .text	00000054 .hidden __divsi3
10006524 g     F .text	00000124 _malloc_trim_r
10001bac g     F .text	00000144 UsbGetHidDesc
10011354 g       *ABS*	00000000 __CTOR_END__
10009618 g     F .text	000000a4 strcmp
10011354 g       *ABS*	00000000 __flash_rodata_start
10011354 g       *ABS*	00000000 __DTOR_LIST__
1000d530 g     F .text	00000084 .hidden __nedf2
100010bc g     F .text	00000044 UsbRead
1000f56c g     F .text	00000034 alt_irq_init
1000f284 g     F .text	00000080 alt_release_fd
10011c98 g     O .rodata	00000100 .hidden __clz_tab
100153a8 g     O .bss	00000004 _PathLocale
10010fb0 g     F .text	00000014 atexit
1000ac18 g     F .text	0000005c _write_r
10007004 g     F .text	0000001c setlocale
1001387c g     O .rwdata	00000004 _impure_ptr
100153c4 g     O .bss	00000004 alt_argc
10010438 g     F .text	0000005c _do_dtors
10006ff0 g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
100089a0 g     F .text	00000060 __ulp
1000650c g     F .text	00000018 __fp_unlock_all
10013890 g     O .rwdata	00000008 alt_fs_list
10001cf0 g     F .text	0000033c UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
10007020 g     F .text	0000000c localeconv
100104b0 g     F .text	00000050 alt_ic_isr_register
100138b8 g       *ABS*	00000000 _edata
10015504 g       *ABS*	00000000 _end
10001068 g     F .text	00000054 UsbWrite
100001bc g       *ABS*	00000000 __ram_exceptions_end
1000fb24 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
100105a0 g     F .text	000000a4 alt_ic_irq_disable
10009538 g     F .text	0000007c __swrite
10013888 g     O .rwdata	00000004 __malloc_trim_threshold
10006fe4 g     F .text	0000000c __locale_msgcharset
10010fc4 g     F .text	00000038 exit
10006e94 g     F .text	000000b8 _fwalk_reent
10008808 g     F .text	00000198 __mdiff
1000c280 g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
100064e8 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
10000248 g     F .text	0000006c IO_write
10011320 g     F .text	00000034 _exit
10010034 g     F .text	00000140 alt_alarm_start
1000702c g     F .text	000001b8 __smakebuf_r
100022e0 g     F .text	00000098 strlen
10010a1c g     F .text	00000160 open
1000d5b4 g     F .text	000000e0 .hidden __gedf2
1001388c g     O .rwdata	00000004 __wctomb
100097b8 g     F .text	00000018 __sprint_r
10010494 g     F .text	0000001c alt_icache_flush_all
100138ac g     O .rwdata	00000004 alt_priority_mask
10010500 g     F .text	000000a0 alt_ic_irq_enable
10004474 g     F .text	00000024 __vfprintf_internal
1000b508 g     F .text	0000005c _wctomb_r
1000dfe0 g     F .text	000008d0 .hidden __subdf3
100081a4 g     F .text	000000b0 __lo0bits
100015c4 g     F .text	0000018c UsbGetConfigDesc1
100138b0 g     O .rwdata	00000008 alt_alarm_list
100103dc g     F .text	0000005c _do_ctors
10001100 g     F .text	000000b0 UsbSoftReset
1000b400 g     F .text	000000d8 wcrtomb
1000eb60 g     F .text	000000d8 close
100013f0 g     F .text	000001d4 UsbGetDeviceDesc2
1000eecc g     F .text	00000080 alt_load
1000b038 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
100064ec g     F .text	00000004 __sinit_lock_acquire
10007efc g     F .text	0000013c __multadd
10007ed4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08406f14 	ori	at,at,444
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000ec0 	call	100000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000306 	br	10000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)

10000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
10000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
10000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
1000009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000e8:	ef80083a 	eret

100000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000ec:	defff904 	addi	sp,sp,-28
100000f0:	dfc00615 	stw	ra,24(sp)
100000f4:	df000515 	stw	fp,20(sp)
100000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
100000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000100:	0005313a 	rdctl	r2,ipending
10000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000114:	00800044 	movi	r2,1
10000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000011c:	e0fffb17 	ldw	r3,-20(fp)
10000120:	e0bffc17 	ldw	r2,-16(fp)
10000124:	1884703a 	and	r2,r3,r2
10000128:	10001426 	beq	r2,zero,1000017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000012c:	00840074 	movhi	r2,4097
10000130:	10950104 	addi	r2,r2,21508
10000134:	e0fffd17 	ldw	r3,-12(fp)
10000138:	180690fa 	slli	r3,r3,3
1000013c:	10c5883a 	add	r2,r2,r3
10000140:	10c00017 	ldw	r3,0(r2)
10000144:	00840074 	movhi	r2,4097
10000148:	10950104 	addi	r2,r2,21508
1000014c:	e13ffd17 	ldw	r4,-12(fp)
10000150:	200890fa 	slli	r4,r4,3
10000154:	1105883a 	add	r2,r2,r4
10000158:	10800104 	addi	r2,r2,4
1000015c:	10800017 	ldw	r2,0(r2)
10000160:	1009883a 	mov	r4,r2
10000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000016c:	0005313a 	rdctl	r2,ipending
10000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000174:	e0bfff17 	ldw	r2,-4(fp)
10000178:	00000706 	br	10000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000017c:	e0bffc17 	ldw	r2,-16(fp)
10000180:	1085883a 	add	r2,r2,r2
10000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000188:	e0bffd17 	ldw	r2,-12(fp)
1000018c:	10800044 	addi	r2,r2,1
10000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
10000194:	003fe106 	br	1000011c <__alt_data_end+0xf800011c>

    active = alt_irq_pending ();
10000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
1000019c:	e0bffb17 	ldw	r2,-20(fp)
100001a0:	103fdb1e 	bne	r2,zero,10000110 <__alt_data_end+0xf8000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001a4:	0001883a 	nop
}
100001a8:	e037883a 	mov	sp,fp
100001ac:	dfc00117 	ldw	ra,4(sp)
100001b0:	df000017 	ldw	fp,0(sp)
100001b4:	dec00204 	addi	sp,sp,8
100001b8:	f800283a 	ret

Disassembly of section .text:

100001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
100001bc:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
100001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
100001c4:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
100001c8:	d6ae1e14 	ori	gp,gp,47224
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
100001cc:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
100001d0:	1094e914 	ori	r2,r2,21412

    movhi r3, %hi(__bss_end)
100001d4:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
100001d8:	18d54114 	ori	r3,r3,21764

    beq r2, r3, 1f
100001dc:	10c00326 	beq	r2,r3,100001ec <_start+0x30>

0:
    stw zero, (r2)
100001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
100001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
100001e8:	10fffd36 	bltu	r2,r3,100001e0 <__alt_data_end+0xf80001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
100001ec:	000eecc0 	call	1000eecc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
100001f0:	000f0780 	call	1000f078 <alt_main>

100001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
100001f4:	003fff06 	br	100001f4 <__alt_data_end+0xf80001f4>

100001f8 <IO_init>:
#define otg_hpi_cs			(volatile char*)	OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w			(volatile char*)	OTG_HPI_W_BASE


void IO_init(void)
{
100001f8:	deffff04 	addi	sp,sp,-4
100001fc:	df000015 	stw	fp,0(sp)
10000200:	d839883a 	mov	fp,sp
	*otg_hpi_cs = 1;
10000204:	00802004 	movi	r2,128
10000208:	00c00044 	movi	r3,1
1000020c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10000210:	00801404 	movi	r2,80
10000214:	00c00044 	movi	r3,1
10000218:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
1000021c:	00801004 	movi	r2,64
10000220:	00c00044 	movi	r3,1
10000224:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
10000228:	00801c04 	movi	r2,112
1000022c:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
10000230:	00801804 	movi	r2,96
10000234:	10000015 	stw	zero,0(r2)
}
10000238:	e037883a 	mov	sp,fp
1000023c:	df000017 	ldw	fp,0(sp)
10000240:	dec00104 	addi	sp,sp,4
10000244:	f800283a 	ret

10000248 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
10000248:	defffd04 	addi	sp,sp,-12
1000024c:	df000215 	stw	fp,8(sp)
10000250:	df000204 	addi	fp,sp,8
10000254:	2007883a 	mov	r3,r4
10000258:	2805883a 	mov	r2,r5
1000025c:	e0fffe05 	stb	r3,-8(fp)
10000260:	e0bfff0d 	sth	r2,-4(fp)
	*otg_hpi_address = Address;
10000264:	00801c04 	movi	r2,112
10000268:	e0fffe03 	ldbu	r3,-8(fp)
1000026c:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10000270:	00802004 	movi	r2,128
10000274:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
10000278:	00801004 	movi	r2,64
1000027c:	10000005 	stb	zero,0(r2)
	*otg_hpi_data = Data;
10000280:	00801804 	movi	r2,96
10000284:	e0ffff0b 	ldhu	r3,-4(fp)
10000288:	10c00015 	stw	r3,0(r2)
	*otg_hpi_w = 1;
1000028c:	00801004 	movi	r2,64
10000290:	00c00044 	movi	r3,1
10000294:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000298:	00802004 	movi	r2,128
1000029c:	00c00044 	movi	r3,1
100002a0:	10c00005 	stb	r3,0(r2)
}
100002a4:	e037883a 	mov	sp,fp
100002a8:	df000017 	ldw	fp,0(sp)
100002ac:	dec00104 	addi	sp,sp,4
100002b0:	f800283a 	ret

100002b4 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
100002b4:	defffd04 	addi	sp,sp,-12
100002b8:	df000215 	stw	fp,8(sp)
100002bc:	df000204 	addi	fp,sp,8
100002c0:	2005883a 	mov	r2,r4
100002c4:	e0bfff05 	stb	r2,-4(fp)
	alt_u16 temp;
	*otg_hpi_address = Address;
100002c8:	00801c04 	movi	r2,112
100002cc:	e0ffff03 	ldbu	r3,-4(fp)
100002d0:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
100002d4:	00802004 	movi	r2,128
100002d8:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
100002dc:	00801404 	movi	r2,80
100002e0:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
100002e4:	00801804 	movi	r2,96
100002e8:	10800017 	ldw	r2,0(r2)
100002ec:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
100002f0:	00801404 	movi	r2,80
100002f4:	00c00044 	movi	r3,1
100002f8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100002fc:	00802004 	movi	r2,128
10000300:	00c00044 	movi	r3,1
10000304:	10c00005 	stb	r3,0(r2)
	//printf("%x\n",temp);
	return temp;
10000308:	e0bffe0b 	ldhu	r2,-8(fp)
}
1000030c:	e037883a 	mov	sp,fp
10000310:	df000017 	ldw	fp,0(sp)
10000314:	dec00104 	addi	sp,sp,4
10000318:	f800283a 	ret

1000031c <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
1000031c:	defff904 	addi	sp,sp,-28
10000320:	dfc00615 	stw	ra,24(sp)
10000324:	df000515 	stw	fp,20(sp)
10000328:	df000504 	addi	fp,sp,20
	IO_init();
1000032c:	00001f80 	call	100001f8 <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
10000330:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
10000334:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
10000338:	e03ffb85 	stb	zero,-18(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
1000033c:	01040074 	movhi	r4,4097
10000340:	2104d504 	addi	r4,r4,4948
10000344:	00022cc0 	call	100022cc <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
10000348:	00011000 	call	10001100 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
1000034c:	01005104 	movi	r4,324
10000350:	000b883a 	mov	r5,zero
10000354:	00010680 	call	10001068 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10000358:	01302414 	movui	r4,49296
1000035c:	017fffd4 	movui	r5,65535
10000360:	00010680 	call	10001068 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10000364:	01006d04 	movi	r4,436
10000368:	01409604 	movi	r5,600
1000036c:	00010680 	call	10001068 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
10000370:	00811004 	movi	r2,1088
10000374:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10000378:	e0bffb0b 	ldhu	r2,-20(fp)
1000037c:	01005084 	movi	r4,322
10000380:	100b883a 	mov	r5,r2
10000384:	00010680 	call	10001068 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
10000388:	00808404 	movi	r2,528
1000038c:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
10000390:	e0bffe0b 	ldhu	r2,-8(fp)
10000394:	01302314 	movui	r4,49292
10000398:	100b883a 	mov	r5,r2
1000039c:	00010680 	call	10001068 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
100003a0:	01007104 	movi	r4,452
100003a4:	000b883a 	mov	r5,zero
100003a8:	00010680 	call	10001068 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
100003ac:	01007184 	movi	r4,454
100003b0:	000b883a 	mov	r5,zero
100003b4:	00010680 	call	10001068 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
100003b8:	01007204 	movi	r4,456
100003bc:	000b883a 	mov	r5,zero
100003c0:	00010680 	call	10001068 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
100003c4:	01007284 	movi	r4,458
100003c8:	000b883a 	mov	r5,zero
100003cc:	00010680 	call	10001068 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
100003d0:	01007304 	movi	r4,460
100003d4:	000b883a 	mov	r5,zero
100003d8:	00010680 	call	10001068 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
100003dc:	01007384 	movi	r4,462
100003e0:	000b883a 	mov	r5,zero
100003e4:	00010680 	call	10001068 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
100003e8:	01007404 	movi	r4,464
100003ec:	000b883a 	mov	r5,zero
100003f0:	00010680 	call	10001068 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
100003f4:	01007484 	movi	r4,466
100003f8:	000b883a 	mov	r5,zero
100003fc:	00010680 	call	10001068 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10000400:	01007504 	movi	r4,468
10000404:	000b883a 	mov	r5,zero
10000408:	00010680 	call	10001068 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
1000040c:	01007584 	movi	r4,470
10000410:	000b883a 	mov	r5,zero
10000414:	00010680 	call	10001068 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
10000418:	01007604 	movi	r4,472
1000041c:	000b883a 	mov	r5,zero
10000420:	00010680 	call	10001068 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10000424:	01007684 	movi	r4,474
10000428:	000b883a 	mov	r5,zero
1000042c:	00010680 	call	10001068 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000430:	01007704 	movi	r4,476
10000434:	000b883a 	mov	r5,zero
10000438:	00010680 	call	10001068 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
1000043c:	01007784 	movi	r4,478
10000440:	000b883a 	mov	r5,zero
10000444:	00010680 	call	10001068 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
10000448:	01007084 	movi	r4,450
1000044c:	01401c84 	movi	r5,114
10000450:	00010680 	call	10001068 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000454:	01000044 	movi	r4,1
10000458:	01738054 	movui	r5,52737
1000045c:	00002480 	call	10000248 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
10000460:	0001883a 	nop
10000464:	010000c4 	movi	r4,3
10000468:	00002b40 	call	100002b4 <IO_read>
1000046c:	10bfffcc 	andi	r2,r2,65535
10000470:	103ffc26 	beq	r2,zero,10000464 <__alt_data_end+0xf8000464>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000474:	0001883a 	nop
10000478:	01000044 	movi	r4,1
1000047c:	00002b40 	call	100002b4 <IO_read>
10000480:	10bfffcc 	andi	r2,r2,65535
10000484:	1083fb58 	cmpnei	r2,r2,4077
10000488:	10000826 	beq	r2,zero,100004ac <main+0x190>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
1000048c:	01000044 	movi	r4,1
10000490:	00002b40 	call	100002b4 <IO_read>
10000494:	10bfffcc 	andi	r2,r2,65535
10000498:	01040074 	movhi	r4,4097
1000049c:	2104db04 	addi	r4,r4,4972
100004a0:	100b883a 	mov	r5,r2
100004a4:	00021d80 	call	100021d8 <printf>
		goto USB_HOT_PLUG;
100004a8:	003fa706 	br	10000348 <__alt_data_end+0xf8000348>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
100004ac:	01040074 	movhi	r4,4097
100004b0:	2104e404 	addi	r4,r4,5008
100004b4:	00021d80 	call	100021d8 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
100004b8:	01007084 	movi	r4,450
100004bc:	01401d04 	movi	r5,116
100004c0:	00010680 	call	10001068 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
100004c4:	01007104 	movi	r4,452
100004c8:	01400f04 	movi	r5,60
100004cc:	00010680 	call	10001068 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
100004d0:	01007184 	movi	r4,454
100004d4:	000b883a 	mov	r5,zero
100004d8:	00010680 	call	10001068 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
100004dc:	01007204 	movi	r4,456
100004e0:	000b883a 	mov	r5,zero
100004e4:	00010680 	call	10001068 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
100004e8:	01007284 	movi	r4,458
100004ec:	000b883a 	mov	r5,zero
100004f0:	00010680 	call	10001068 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
100004f4:	01007304 	movi	r4,460
100004f8:	000b883a 	mov	r5,zero
100004fc:	00010680 	call	10001068 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10000500:	01007384 	movi	r4,462
10000504:	000b883a 	mov	r5,zero
10000508:	00010680 	call	10001068 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
1000050c:	01007404 	movi	r4,464
10000510:	000b883a 	mov	r5,zero
10000514:	00010680 	call	10001068 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
10000518:	01007484 	movi	r4,466
1000051c:	000b883a 	mov	r5,zero
10000520:	00010680 	call	10001068 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10000524:	01007504 	movi	r4,468
10000528:	000b883a 	mov	r5,zero
1000052c:	00010680 	call	10001068 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10000530:	01007584 	movi	r4,470
10000534:	000b883a 	mov	r5,zero
10000538:	00010680 	call	10001068 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
1000053c:	01007604 	movi	r4,472
10000540:	000b883a 	mov	r5,zero
10000544:	00010680 	call	10001068 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
10000548:	01007684 	movi	r4,474
1000054c:	000b883a 	mov	r5,zero
10000550:	00010680 	call	10001068 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000554:	01007704 	movi	r4,476
10000558:	000b883a 	mov	r5,zero
1000055c:	00010680 	call	10001068 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
10000560:	01007784 	movi	r4,478
10000564:	000b883a 	mov	r5,zero
10000568:	00010680 	call	10001068 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
1000056c:	01000044 	movi	r4,1
10000570:	01738054 	movui	r5,52737
10000574:	00002480 	call	10000248 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000578:	0001883a 	nop
1000057c:	01000044 	movi	r4,1
10000580:	00002b40 	call	100002b4 <IO_read>
10000584:	10bfffcc 	andi	r2,r2,65535
10000588:	1083fb58 	cmpnei	r2,r2,4077
1000058c:	10000826 	beq	r2,zero,100005b0 <main+0x294>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10000590:	01000044 	movi	r4,1
10000594:	00002b40 	call	100002b4 <IO_read>
10000598:	10bfffcc 	andi	r2,r2,65535
1000059c:	01040074 	movhi	r4,4097
100005a0:	2104db04 	addi	r4,r4,4972
100005a4:	100b883a 	mov	r5,r2
100005a8:	00021d80 	call	100021d8 <printf>
		goto USB_HOT_PLUG;
100005ac:	003f6606 	br	10000348 <__alt_data_end+0xf8000348>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
100005b0:	00b02284 	movi	r2,-16246
100005b4:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
100005b8:	008c0004 	movi	r2,12288
100005bc:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
100005c0:	00880004 	movi	r2,8192
100005c4:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
100005c8:	d0a6cb0b 	ldhu	r2,-25812(gp)
100005cc:	10bfffcc 	andi	r2,r2,65535
100005d0:	1009883a 	mov	r4,r2
100005d4:	00010bc0 	call	100010bc <UsbRead>
100005d8:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
100005dc:	d0a6cb8b 	ldhu	r2,-25810(gp)
100005e0:	e0fffb0b 	ldhu	r3,-20(fp)
100005e4:	1884703a 	and	r2,r3,r2
100005e8:	10bfffcc 	andi	r2,r2,65535
100005ec:	1000341e 	bne	r2,zero,100006c0 <main+0x3a4>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
100005f0:	e03ffbc5 	stb	zero,-17(fp)
100005f4:	00001006 	br	10000638 <main+0x31c>
		{
			usleep(5*1000);
100005f8:	0104e204 	movi	r4,5000
100005fc:	000f3b40 	call	1000f3b4 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10000600:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000604:	10bfffcc 	andi	r2,r2,65535
10000608:	1009883a 	mov	r4,r2
1000060c:	00010bc0 	call	100010bc <UsbRead>
10000610:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
10000614:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000618:	e0fffb0b 	ldhu	r3,-20(fp)
1000061c:	1884703a 	and	r2,r3,r2
10000620:	10bfffcc 	andi	r2,r2,65535
10000624:	10000126 	beq	r2,zero,1000062c <main+0x310>
10000628:	00000606 	br	10000644 <main+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
1000062c:	e0bffbc3 	ldbu	r2,-17(fp)
10000630:	10800044 	addi	r2,r2,1
10000634:	e0bffbc5 	stb	r2,-17(fp)
10000638:	e0bffbc3 	ldbu	r2,-17(fp)
1000063c:	10800170 	cmpltui	r2,r2,5
10000640:	103fed1e 	bne	r2,zero,100005f8 <__alt_data_end+0xf80005f8>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
		}
		if(!(usb_ctl_val & no_device))
10000644:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000648:	e0fffb0b 	ldhu	r3,-20(fp)
1000064c:	1884703a 	and	r2,r3,r2
10000650:	10bfffcc 	andi	r2,r2,65535
10000654:	1000261e 	bne	r2,zero,100006f0 <main+0x3d4>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
10000658:	01040074 	movhi	r4,4097
1000065c:	2104e804 	addi	r4,r4,5024
10000660:	00022cc0 	call	100022cc <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10000664:	01040074 	movhi	r4,4097
10000668:	2104f204 	addi	r4,r4,5064
1000066c:	00022cc0 	call	100022cc <puts>
			while (!(usb_ctl_val & no_device))
10000670:	00000d06 	br	100006a8 <main+0x38c>
			{
				usb_ctl_val = UsbRead(ctl_reg);
10000674:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000678:	10bfffcc 	andi	r2,r2,65535
1000067c:	1009883a 	mov	r4,r2
10000680:	00010bc0 	call	100010bc <UsbRead>
10000684:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device)
10000688:	d0a6cb8b 	ldhu	r2,-25810(gp)
1000068c:	e0fffb0b 	ldhu	r3,-20(fp)
10000690:	1884703a 	and	r2,r3,r2
10000694:	10bfffcc 	andi	r2,r2,65535
10000698:	10000126 	beq	r2,zero,100006a0 <main+0x384>
					goto USB_HOT_PLUG;
1000069c:	003f2a06 	br	10000348 <__alt_data_end+0xf8000348>

				usleep(2000);
100006a0:	0101f404 	movi	r4,2000
100006a4:	000f3b40 	call	1000f3b4 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
100006a8:	d0a6cb8b 	ldhu	r2,-25810(gp)
100006ac:	e0fffb0b 	ldhu	r3,-20(fp)
100006b0:	1884703a 	and	r2,r3,r2
100006b4:	10bfffcc 	andi	r2,r2,65535
100006b8:	103fee26 	beq	r2,zero,10000674 <__alt_data_end+0xf8000674>
100006bc:	00000c06 	br	100006f0 <main+0x3d4>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
100006c0:	e0fffb0b 	ldhu	r3,-20(fp)
100006c4:	e0bffc0b 	ldhu	r2,-16(fp)
100006c8:	1884703a 	and	r2,r3,r2
100006cc:	10bfffcc 	andi	r2,r2,65535
100006d0:	10000426 	beq	r2,zero,100006e4 <main+0x3c8>
		{
			printf("[INFO]: full speed device\n");
100006d4:	01040074 	movhi	r4,4097
100006d8:	2104fe04 	addi	r4,r4,5112
100006dc:	00022cc0 	call	100022cc <puts>
100006e0:	00000306 	br	100006f0 <main+0x3d4>
		}
		else
		{
			printf("[INFO]: low speed device\n");
100006e4:	01040074 	movhi	r4,4097
100006e8:	21050504 	addi	r4,r4,5140
100006ec:	00022cc0 	call	100022cc <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
100006f0:	00011b00 	call	100011b0 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100006f4:	00000306 	br	10000704 <main+0x3e8>
	{
		UsbSetAddress();
100006f8:	00011b00 	call	100011b0 <UsbSetAddress>
		usleep(10*1000);
100006fc:	0109c404 	movi	r4,10000
10000700:	000f3b40 	call	1000f3b4 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000704:	010000c4 	movi	r4,3
10000708:	00002b40 	call	100002b4 <IO_read>
1000070c:	10bfffcc 	andi	r2,r2,65535
10000710:	1080040c 	andi	r2,r2,16
10000714:	103ff826 	beq	r2,zero,100006f8 <__alt_data_end+0xf80006f8>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000718:	000202c0 	call	1000202c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
1000071c:	01000084 	movi	r4,2
10000720:	01414184 	movi	r5,1286
10000724:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000728:	0009883a 	mov	r4,zero
1000072c:	00002b40 	call	100002b4 <IO_read>
10000730:	10bfffcc 	andi	r2,r2,65535
10000734:	01040074 	movhi	r4,4097
10000738:	21050c04 	addi	r4,r4,5168
1000073c:	100b883a 	mov	r5,r2
10000740:	00021d80 	call	100021d8 <printf>

	IO_write(HPI_ADDR,0x0508); // n
10000744:	01000084 	movi	r4,2
10000748:	01414204 	movi	r5,1288
1000074c:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000750:	0009883a 	mov	r4,zero
10000754:	00002b40 	call	100002b4 <IO_read>
10000758:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
1000075c:	e0bffb0b 	ldhu	r2,-20(fp)
10000760:	01040074 	movhi	r4,4097
10000764:	21051704 	addi	r4,r4,5212
10000768:	100b883a 	mov	r5,r2
1000076c:	00021d80 	call	100021d8 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
10000770:	e0bffb0b 	ldhu	r2,-20(fp)
10000774:	108000e0 	cmpeqi	r2,r2,3
10000778:	1000031e 	bne	r2,zero,10000788 <main+0x46c>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000077c:	00020b00 	call	100020b0 <UsbGetRetryCnt>
10000780:	e0bffb0d 	sth	r2,-20(fp)

		goto USB_HOT_PLUG;
10000784:	003ef006 	br	10000348 <__alt_data_end+0xf8000348>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
10000788:	01040074 	movhi	r4,4097
1000078c:	21052304 	addi	r4,r4,5260
10000790:	00022cc0 	call	100022cc <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
10000794:	00012ac0 	call	100012ac <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000798:	00000306 	br	100007a8 <main+0x48c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
1000079c:	00012ac0 	call	100012ac <UsbGetDeviceDesc1>
		usleep(10*1000);
100007a0:	0109c404 	movi	r4,10000
100007a4:	000f3b40 	call	1000f3b4 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007a8:	010000c4 	movi	r4,3
100007ac:	00002b40 	call	100002b4 <IO_read>
100007b0:	10bfffcc 	andi	r2,r2,65535
100007b4:	1080040c 	andi	r2,r2,16
100007b8:	103ff826 	beq	r2,zero,1000079c <__alt_data_end+0xf800079c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100007bc:	000202c0 	call	1000202c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100007c0:	01000084 	movi	r4,2
100007c4:	01414184 	movi	r5,1286
100007c8:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
100007cc:	0009883a 	mov	r4,zero
100007d0:	00002b40 	call	100002b4 <IO_read>
100007d4:	10bfffcc 	andi	r2,r2,65535
100007d8:	01040074 	movhi	r4,4097
100007dc:	21053204 	addi	r4,r4,5320
100007e0:	100b883a 	mov	r5,r2
100007e4:	00021d80 	call	100021d8 <printf>

	IO_write(HPI_ADDR,0x0508);
100007e8:	01000084 	movi	r4,2
100007ec:	01414204 	movi	r5,1288
100007f0:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100007f4:	0009883a 	mov	r4,zero
100007f8:	00002b40 	call	100002b4 <IO_read>
100007fc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10000800:	e0bffb0b 	ldhu	r2,-20(fp)
10000804:	01040074 	movhi	r4,4097
10000808:	21053d04 	addi	r4,r4,5364
1000080c:	100b883a 	mov	r5,r2
10000810:	00021d80 	call	100021d8 <printf>
	while (usb_ctl_val != 0x03)
10000814:	00000206 	br	10000820 <main+0x504>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000818:	00020b00 	call	100020b0 <UsbGetRetryCnt>
1000081c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000820:	e0bffb0b 	ldhu	r2,-20(fp)
10000824:	108000d8 	cmpnei	r2,r2,3
10000828:	103ffb1e 	bne	r2,zero,10000818 <__alt_data_end+0xf8000818>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
1000082c:	01040074 	movhi	r4,4097
10000830:	21054904 	addi	r4,r4,5412
10000834:	00022cc0 	call	100022cc <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
10000838:	00013f00 	call	100013f0 <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000083c:	00000306 	br	1000084c <main+0x530>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
10000840:	00013f00 	call	100013f0 <UsbGetDeviceDesc2>
		usleep(10*1000);
10000844:	0109c404 	movi	r4,10000
10000848:	000f3b40 	call	1000f3b4 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000084c:	010000c4 	movi	r4,3
10000850:	00002b40 	call	100002b4 <IO_read>
10000854:	10bfffcc 	andi	r2,r2,65535
10000858:	1080040c 	andi	r2,r2,16
1000085c:	103ff826 	beq	r2,zero,10000840 <__alt_data_end+0xf8000840>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000860:	000202c0 	call	1000202c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000864:	01000084 	movi	r4,2
10000868:	01414184 	movi	r5,1286
1000086c:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000870:	0009883a 	mov	r4,zero
10000874:	00002b40 	call	100002b4 <IO_read>
10000878:	10bfffcc 	andi	r2,r2,65535
1000087c:	01040074 	movhi	r4,4097
10000880:	21053204 	addi	r4,r4,5320
10000884:	100b883a 	mov	r5,r2
10000888:	00021d80 	call	100021d8 <printf>

	IO_write(HPI_ADDR,0x0508);
1000088c:	01000084 	movi	r4,2
10000890:	01414204 	movi	r5,1288
10000894:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000898:	0009883a 	mov	r4,zero
1000089c:	00002b40 	call	100002b4 <IO_read>
100008a0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100008a4:	e0bffb0b 	ldhu	r2,-20(fp)
100008a8:	01040074 	movhi	r4,4097
100008ac:	21053d04 	addi	r4,r4,5364
100008b0:	100b883a 	mov	r5,r2
100008b4:	00021d80 	call	100021d8 <printf>
	while (usb_ctl_val != 0x03)
100008b8:	00000206 	br	100008c4 <main+0x5a8>
	{
		usb_ctl_val = UsbGetRetryCnt();
100008bc:	00020b00 	call	100020b0 <UsbGetRetryCnt>
100008c0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100008c4:	e0bffb0b 	ldhu	r2,-20(fp)
100008c8:	108000d8 	cmpnei	r2,r2,3
100008cc:	103ffb1e 	bne	r2,zero,100008bc <__alt_data_end+0xf80008bc>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
100008d0:	01040074 	movhi	r4,4097
100008d4:	21055d04 	addi	r4,r4,5492
100008d8:	00022cc0 	call	100022cc <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
100008dc:	00015c40 	call	100015c4 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100008e0:	00000306 	br	100008f0 <main+0x5d4>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
100008e4:	00015c40 	call	100015c4 <UsbGetConfigDesc1>
		usleep(10*1000);
100008e8:	0109c404 	movi	r4,10000
100008ec:	000f3b40 	call	1000f3b4 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100008f0:	010000c4 	movi	r4,3
100008f4:	00002b40 	call	100002b4 <IO_read>
100008f8:	10bfffcc 	andi	r2,r2,65535
100008fc:	1080040c 	andi	r2,r2,16
10000900:	103ff826 	beq	r2,zero,100008e4 <__alt_data_end+0xf80008e4>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000904:	000202c0 	call	1000202c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000908:	01000084 	movi	r4,2
1000090c:	01414184 	movi	r5,1286
10000910:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000914:	0009883a 	mov	r4,zero
10000918:	00002b40 	call	100002b4 <IO_read>
1000091c:	10bfffcc 	andi	r2,r2,65535
10000920:	01040074 	movhi	r4,4097
10000924:	21056f04 	addi	r4,r4,5564
10000928:	100b883a 	mov	r5,r2
1000092c:	00021d80 	call	100021d8 <printf>

	IO_write(HPI_ADDR,0x0508);
10000930:	01000084 	movi	r4,2
10000934:	01414204 	movi	r5,1288
10000938:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
1000093c:	0009883a 	mov	r4,zero
10000940:	00002b40 	call	100002b4 <IO_read>
10000944:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
10000948:	e0bffb0b 	ldhu	r2,-20(fp)
1000094c:	01040074 	movhi	r4,4097
10000950:	21057a04 	addi	r4,r4,5608
10000954:	100b883a 	mov	r5,r2
10000958:	00021d80 	call	100021d8 <printf>
	while (usb_ctl_val != 0x03)
1000095c:	00000206 	br	10000968 <main+0x64c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000960:	00020b00 	call	100020b0 <UsbGetRetryCnt>
10000964:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000968:	e0bffb0b 	ldhu	r2,-20(fp)
1000096c:	108000d8 	cmpnei	r2,r2,3
10000970:	103ffb1e 	bne	r2,zero,10000960 <__alt_data_end+0xf8000960>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10000974:	01040074 	movhi	r4,4097
10000978:	21058604 	addi	r4,r4,5656
1000097c:	00022cc0 	call	100022cc <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
10000980:	00017500 	call	10001750 <UsbGetConfigDesc2>

	usleep(100*1000);
10000984:	010000b4 	movhi	r4,2
10000988:	2121a804 	addi	r4,r4,-31072
1000098c:	000f3b40 	call	1000f3b4 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000990:	00000306 	br	100009a0 <main+0x684>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
10000994:	00017500 	call	10001750 <UsbGetConfigDesc2>
		usleep(10*1000);
10000998:	0109c404 	movi	r4,10000
1000099c:	000f3b40 	call	1000f3b4 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009a0:	010000c4 	movi	r4,3
100009a4:	00002b40 	call	100002b4 <IO_read>
100009a8:	10bfffcc 	andi	r2,r2,65535
100009ac:	1080040c 	andi	r2,r2,16
100009b0:	103ff826 	beq	r2,zero,10000994 <__alt_data_end+0xf8000994>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100009b4:	000202c0 	call	1000202c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100009b8:	01000084 	movi	r4,2
100009bc:	01414184 	movi	r5,1286
100009c0:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
100009c4:	0009883a 	mov	r4,zero
100009c8:	00002b40 	call	100002b4 <IO_read>
100009cc:	10bfffcc 	andi	r2,r2,65535
100009d0:	01040074 	movhi	r4,4097
100009d4:	21059904 	addi	r4,r4,5732
100009d8:	100b883a 	mov	r5,r2
100009dc:	00021d80 	call	100021d8 <printf>

	IO_write(HPI_ADDR,0x0508);
100009e0:	01000084 	movi	r4,2
100009e4:	01414204 	movi	r5,1288
100009e8:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100009ec:	0009883a 	mov	r4,zero
100009f0:	00002b40 	call	100002b4 <IO_read>
100009f4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
100009f8:	e0bffb0b 	ldhu	r2,-20(fp)
100009fc:	01040074 	movhi	r4,4097
10000a00:	2105a404 	addi	r4,r4,5776
10000a04:	100b883a 	mov	r5,r2
10000a08:	00021d80 	call	100021d8 <printf>
	while (usb_ctl_val != 0x03)
10000a0c:	00000206 	br	10000a18 <main+0x6fc>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000a10:	00020b00 	call	100020b0 <UsbGetRetryCnt>
10000a14:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000a18:	e0bffb0b 	ldhu	r2,-20(fp)
10000a1c:	108000d8 	cmpnei	r2,r2,3
10000a20:	103ffb1e 	bne	r2,zero,10000a10 <__alt_data_end+0xf8000a10>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10000a24:	01040074 	movhi	r4,4097
10000a28:	2105b004 	addi	r4,r4,5824
10000a2c:	00022cc0 	call	100022cc <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10000a30:	01000084 	movi	r4,2
10000a34:	01415b04 	movi	r5,1388
10000a38:	00002480 	call	10000248 <IO_write>
	code = IO_read(HPI_DATA);
10000a3c:	0009883a 	mov	r4,zero
10000a40:	00002b40 	call	100002b4 <IO_read>
10000a44:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
10000a48:	e0bffe8b 	ldhu	r2,-6(fp)
10000a4c:	108000cc 	andi	r2,r2,3
10000a50:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
10000a54:	e0bffe8b 	ldhu	r2,-6(fp)
10000a58:	01040074 	movhi	r4,4097
10000a5c:	2105c304 	addi	r4,r4,5900
10000a60:	100b883a 	mov	r5,r2
10000a64:	00021d80 	call	100021d8 <printf>

	if (code == 0x01)
10000a68:	e0bffe8b 	ldhu	r2,-6(fp)
10000a6c:	10800058 	cmpnei	r2,r2,1
10000a70:	1000041e 	bne	r2,zero,10000a84 <main+0x768>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10000a74:	01040074 	movhi	r4,4097
10000a78:	2105c604 	addi	r4,r4,5912
10000a7c:	00022cc0 	call	100022cc <puts>
10000a80:	00000306 	br	10000a90 <main+0x774>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10000a84:	01040074 	movhi	r4,4097
10000a88:	2105d504 	addi	r4,r4,5972
10000a8c:	00022cc0 	call	100022cc <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10000a90:	01000084 	movi	r4,2
10000a94:	01415d84 	movi	r5,1398
10000a98:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x073F);
10000a9c:	0009883a 	mov	r4,zero
10000aa0:	0141cfc4 	movi	r5,1855
10000aa4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x8105);
10000aa8:	0009883a 	mov	r4,zero
10000aac:	01604154 	movui	r5,33029
10000ab0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0003);
10000ab4:	0009883a 	mov	r4,zero
10000ab8:	014000c4 	movi	r5,3
10000abc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);
10000ac0:	0009883a 	mov	r4,zero
10000ac4:	01400204 	movi	r5,8
10000ac8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10000acc:	0009883a 	mov	r4,zero
10000ad0:	016b0294 	movui	r5,44042
10000ad4:	00002480 	call	10000248 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10000ad8:	01006c04 	movi	r4,432
10000adc:	01415d84 	movi	r5,1398
10000ae0:	00010680 	call	10001068 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10000ae4:	01000084 	movi	r4,2
10000ae8:	01415f04 	movi	r5,1404
10000aec:	00002480 	call	10000248 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10000af0:	0009883a 	mov	r4,zero
10000af4:	00002b40 	call	100002b4 <IO_read>
10000af8:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10000afc:	e0bfff03 	ldbu	r2,-4(fp)
10000b00:	01040074 	movhi	r4,4097
10000b04:	2105de04 	addi	r4,r4,6008
10000b08:	100b883a 	mov	r5,r2
10000b0c:	00021d80 	call	100021d8 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10000b10:	00019b40 	call	100019b4 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b14:	00000306 	br	10000b24 <main+0x808>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10000b18:	00019b40 	call	100019b4 <UsbSetConfig>
		usleep(10*1000);
10000b1c:	0109c404 	movi	r4,10000
10000b20:	000f3b40 	call	1000f3b4 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b24:	010000c4 	movi	r4,3
10000b28:	00002b40 	call	100002b4 <IO_read>
10000b2c:	10bfffcc 	andi	r2,r2,65535
10000b30:	1080040c 	andi	r2,r2,16
10000b34:	103ff826 	beq	r2,zero,10000b18 <__alt_data_end+0xf8000b18>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000b38:	000202c0 	call	1000202c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000b3c:	01000084 	movi	r4,2
10000b40:	01414184 	movi	r5,1286
10000b44:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000b48:	0009883a 	mov	r4,zero
10000b4c:	00002b40 	call	100002b4 <IO_read>
10000b50:	10bfffcc 	andi	r2,r2,65535
10000b54:	01040074 	movhi	r4,4097
10000b58:	2105e804 	addi	r4,r4,6048
10000b5c:	100b883a 	mov	r5,r2
10000b60:	00021d80 	call	100021d8 <printf>

	IO_write(HPI_ADDR,0x0508);
10000b64:	01000084 	movi	r4,2
10000b68:	01414204 	movi	r5,1288
10000b6c:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000b70:	0009883a 	mov	r4,zero
10000b74:	00002b40 	call	100002b4 <IO_read>
10000b78:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10000b7c:	e0bffb0b 	ldhu	r2,-20(fp)
10000b80:	01040074 	movhi	r4,4097
10000b84:	2105f304 	addi	r4,r4,6092
10000b88:	100b883a 	mov	r5,r2
10000b8c:	00021d80 	call	100021d8 <printf>
	while (usb_ctl_val != 0x03)
10000b90:	00000206 	br	10000b9c <main+0x880>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000b94:	00020b00 	call	100020b0 <UsbGetRetryCnt>
10000b98:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000b9c:	e0bffb0b 	ldhu	r2,-20(fp)
10000ba0:	108000d8 	cmpnei	r2,r2,3
10000ba4:	103ffb1e 	bne	r2,zero,10000b94 <__alt_data_end+0xf8000b94>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10000ba8:	01040074 	movhi	r4,4097
10000bac:	2105ff04 	addi	r4,r4,6140
10000bb0:	00022cc0 	call	100022cc <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10000bb4:	0001ab00 	call	10001ab0 <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bb8:	00000306 	br	10000bc8 <main+0x8ac>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10000bbc:	0001ab00 	call	10001ab0 <UsbClassRequest>
		usleep(10*1000);
10000bc0:	0109c404 	movi	r4,10000
10000bc4:	000f3b40 	call	1000f3b4 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bc8:	010000c4 	movi	r4,3
10000bcc:	00002b40 	call	100002b4 <IO_read>
10000bd0:	10bfffcc 	andi	r2,r2,65535
10000bd4:	1080040c 	andi	r2,r2,16
10000bd8:	103ff826 	beq	r2,zero,10000bbc <__alt_data_end+0xf8000bbc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000bdc:	000202c0 	call	1000202c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000be0:	01000084 	movi	r4,2
10000be4:	01414184 	movi	r5,1286
10000be8:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000bec:	0009883a 	mov	r4,zero
10000bf0:	00002b40 	call	100002b4 <IO_read>
10000bf4:	10bfffcc 	andi	r2,r2,65535
10000bf8:	01040074 	movhi	r4,4097
10000bfc:	21061104 	addi	r4,r4,6212
10000c00:	100b883a 	mov	r5,r2
10000c04:	00021d80 	call	100021d8 <printf>

	IO_write(HPI_ADDR,0x0508);
10000c08:	01000084 	movi	r4,2
10000c0c:	01414204 	movi	r5,1288
10000c10:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000c14:	0009883a 	mov	r4,zero
10000c18:	00002b40 	call	100002b4 <IO_read>
10000c1c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000c20:	e0bffb0b 	ldhu	r2,-20(fp)
10000c24:	01040074 	movhi	r4,4097
10000c28:	21061c04 	addi	r4,r4,6256
10000c2c:	100b883a 	mov	r5,r2
10000c30:	00021d80 	call	100021d8 <printf>
	while (usb_ctl_val != 0x03)
10000c34:	00000206 	br	10000c40 <main+0x924>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000c38:	00020b00 	call	100020b0 <UsbGetRetryCnt>
10000c3c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000c40:	e0bffb0b 	ldhu	r2,-20(fp)
10000c44:	108000d8 	cmpnei	r2,r2,3
10000c48:	103ffb1e 	bne	r2,zero,10000c38 <__alt_data_end+0xf8000c38>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10000c4c:	01040074 	movhi	r4,4097
10000c50:	21062804 	addi	r4,r4,6304
10000c54:	00022cc0 	call	100022cc <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10000c58:	0001bac0 	call	10001bac <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c5c:	00000306 	br	10000c6c <main+0x950>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10000c60:	0001bac0 	call	10001bac <UsbGetHidDesc>
		usleep(10*1000);
10000c64:	0109c404 	movi	r4,10000
10000c68:	000f3b40 	call	1000f3b4 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c6c:	010000c4 	movi	r4,3
10000c70:	00002b40 	call	100002b4 <IO_read>
10000c74:	10bfffcc 	andi	r2,r2,65535
10000c78:	1080040c 	andi	r2,r2,16
10000c7c:	103ff826 	beq	r2,zero,10000c60 <__alt_data_end+0xf8000c60>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000c80:	000202c0 	call	1000202c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000c84:	01000084 	movi	r4,2
10000c88:	01414184 	movi	r5,1286
10000c8c:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000c90:	0009883a 	mov	r4,zero
10000c94:	00002b40 	call	100002b4 <IO_read>
10000c98:	10bfffcc 	andi	r2,r2,65535
10000c9c:	01040074 	movhi	r4,4097
10000ca0:	21061104 	addi	r4,r4,6212
10000ca4:	100b883a 	mov	r5,r2
10000ca8:	00021d80 	call	100021d8 <printf>

	IO_write(HPI_ADDR,0x0508);
10000cac:	01000084 	movi	r4,2
10000cb0:	01414204 	movi	r5,1288
10000cb4:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000cb8:	0009883a 	mov	r4,zero
10000cbc:	00002b40 	call	100002b4 <IO_read>
10000cc0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000cc4:	e0bffb0b 	ldhu	r2,-20(fp)
10000cc8:	01040074 	movhi	r4,4097
10000ccc:	21061c04 	addi	r4,r4,6256
10000cd0:	100b883a 	mov	r5,r2
10000cd4:	00021d80 	call	100021d8 <printf>
	while (usb_ctl_val != 0x03)
10000cd8:	00000206 	br	10000ce4 <main+0x9c8>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000cdc:	00020b00 	call	100020b0 <UsbGetRetryCnt>
10000ce0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000ce4:	e0bffb0b 	ldhu	r2,-20(fp)
10000ce8:	108000d8 	cmpnei	r2,r2,3
10000cec:	103ffb1e 	bne	r2,zero,10000cdc <__alt_data_end+0xf8000cdc>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10000cf0:	01040074 	movhi	r4,4097
10000cf4:	21063a04 	addi	r4,r4,6376
10000cf8:	00022cc0 	call	100022cc <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10000cfc:	0001cf00 	call	10001cf0 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d00:	00000306 	br	10000d10 <main+0x9f4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10000d04:	0001cf00 	call	10001cf0 <UsbGetReportDesc>
		usleep(10*1000);
10000d08:	0109c404 	movi	r4,10000
10000d0c:	000f3b40 	call	1000f3b4 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d10:	010000c4 	movi	r4,3
10000d14:	00002b40 	call	100002b4 <IO_read>
10000d18:	10bfffcc 	andi	r2,r2,65535
10000d1c:	1080040c 	andi	r2,r2,16
10000d20:	103ff826 	beq	r2,zero,10000d04 <__alt_data_end+0xf8000d04>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000d24:	000202c0 	call	1000202c <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000d28:	01000084 	movi	r4,2
10000d2c:	01414184 	movi	r5,1286
10000d30:	00002480 	call	10000248 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000d34:	0009883a 	mov	r4,zero
10000d38:	00002b40 	call	100002b4 <IO_read>
10000d3c:	10bfffcc 	andi	r2,r2,65535
10000d40:	01040074 	movhi	r4,4097
10000d44:	21064e04 	addi	r4,r4,6456
10000d48:	100b883a 	mov	r5,r2
10000d4c:	00021d80 	call	100021d8 <printf>

	IO_write(HPI_ADDR,0x0508);
10000d50:	01000084 	movi	r4,2
10000d54:	01414204 	movi	r5,1288
10000d58:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000d5c:	0009883a 	mov	r4,zero
10000d60:	00002b40 	call	100002b4 <IO_read>
10000d64:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10000d68:	e0bffb0b 	ldhu	r2,-20(fp)
10000d6c:	01040074 	movhi	r4,4097
10000d70:	21065a04 	addi	r4,r4,6504
10000d74:	100b883a 	mov	r5,r2
10000d78:	00021d80 	call	100021d8 <printf>
	while (usb_ctl_val != 0x03)
10000d7c:	00000206 	br	10000d88 <main+0xa6c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000d80:	00020b00 	call	100020b0 <UsbGetRetryCnt>
10000d84:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000d88:	e0bffb0b 	ldhu	r2,-20(fp)
10000d8c:	108000d8 	cmpnei	r2,r2,3
10000d90:	103ffb1e 	bne	r2,zero,10000d80 <__alt_data_end+0xf8000d80>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10000d94:	01040074 	movhi	r4,4097
10000d98:	21066604 	addi	r4,r4,6552
10000d9c:	00022cc0 	call	100022cc <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
10000da0:	0109c404 	movi	r4,10000
10000da4:	000f3b40 	call	1000f3b4 <usleep>
	while(1)
	{
		toggle++;
10000da8:	e0bffb83 	ldbu	r2,-18(fp)
10000dac:	10800044 	addi	r2,r2,1
10000db0:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
10000db4:	01000084 	movi	r4,2
10000db8:	01414004 	movi	r5,1280
10000dbc:	00002480 	call	10000248 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10000dc0:	0009883a 	mov	r4,zero
10000dc4:	01414704 	movi	r5,1308
10000dc8:	00002480 	call	10000248 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000dcc:	e0bfff03 	ldbu	r2,-4(fp)
10000dd0:	108003cc 	andi	r2,r2,15
10000dd4:	0009883a 	mov	r4,zero
10000dd8:	100b883a 	mov	r5,r2
10000ddc:	00002480 	call	10000248 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000de0:	0009883a 	mov	r4,zero
10000de4:	0140a444 	movi	r5,657
10000de8:	00002480 	call	10000248 <IO_write>
		if(toggle%2)
10000dec:	e0bffb83 	ldbu	r2,-18(fp)
10000df0:	1080004c 	andi	r2,r2,1
10000df4:	10803fcc 	andi	r2,r2,255
10000df8:	10000426 	beq	r2,zero,10000e0c <main+0xaf0>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10000dfc:	0009883a 	mov	r4,zero
10000e00:	01400044 	movi	r5,1
10000e04:	00002480 	call	10000248 <IO_write>
10000e08:	00000306 	br	10000e18 <main+0xafc>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10000e0c:	0009883a 	mov	r4,zero
10000e10:	01401044 	movi	r5,65
10000e14:	00002480 	call	10000248 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10000e18:	0009883a 	mov	r4,zero
10000e1c:	014004c4 	movi	r5,19
10000e20:	00002480 	call	10000248 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
10000e24:	0009883a 	mov	r4,zero
10000e28:	000b883a 	mov	r5,zero
10000e2c:	00002480 	call	10000248 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000e30:	01006c04 	movi	r4,432
10000e34:	01414004 	movi	r5,1280
10000e38:	00010680 	call	10001068 <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000e3c:	00002406 	br	10000ed0 <main+0xbb4>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
10000e40:	01000084 	movi	r4,2
10000e44:	01414004 	movi	r5,1280
10000e48:	00002480 	call	10000248 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
10000e4c:	0009883a 	mov	r4,zero
10000e50:	01414704 	movi	r5,1308
10000e54:	00002480 	call	10000248 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000e58:	e0bfff03 	ldbu	r2,-4(fp)
10000e5c:	108003cc 	andi	r2,r2,15
10000e60:	0009883a 	mov	r4,zero
10000e64:	100b883a 	mov	r5,r2
10000e68:	00002480 	call	10000248 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000e6c:	0009883a 	mov	r4,zero
10000e70:	0140a444 	movi	r5,657
10000e74:	00002480 	call	10000248 <IO_write>
			if(toggle%2)
10000e78:	e0bffb83 	ldbu	r2,-18(fp)
10000e7c:	1080004c 	andi	r2,r2,1
10000e80:	10803fcc 	andi	r2,r2,255
10000e84:	10000426 	beq	r2,zero,10000e98 <main+0xb7c>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10000e88:	0009883a 	mov	r4,zero
10000e8c:	01400044 	movi	r5,1
10000e90:	00002480 	call	10000248 <IO_write>
10000e94:	00000306 	br	10000ea4 <main+0xb88>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10000e98:	0009883a 	mov	r4,zero
10000e9c:	01401044 	movi	r5,65
10000ea0:	00002480 	call	10000248 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
10000ea4:	0009883a 	mov	r4,zero
10000ea8:	014004c4 	movi	r5,19
10000eac:	00002480 	call	10000248 <IO_write>
			IO_write(HPI_DATA,0x0000);//
10000eb0:	0009883a 	mov	r4,zero
10000eb4:	000b883a 	mov	r5,zero
10000eb8:	00002480 	call	10000248 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000ebc:	01006c04 	movi	r4,432
10000ec0:	01414004 	movi	r5,1280
10000ec4:	00010680 	call	10001068 <UsbWrite>
			usleep(10*1000);
10000ec8:	0109c404 	movi	r4,10000
10000ecc:	000f3b40 	call	1000f3b4 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000ed0:	010000c4 	movi	r4,3
10000ed4:	00002b40 	call	100002b4 <IO_read>
10000ed8:	10bfffcc 	andi	r2,r2,65535
10000edc:	1080040c 	andi	r2,r2,16
10000ee0:	103fd726 	beq	r2,zero,10000e40 <__alt_data_end+0xf8000e40>
			usleep(10*1000);
		}//end while



		usb_ctl_val = UsbWaitTDListDone();
10000ee4:	000202c0 	call	1000202c <UsbWaitTDListDone>
10000ee8:	e0bffb0d 	sth	r2,-20(fp)

		// packet starts from 0x051c, reading third byte
		// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
		IO_write(HPI_ADDR,0x051e); //the start address
10000eec:	01000084 	movi	r4,2
10000ef0:	01414784 	movi	r5,1310
10000ef4:	00002480 	call	10000248 <IO_write>
		keycode = IO_read(HPI_DATA);
10000ef8:	0009883a 	mov	r4,zero
10000efc:	00002b40 	call	100002b4 <IO_read>
10000f00:	10bfffcc 	andi	r2,r2,65535
10000f04:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
10000f08:	01040074 	movhi	r4,4097
10000f0c:	21067a04 	addi	r4,r4,6632
10000f10:	e17ffd17 	ldw	r5,-12(fp)
10000f14:	00021d80 	call	100021d8 <printf>
		IOWR(KEYCODE_BASE, 0, keycode & 0xff);
10000f18:	e0bffd17 	ldw	r2,-12(fp)
10000f1c:	10c03fcc 	andi	r3,r2,255
10000f20:	00802404 	movi	r2,144
10000f24:	10c00035 	stwio	r3,0(r2)


		usleep(200);//usleep(5000);
10000f28:	01003204 	movi	r4,200
10000f2c:	000f3b40 	call	1000f3b4 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10000f30:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000f34:	10bfffcc 	andi	r2,r2,65535
10000f38:	1009883a 	mov	r4,r2
10000f3c:	00010bc0 	call	100010bc <UsbRead>
10000f40:	e0bffb0d 	sth	r2,-20(fp)

		if(!(usb_ctl_val & no_device))
10000f44:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000f48:	e0fffb0b 	ldhu	r3,-20(fp)
10000f4c:	1884703a 	and	r2,r3,r2
10000f50:	10bfffcc 	andi	r2,r2,65535
10000f54:	1000201e 	bne	r2,zero,10000fd8 <main+0xcbc>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10000f58:	e03ffbc5 	stb	zero,-17(fp)
10000f5c:	00001006 	br	10000fa0 <main+0xc84>
			{
				usleep(5*1000);
10000f60:	0104e204 	movi	r4,5000
10000f64:	000f3b40 	call	1000f3b4 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
10000f68:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000f6c:	10bfffcc 	andi	r2,r2,65535
10000f70:	1009883a 	mov	r4,r2
10000f74:	00010bc0 	call	100010bc <UsbRead>
10000f78:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
10000f7c:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000f80:	e0fffb0b 	ldhu	r3,-20(fp)
10000f84:	1884703a 	and	r2,r3,r2
10000f88:	10bfffcc 	andi	r2,r2,65535
10000f8c:	10000126 	beq	r2,zero,10000f94 <main+0xc78>
10000f90:	00000606 	br	10000fac <main+0xc90>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10000f94:	e0bffbc3 	ldbu	r2,-17(fp)
10000f98:	10800044 	addi	r2,r2,1
10000f9c:	e0bffbc5 	stb	r2,-17(fp)
10000fa0:	e0bffbc3 	ldbu	r2,-17(fp)
10000fa4:	108001f0 	cmpltui	r2,r2,7
10000fa8:	103fed1e 	bne	r2,zero,10000f60 <__alt_data_end+0xf8000f60>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
			}
			if(!(usb_ctl_val & no_device))
10000fac:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000fb0:	e0fffb0b 	ldhu	r3,-20(fp)
10000fb4:	1884703a 	and	r2,r3,r2
10000fb8:	10bfffcc 	andi	r2,r2,65535
10000fbc:	1000061e 	bne	r2,zero,10000fd8 <main+0xcbc>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
10000fc0:	01040074 	movhi	r4,4097
10000fc4:	21068304 	addi	r4,r4,6668
10000fc8:	00022cc0 	call	100022cc <puts>
				printf("[INFO]: please insert again!!! \n");
10000fcc:	01040074 	movhi	r4,4097
10000fd0:	21068e04 	addi	r4,r4,6712
10000fd4:	00022cc0 	call	100022cc <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
10000fd8:	00001d06 	br	10001050 <main+0xd34>
		{

			usb_ctl_val = UsbRead(ctl_reg);
10000fdc:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000fe0:	10bfffcc 	andi	r2,r2,65535
10000fe4:	1009883a 	mov	r4,r2
10000fe8:	00010bc0 	call	100010bc <UsbRead>
10000fec:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
10000ff0:	0104e204 	movi	r4,5000
10000ff4:	000f3b40 	call	1000f3b4 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10000ff8:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000ffc:	10bfffcc 	andi	r2,r2,65535
10001000:	1009883a 	mov	r4,r2
10001004:	00010bc0 	call	100010bc <UsbRead>
10001008:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
1000100c:	0104e204 	movi	r4,5000
10001010:	000f3b40 	call	1000f3b4 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001014:	d0a6cb0b 	ldhu	r2,-25812(gp)
10001018:	10bfffcc 	andi	r2,r2,65535
1000101c:	1009883a 	mov	r4,r2
10001020:	00010bc0 	call	100010bc <UsbRead>
10001024:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
10001028:	0104e204 	movi	r4,5000
1000102c:	000f3b40 	call	1000f3b4 <usleep>

			if(usb_ctl_val & no_device)
10001030:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001034:	e0fffb0b 	ldhu	r3,-20(fp)
10001038:	1884703a 	and	r2,r3,r2
1000103c:	10bfffcc 	andi	r2,r2,65535
10001040:	10000126 	beq	r2,zero,10001048 <main+0xd2c>
				goto USB_HOT_PLUG;
10001044:	003cc006 	br	10000348 <__alt_data_end+0xf8000348>

			usleep(200);
10001048:	01003204 	movi	r4,200
1000104c:	000f3b40 	call	1000f3b4 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
10001050:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001054:	e0fffb0b 	ldhu	r3,-20(fp)
10001058:	1884703a 	and	r2,r3,r2
1000105c:	10bfffcc 	andi	r2,r2,65535
10001060:	103fde26 	beq	r2,zero,10000fdc <__alt_data_end+0xf8000fdc>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
10001064:	003f5006 	br	10000da8 <__alt_data_end+0xf8000da8>

10001068 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
10001068:	defffc04 	addi	sp,sp,-16
1000106c:	dfc00315 	stw	ra,12(sp)
10001070:	df000215 	stw	fp,8(sp)
10001074:	df000204 	addi	fp,sp,8
10001078:	2007883a 	mov	r3,r4
1000107c:	2805883a 	mov	r2,r5
10001080:	e0fffe0d 	sth	r3,-8(fp)
10001084:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR, Address);
10001088:	e0bffe0b 	ldhu	r2,-8(fp)
1000108c:	01000084 	movi	r4,2
10001090:	100b883a 	mov	r5,r2
10001094:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA, Data);
10001098:	e0bfff0b 	ldhu	r2,-4(fp)
1000109c:	0009883a 	mov	r4,zero
100010a0:	100b883a 	mov	r5,r2
100010a4:	00002480 	call	10000248 <IO_write>
}
100010a8:	e037883a 	mov	sp,fp
100010ac:	dfc00117 	ldw	ra,4(sp)
100010b0:	df000017 	ldw	fp,0(sp)
100010b4:	dec00204 	addi	sp,sp,8
100010b8:	f800283a 	ret

100010bc <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
100010bc:	defffd04 	addi	sp,sp,-12
100010c0:	dfc00215 	stw	ra,8(sp)
100010c4:	df000115 	stw	fp,4(sp)
100010c8:	df000104 	addi	fp,sp,4
100010cc:	2005883a 	mov	r2,r4
100010d0:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR, Address);
100010d4:	e0bfff0b 	ldhu	r2,-4(fp)
100010d8:	01000084 	movi	r4,2
100010dc:	100b883a 	mov	r5,r2
100010e0:	00002480 	call	10000248 <IO_write>
	return IO_read(HPI_DATA);
100010e4:	0009883a 	mov	r4,zero
100010e8:	00002b40 	call	100002b4 <IO_read>
}
100010ec:	e037883a 	mov	sp,fp
100010f0:	dfc00117 	ldw	ra,4(sp)
100010f4:	df000017 	ldw	fp,0(sp)
100010f8:	dec00204 	addi	sp,sp,8
100010fc:	f800283a 	ret

10001100 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
10001100:	defffe04 	addi	sp,sp,-8
10001104:	dfc00115 	stw	ra,4(sp)
10001108:	df000015 	stw	fp,0(sp)
1000110c:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
10001110:	01000044 	movi	r4,1
10001114:	017e9414 	movui	r5,64080
10001118:	00002480 	call	10000248 <IO_write>
	usleep(100000);
1000111c:	010000b4 	movhi	r4,2
10001120:	2121a804 	addi	r4,r4,-31072
10001124:	000f3b40 	call	1000f3b4 <usleep>
	printf("[USB INIT]:reset finished!\n");
10001128:	01040074 	movhi	r4,4097
1000112c:	21069604 	addi	r4,r4,6744
10001130:	00022cc0 	call	100022cc <puts>

	usleep(500000);
10001134:	01000234 	movhi	r4,8
10001138:	21284804 	addi	r4,r4,-24288
1000113c:	000f3b40 	call	1000f3b4 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
10001140:	01040074 	movhi	r4,4097
10001144:	21069d04 	addi	r4,r4,6772
10001148:	00022cc0 	call	100022cc <puts>
	IO_read(HPI_MAILBOX);
1000114c:	01000044 	movi	r4,1
10001150:	00002b40 	call	100002b4 <IO_read>
	IO_read(HPI_STATUS);
10001154:	010000c4 	movi	r4,3
10001158:	00002b40 	call	100002b4 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
1000115c:	01005104 	movi	r4,324
10001160:	00010bc0 	call	100010bc <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10001164:	01005104 	movi	r4,324
10001168:	000b883a 	mov	r5,zero
1000116c:	00010680 	call	10001068 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
10001170:	01005204 	movi	r4,328
10001174:	00010bc0 	call	100010bc <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
10001178:	01005204 	movi	r4,328
1000117c:	000b883a 	mov	r5,zero
10001180:	00010680 	call	10001068 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10001184:	01302414 	movui	r4,49296
10001188:	017fffd4 	movui	r5,65535
1000118c:	00010680 	call	10001068 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
10001190:	01302c14 	movui	r4,49328
10001194:	017fffd4 	movui	r5,65535
10001198:	00010680 	call	10001068 <UsbWrite>
}
1000119c:	e037883a 	mov	sp,fp
100011a0:	dfc00117 	ldw	ra,4(sp)
100011a4:	df000017 	ldw	fp,0(sp)
100011a8:	dec00204 	addi	sp,sp,8
100011ac:	f800283a 	ret

100011b0 <UsbSetAddress>:


void UsbSetAddress()
{
100011b0:	defffe04 	addi	sp,sp,-8
100011b4:	dfc00115 	stw	ra,4(sp)
100011b8:	df000015 	stw	fp,0(sp)
100011bc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100011c0:	01000084 	movi	r4,2
100011c4:	01414004 	movi	r5,1280
100011c8:	00002480 	call	10000248 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
100011cc:	0009883a 	mov	r4,zero
100011d0:	01414304 	movi	r5,1292
100011d4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100011d8:	0009883a 	mov	r4,zero
100011dc:	01400204 	movi	r5,8
100011e0:	00002480 	call	10000248 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
100011e4:	0009883a 	mov	r4,zero
100011e8:	01403404 	movi	r5,208
100011ec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
100011f0:	0009883a 	mov	r4,zero
100011f4:	01400044 	movi	r5,1
100011f8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
100011fc:	0009883a 	mov	r4,zero
10001200:	014004c4 	movi	r5,19
10001204:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001208:	0009883a 	mov	r4,zero
1000120c:	01414504 	movi	r5,1300
10001210:	00002480 	call	10000248 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
10001214:	0009883a 	mov	r4,zero
10001218:	01414004 	movi	r5,1280
1000121c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0002);
10001220:	0009883a 	mov	r4,zero
10001224:	01400084 	movi	r5,2
10001228:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000122c:	0009883a 	mov	r4,zero
10001230:	000b883a 	mov	r5,zero
10001234:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001238:	0009883a 	mov	r4,zero
1000123c:	000b883a 	mov	r5,zero
10001240:	00002480 	call	10000248 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10001244:	0009883a 	mov	r4,zero
10001248:	000b883a 	mov	r5,zero
1000124c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//
10001250:	0009883a 	mov	r4,zero
10001254:	000b883a 	mov	r5,zero
10001258:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0090);//
1000125c:	0009883a 	mov	r4,zero
10001260:	01402404 	movi	r5,144
10001264:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
10001268:	0009883a 	mov	r4,zero
1000126c:	01401044 	movi	r5,65
10001270:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001274:	0009883a 	mov	r4,zero
10001278:	014004c4 	movi	r5,19
1000127c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001280:	0009883a 	mov	r4,zero
10001284:	000b883a 	mov	r5,zero
10001288:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000128c:	01006c04 	movi	r4,432
10001290:	01414004 	movi	r5,1280
10001294:	00010680 	call	10001068 <UsbWrite>
}
10001298:	e037883a 	mov	sp,fp
1000129c:	dfc00117 	ldw	ra,4(sp)
100012a0:	df000017 	ldw	fp,0(sp)
100012a4:	dec00204 	addi	sp,sp,8
100012a8:	f800283a 	ret

100012ac <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
100012ac:	defffe04 	addi	sp,sp,-8
100012b0:	dfc00115 	stw	ra,4(sp)
100012b4:	df000015 	stw	fp,0(sp)
100012b8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100012bc:	01000084 	movi	r4,2
100012c0:	01414004 	movi	r5,1280
100012c4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
100012c8:	0009883a 	mov	r4,zero
100012cc:	01414304 	movi	r5,1292
100012d0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100012d4:	0009883a 	mov	r4,zero
100012d8:	01400204 	movi	r5,8
100012dc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100012e0:	0009883a 	mov	r4,zero
100012e4:	0140b404 	movi	r5,720
100012e8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
100012ec:	0009883a 	mov	r4,zero
100012f0:	01400044 	movi	r5,1
100012f4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
100012f8:	0009883a 	mov	r4,zero
100012fc:	014004c4 	movi	r5,19
10001300:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001304:	0009883a 	mov	r4,zero
10001308:	01414504 	movi	r5,1300
1000130c:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001310:	0009883a 	mov	r4,zero
10001314:	0141a004 	movi	r5,1664
10001318:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
1000131c:	0009883a 	mov	r4,zero
10001320:	01404004 	movi	r5,256
10001324:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001328:	0009883a 	mov	r4,zero
1000132c:	000b883a 	mov	r5,zero
10001330:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);
10001334:	0009883a 	mov	r4,zero
10001338:	01400204 	movi	r5,8
1000133c:	00002480 	call	10000248 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
10001340:	0009883a 	mov	r4,zero
10001344:	01414b04 	movi	r5,1324
10001348:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//
1000134c:	0009883a 	mov	r4,zero
10001350:	01400204 	movi	r5,8
10001354:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//
10001358:	0009883a 	mov	r4,zero
1000135c:	0140a404 	movi	r5,656
10001360:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
10001364:	0009883a 	mov	r4,zero
10001368:	01401044 	movi	r5,65
1000136c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001370:	0009883a 	mov	r4,zero
10001374:	014004c4 	movi	r5,19
10001378:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);
1000137c:	0009883a 	mov	r4,zero
10001380:	01414804 	movi	r5,1312
10001384:	00002480 	call	10000248 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
10001388:	0009883a 	mov	r4,zero
1000138c:	000b883a 	mov	r5,zero
10001390:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10001394:	0009883a 	mov	r4,zero
10001398:	000b883a 	mov	r5,zero
1000139c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
100013a0:	0009883a 	mov	r4,zero
100013a4:	01408404 	movi	r5,528
100013a8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);
100013ac:	0009883a 	mov	r4,zero
100013b0:	01401044 	movi	r5,65
100013b4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
100013b8:	0009883a 	mov	r4,zero
100013bc:	014004c4 	movi	r5,19
100013c0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
100013c4:	0009883a 	mov	r4,zero
100013c8:	000b883a 	mov	r5,zero
100013cc:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100013d0:	01006c04 	movi	r4,432
100013d4:	01414004 	movi	r5,1280
100013d8:	00010680 	call	10001068 <UsbWrite>
}
100013dc:	e037883a 	mov	sp,fp
100013e0:	dfc00117 	ldw	ra,4(sp)
100013e4:	df000017 	ldw	fp,0(sp)
100013e8:	dec00204 	addi	sp,sp,8
100013ec:	f800283a 	ret

100013f0 <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
100013f0:	defffe04 	addi	sp,sp,-8
100013f4:	dfc00115 	stw	ra,4(sp)
100013f8:	df000015 	stw	fp,0(sp)
100013fc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001400:	01000084 	movi	r4,2
10001404:	01414004 	movi	r5,1280
10001408:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
1000140c:	0009883a 	mov	r4,zero
10001410:	01414304 	movi	r5,1292
10001414:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001418:	0009883a 	mov	r4,zero
1000141c:	01400204 	movi	r5,8
10001420:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001424:	0009883a 	mov	r4,zero
10001428:	0140b404 	movi	r5,720
1000142c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001430:	0009883a 	mov	r4,zero
10001434:	01400044 	movi	r5,1
10001438:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000143c:	0009883a 	mov	r4,zero
10001440:	014004c4 	movi	r5,19
10001444:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001448:	0009883a 	mov	r4,zero
1000144c:	01414504 	movi	r5,1300
10001450:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001454:	0009883a 	mov	r4,zero
10001458:	0141a004 	movi	r5,1664
1000145c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
10001460:	0009883a 	mov	r4,zero
10001464:	01404004 	movi	r5,256
10001468:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
1000146c:	0009883a 	mov	r4,zero
10001470:	000b883a 	mov	r5,zero
10001474:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
10001478:	0009883a 	mov	r4,zero
1000147c:	01400484 	movi	r5,18
10001480:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001484:	0009883a 	mov	r4,zero
10001488:	01415104 	movi	r5,1348
1000148c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001490:	0009883a 	mov	r4,zero
10001494:	01400204 	movi	r5,8
10001498:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
1000149c:	0009883a 	mov	r4,zero
100014a0:	0140a404 	movi	r5,656
100014a4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100014a8:	0009883a 	mov	r4,zero
100014ac:	01401044 	movi	r5,65
100014b0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100014b4:	0009883a 	mov	r4,zero
100014b8:	014004c4 	movi	r5,19
100014bc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100014c0:	0009883a 	mov	r4,zero
100014c4:	01414804 	movi	r5,1312
100014c8:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
100014cc:	0009883a 	mov	r4,zero
100014d0:	01415304 	movi	r5,1356
100014d4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
100014d8:	0009883a 	mov	r4,zero
100014dc:	01400204 	movi	r5,8
100014e0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100014e4:	0009883a 	mov	r4,zero
100014e8:	0140a404 	movi	r5,656
100014ec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
100014f0:	0009883a 	mov	r4,zero
100014f4:	01400044 	movi	r5,1
100014f8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100014fc:	0009883a 	mov	r4,zero
10001500:	014004c4 	movi	r5,19
10001504:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001508:	0009883a 	mov	r4,zero
1000150c:	01414b04 	movi	r5,1324
10001510:	00002480 	call	10000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
10001514:	0009883a 	mov	r4,zero
10001518:	01415504 	movi	r5,1364
1000151c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
10001520:	0009883a 	mov	r4,zero
10001524:	01400084 	movi	r5,2
10001528:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
1000152c:	0009883a 	mov	r4,zero
10001530:	0140a404 	movi	r5,656
10001534:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001538:	0009883a 	mov	r4,zero
1000153c:	01401044 	movi	r5,65
10001540:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001544:	0009883a 	mov	r4,zero
10001548:	014004c4 	movi	r5,19
1000154c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001550:	0009883a 	mov	r4,zero
10001554:	01414e04 	movi	r5,1336
10001558:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
1000155c:	0009883a 	mov	r4,zero
10001560:	000b883a 	mov	r5,zero
10001564:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10001568:	0009883a 	mov	r4,zero
1000156c:	000b883a 	mov	r5,zero
10001570:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
10001574:	0009883a 	mov	r4,zero
10001578:	01408404 	movi	r5,528
1000157c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
10001580:	0009883a 	mov	r4,zero
10001584:	01401044 	movi	r5,65
10001588:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
1000158c:	0009883a 	mov	r4,zero
10001590:	014004c4 	movi	r5,19
10001594:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10001598:	0009883a 	mov	r4,zero
1000159c:	000b883a 	mov	r5,zero
100015a0:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100015a4:	01006c04 	movi	r4,432
100015a8:	01414004 	movi	r5,1280
100015ac:	00010680 	call	10001068 <UsbWrite>
}
100015b0:	e037883a 	mov	sp,fp
100015b4:	dfc00117 	ldw	ra,4(sp)
100015b8:	df000017 	ldw	fp,0(sp)
100015bc:	dec00204 	addi	sp,sp,8
100015c0:	f800283a 	ret

100015c4 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
100015c4:	defffe04 	addi	sp,sp,-8
100015c8:	dfc00115 	stw	ra,4(sp)
100015cc:	df000015 	stw	fp,0(sp)
100015d0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100015d4:	01000084 	movi	r4,2
100015d8:	01414004 	movi	r5,1280
100015dc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
100015e0:	0009883a 	mov	r4,zero
100015e4:	01414304 	movi	r5,1292
100015e8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100015ec:	0009883a 	mov	r4,zero
100015f0:	01400204 	movi	r5,8
100015f4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100015f8:	0009883a 	mov	r4,zero
100015fc:	0140b404 	movi	r5,720
10001600:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001604:	0009883a 	mov	r4,zero
10001608:	01400044 	movi	r5,1
1000160c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001610:	0009883a 	mov	r4,zero
10001614:	014004c4 	movi	r5,19
10001618:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000161c:	0009883a 	mov	r4,zero
10001620:	01414504 	movi	r5,1300
10001624:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001628:	0009883a 	mov	r4,zero
1000162c:	0141a004 	movi	r5,1664
10001630:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10001634:	0009883a 	mov	r4,zero
10001638:	01408004 	movi	r5,512
1000163c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001640:	0009883a 	mov	r4,zero
10001644:	000b883a 	mov	r5,zero
10001648:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
1000164c:	0009883a 	mov	r4,zero
10001650:	01400244 	movi	r5,9
10001654:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001658:	0009883a 	mov	r4,zero
1000165c:	01415104 	movi	r5,1348
10001660:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001664:	0009883a 	mov	r4,zero
10001668:	01400204 	movi	r5,8
1000166c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001670:	0009883a 	mov	r4,zero
10001674:	0140a404 	movi	r5,656
10001678:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000167c:	0009883a 	mov	r4,zero
10001680:	01401044 	movi	r5,65
10001684:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001688:	0009883a 	mov	r4,zero
1000168c:	014004c4 	movi	r5,19
10001690:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001694:	0009883a 	mov	r4,zero
10001698:	01414804 	movi	r5,1312
1000169c:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
100016a0:	0009883a 	mov	r4,zero
100016a4:	01415304 	movi	r5,1356
100016a8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
100016ac:	0009883a 	mov	r4,zero
100016b0:	01400044 	movi	r5,1
100016b4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100016b8:	0009883a 	mov	r4,zero
100016bc:	0140a404 	movi	r5,656
100016c0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
100016c4:	0009883a 	mov	r4,zero
100016c8:	01400044 	movi	r5,1
100016cc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100016d0:	0009883a 	mov	r4,zero
100016d4:	014004c4 	movi	r5,19
100016d8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100016dc:	0009883a 	mov	r4,zero
100016e0:	01414b04 	movi	r5,1324
100016e4:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
100016e8:	0009883a 	mov	r4,zero
100016ec:	000b883a 	mov	r5,zero
100016f0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
100016f4:	0009883a 	mov	r4,zero
100016f8:	000b883a 	mov	r5,zero
100016fc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10001700:	0009883a 	mov	r4,zero
10001704:	01408404 	movi	r5,528
10001708:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
1000170c:	0009883a 	mov	r4,zero
10001710:	01401044 	movi	r5,65
10001714:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001718:	0009883a 	mov	r4,zero
1000171c:	014004c4 	movi	r5,19
10001720:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10001724:	0009883a 	mov	r4,zero
10001728:	000b883a 	mov	r5,zero
1000172c:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001730:	01006c04 	movi	r4,432
10001734:	01414004 	movi	r5,1280
10001738:	00010680 	call	10001068 <UsbWrite>
}
1000173c:	e037883a 	mov	sp,fp
10001740:	dfc00117 	ldw	ra,4(sp)
10001744:	df000017 	ldw	fp,0(sp)
10001748:	dec00204 	addi	sp,sp,8
1000174c:	f800283a 	ret

10001750 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
10001750:	defffe04 	addi	sp,sp,-8
10001754:	dfc00115 	stw	ra,4(sp)
10001758:	df000015 	stw	fp,0(sp)
1000175c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001760:	01000084 	movi	r4,2
10001764:	01414004 	movi	r5,1280
10001768:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
1000176c:	0009883a 	mov	r4,zero
10001770:	01414304 	movi	r5,1292
10001774:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001778:	0009883a 	mov	r4,zero
1000177c:	01400204 	movi	r5,8
10001780:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001784:	0009883a 	mov	r4,zero
10001788:	0140b404 	movi	r5,720
1000178c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001790:	0009883a 	mov	r4,zero
10001794:	01400044 	movi	r5,1
10001798:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
1000179c:	0009883a 	mov	r4,zero
100017a0:	014004c4 	movi	r5,19
100017a4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
100017a8:	0009883a 	mov	r4,zero
100017ac:	01414504 	movi	r5,1300
100017b0:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100017b4:	0009883a 	mov	r4,zero
100017b8:	0141a004 	movi	r5,1664
100017bc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
100017c0:	0009883a 	mov	r4,zero
100017c4:	01408004 	movi	r5,512
100017c8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100017cc:	0009883a 	mov	r4,zero
100017d0:	000b883a 	mov	r5,zero
100017d4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
100017d8:	0009883a 	mov	r4,zero
100017dc:	01403fc4 	movi	r5,255
100017e0:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
100017e4:	0009883a 	mov	r4,zero
100017e8:	01415704 	movi	r5,1372
100017ec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100017f0:	0009883a 	mov	r4,zero
100017f4:	01400204 	movi	r5,8
100017f8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100017fc:	0009883a 	mov	r4,zero
10001800:	0140a404 	movi	r5,656
10001804:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001808:	0009883a 	mov	r4,zero
1000180c:	01401044 	movi	r5,65
10001810:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001814:	0009883a 	mov	r4,zero
10001818:	014004c4 	movi	r5,19
1000181c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001820:	0009883a 	mov	r4,zero
10001824:	01414804 	movi	r5,1312
10001828:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
1000182c:	0009883a 	mov	r4,zero
10001830:	01415904 	movi	r5,1380
10001834:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001838:	0009883a 	mov	r4,zero
1000183c:	01400204 	movi	r5,8
10001840:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001844:	0009883a 	mov	r4,zero
10001848:	0140a404 	movi	r5,656
1000184c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001850:	0009883a 	mov	r4,zero
10001854:	01400044 	movi	r5,1
10001858:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
1000185c:	0009883a 	mov	r4,zero
10001860:	014004c4 	movi	r5,19
10001864:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001868:	0009883a 	mov	r4,zero
1000186c:	01414b04 	movi	r5,1324
10001870:	00002480 	call	10000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
10001874:	0009883a 	mov	r4,zero
10001878:	01415b04 	movi	r5,1388
1000187c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10001880:	0009883a 	mov	r4,zero
10001884:	01400204 	movi	r5,8
10001888:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
1000188c:	0009883a 	mov	r4,zero
10001890:	0140a404 	movi	r5,656
10001894:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001898:	0009883a 	mov	r4,zero
1000189c:	01401044 	movi	r5,65
100018a0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100018a4:	0009883a 	mov	r4,zero
100018a8:	014004c4 	movi	r5,19
100018ac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
100018b0:	0009883a 	mov	r4,zero
100018b4:	01414e04 	movi	r5,1336
100018b8:	00002480 	call	10000248 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
100018bc:	0009883a 	mov	r4,zero
100018c0:	01415d04 	movi	r5,1396
100018c4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
100018c8:	0009883a 	mov	r4,zero
100018cc:	01400204 	movi	r5,8
100018d0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
100018d4:	0009883a 	mov	r4,zero
100018d8:	0140a404 	movi	r5,656
100018dc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
100018e0:	0009883a 	mov	r4,zero
100018e4:	01400044 	movi	r5,1
100018e8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
100018ec:	0009883a 	mov	r4,zero
100018f0:	014004c4 	movi	r5,19
100018f4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
100018f8:	0009883a 	mov	r4,zero
100018fc:	01415104 	movi	r5,1348
10001900:	00002480 	call	10000248 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
10001904:	0009883a 	mov	r4,zero
10001908:	01415f04 	movi	r5,1404
1000190c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
10001910:	0009883a 	mov	r4,zero
10001914:	01400084 	movi	r5,2
10001918:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
1000191c:	0009883a 	mov	r4,zero
10001920:	0140a404 	movi	r5,656
10001924:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10001928:	0009883a 	mov	r4,zero
1000192c:	01401044 	movi	r5,65
10001930:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001934:	0009883a 	mov	r4,zero
10001938:	014004c4 	movi	r5,19
1000193c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10001940:	0009883a 	mov	r4,zero
10001944:	01415404 	movi	r5,1360
10001948:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
1000194c:	0009883a 	mov	r4,zero
10001950:	000b883a 	mov	r5,zero
10001954:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10001958:	0009883a 	mov	r4,zero
1000195c:	000b883a 	mov	r5,zero
10001960:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
10001964:	0009883a 	mov	r4,zero
10001968:	01408404 	movi	r5,528
1000196c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10001970:	0009883a 	mov	r4,zero
10001974:	01401044 	movi	r5,65
10001978:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
1000197c:	0009883a 	mov	r4,zero
10001980:	014004c4 	movi	r5,19
10001984:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10001988:	0009883a 	mov	r4,zero
1000198c:	000b883a 	mov	r5,zero
10001990:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001994:	01006c04 	movi	r4,432
10001998:	01414004 	movi	r5,1280
1000199c:	00010680 	call	10001068 <UsbWrite>
}
100019a0:	e037883a 	mov	sp,fp
100019a4:	dfc00117 	ldw	ra,4(sp)
100019a8:	df000017 	ldw	fp,0(sp)
100019ac:	dec00204 	addi	sp,sp,8
100019b0:	f800283a 	ret

100019b4 <UsbSetConfig>:

void UsbSetConfig()
{
100019b4:	defffe04 	addi	sp,sp,-8
100019b8:	dfc00115 	stw	ra,4(sp)
100019bc:	df000015 	stw	fp,0(sp)
100019c0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100019c4:	01000084 	movi	r4,2
100019c8:	01414004 	movi	r5,1280
100019cc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
100019d0:	0009883a 	mov	r4,zero
100019d4:	01414304 	movi	r5,1292
100019d8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100019dc:	0009883a 	mov	r4,zero
100019e0:	01400204 	movi	r5,8
100019e4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
100019e8:	0009883a 	mov	r4,zero
100019ec:	0140b404 	movi	r5,720
100019f0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
100019f4:	0009883a 	mov	r4,zero
100019f8:	01400044 	movi	r5,1
100019fc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001a00:	0009883a 	mov	r4,zero
10001a04:	014004c4 	movi	r5,19
10001a08:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001a0c:	0009883a 	mov	r4,zero
10001a10:	01414504 	movi	r5,1300
10001a14:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10001a18:	0009883a 	mov	r4,zero
10001a1c:	01424004 	movi	r5,2304
10001a20:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
10001a24:	0009883a 	mov	r4,zero
10001a28:	01400044 	movi	r5,1
10001a2c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001a30:	0009883a 	mov	r4,zero
10001a34:	000b883a 	mov	r5,zero
10001a38:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001a3c:	0009883a 	mov	r4,zero
10001a40:	000b883a 	mov	r5,zero
10001a44:	00002480 	call	10000248 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001a48:	0009883a 	mov	r4,zero
10001a4c:	000b883a 	mov	r5,zero
10001a50:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10001a54:	0009883a 	mov	r4,zero
10001a58:	000b883a 	mov	r5,zero
10001a5c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10001a60:	0009883a 	mov	r4,zero
10001a64:	0140a404 	movi	r5,656
10001a68:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001a6c:	0009883a 	mov	r4,zero
10001a70:	01401044 	movi	r5,65
10001a74:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001a78:	0009883a 	mov	r4,zero
10001a7c:	014004c4 	movi	r5,19
10001a80:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001a84:	0009883a 	mov	r4,zero
10001a88:	000b883a 	mov	r5,zero
10001a8c:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001a90:	01006c04 	movi	r4,432
10001a94:	01414004 	movi	r5,1280
10001a98:	00010680 	call	10001068 <UsbWrite>

}
10001a9c:	e037883a 	mov	sp,fp
10001aa0:	dfc00117 	ldw	ra,4(sp)
10001aa4:	df000017 	ldw	fp,0(sp)
10001aa8:	dec00204 	addi	sp,sp,8
10001aac:	f800283a 	ret

10001ab0 <UsbClassRequest>:

void UsbClassRequest()
{
10001ab0:	defffe04 	addi	sp,sp,-8
10001ab4:	dfc00115 	stw	ra,4(sp)
10001ab8:	df000015 	stw	fp,0(sp)
10001abc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001ac0:	01000084 	movi	r4,2
10001ac4:	01414004 	movi	r5,1280
10001ac8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001acc:	0009883a 	mov	r4,zero
10001ad0:	01414304 	movi	r5,1292
10001ad4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001ad8:	0009883a 	mov	r4,zero
10001adc:	01400204 	movi	r5,8
10001ae0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001ae4:	0009883a 	mov	r4,zero
10001ae8:	0140b404 	movi	r5,720
10001aec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001af0:	0009883a 	mov	r4,zero
10001af4:	01400044 	movi	r5,1
10001af8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001afc:	0009883a 	mov	r4,zero
10001b00:	014004c4 	movi	r5,19
10001b04:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001b08:	0009883a 	mov	r4,zero
10001b0c:	01414504 	movi	r5,1300
10001b10:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10001b14:	0009883a 	mov	r4,zero
10001b18:	01428844 	movi	r5,2593
10001b1c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10001b20:	0009883a 	mov	r4,zero
10001b24:	000b883a 	mov	r5,zero
10001b28:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001b2c:	0009883a 	mov	r4,zero
10001b30:	000b883a 	mov	r5,zero
10001b34:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001b38:	0009883a 	mov	r4,zero
10001b3c:	000b883a 	mov	r5,zero
10001b40:	00002480 	call	10000248 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001b44:	0009883a 	mov	r4,zero
10001b48:	000b883a 	mov	r5,zero
10001b4c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10001b50:	0009883a 	mov	r4,zero
10001b54:	000b883a 	mov	r5,zero
10001b58:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10001b5c:	0009883a 	mov	r4,zero
10001b60:	0140a404 	movi	r5,656
10001b64:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001b68:	0009883a 	mov	r4,zero
10001b6c:	01401044 	movi	r5,65
10001b70:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001b74:	0009883a 	mov	r4,zero
10001b78:	014004c4 	movi	r5,19
10001b7c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001b80:	0009883a 	mov	r4,zero
10001b84:	000b883a 	mov	r5,zero
10001b88:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001b8c:	01006c04 	movi	r4,432
10001b90:	01414004 	movi	r5,1280
10001b94:	00010680 	call	10001068 <UsbWrite>
}
10001b98:	e037883a 	mov	sp,fp
10001b9c:	dfc00117 	ldw	ra,4(sp)
10001ba0:	df000017 	ldw	fp,0(sp)
10001ba4:	dec00204 	addi	sp,sp,8
10001ba8:	f800283a 	ret

10001bac <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10001bac:	defffe04 	addi	sp,sp,-8
10001bb0:	dfc00115 	stw	ra,4(sp)
10001bb4:	df000015 	stw	fp,0(sp)
10001bb8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001bbc:	01000084 	movi	r4,2
10001bc0:	01414004 	movi	r5,1280
10001bc4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001bc8:	0009883a 	mov	r4,zero
10001bcc:	01414304 	movi	r5,1292
10001bd0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001bd4:	0009883a 	mov	r4,zero
10001bd8:	01400204 	movi	r5,8
10001bdc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001be0:	0009883a 	mov	r4,zero
10001be4:	0140b404 	movi	r5,720
10001be8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001bec:	0009883a 	mov	r4,zero
10001bf0:	01400044 	movi	r5,1
10001bf4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001bf8:	0009883a 	mov	r4,zero
10001bfc:	014004c4 	movi	r5,19
10001c00:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001c04:	0009883a 	mov	r4,zero
10001c08:	01414504 	movi	r5,1300
10001c0c:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10001c10:	0009883a 	mov	r4,zero
10001c14:	0141a044 	movi	r5,1665
10001c18:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10001c1c:	0009883a 	mov	r4,zero
10001c20:	01484004 	movi	r5,8448
10001c24:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001c28:	0009883a 	mov	r4,zero
10001c2c:	000b883a 	mov	r5,zero
10001c30:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10001c34:	0009883a 	mov	r4,zero
10001c38:	01401ec4 	movi	r5,123
10001c3c:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001c40:	0009883a 	mov	r4,zero
10001c44:	01415104 	movi	r5,1348
10001c48:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001c4c:	0009883a 	mov	r4,zero
10001c50:	01400204 	movi	r5,8
10001c54:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001c58:	0009883a 	mov	r4,zero
10001c5c:	0140a404 	movi	r5,656
10001c60:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001c64:	0009883a 	mov	r4,zero
10001c68:	01401044 	movi	r5,65
10001c6c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001c70:	0009883a 	mov	r4,zero
10001c74:	014004c4 	movi	r5,19
10001c78:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001c7c:	0009883a 	mov	r4,zero
10001c80:	01414804 	movi	r5,1312
10001c84:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10001c88:	0009883a 	mov	r4,zero
10001c8c:	000b883a 	mov	r5,zero
10001c90:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10001c94:	0009883a 	mov	r4,zero
10001c98:	000b883a 	mov	r5,zero
10001c9c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10001ca0:	0009883a 	mov	r4,zero
10001ca4:	01408404 	movi	r5,528
10001ca8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001cac:	0009883a 	mov	r4,zero
10001cb0:	01401044 	movi	r5,65
10001cb4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001cb8:	0009883a 	mov	r4,zero
10001cbc:	014004c4 	movi	r5,19
10001cc0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10001cc4:	0009883a 	mov	r4,zero
10001cc8:	000b883a 	mov	r5,zero
10001ccc:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001cd0:	01006c04 	movi	r4,432
10001cd4:	01414004 	movi	r5,1280
10001cd8:	00010680 	call	10001068 <UsbWrite>

}
10001cdc:	e037883a 	mov	sp,fp
10001ce0:	dfc00117 	ldw	ra,4(sp)
10001ce4:	df000017 	ldw	fp,0(sp)
10001ce8:	dec00204 	addi	sp,sp,8
10001cec:	f800283a 	ret

10001cf0 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10001cf0:	defffe04 	addi	sp,sp,-8
10001cf4:	dfc00115 	stw	ra,4(sp)
10001cf8:	df000015 	stw	fp,0(sp)
10001cfc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001d00:	01000084 	movi	r4,2
10001d04:	01414004 	movi	r5,1280
10001d08:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001d0c:	0009883a 	mov	r4,zero
10001d10:	01414304 	movi	r5,1292
10001d14:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001d18:	0009883a 	mov	r4,zero
10001d1c:	01400204 	movi	r5,8
10001d20:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001d24:	0009883a 	mov	r4,zero
10001d28:	0140b404 	movi	r5,720
10001d2c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001d30:	0009883a 	mov	r4,zero
10001d34:	01400044 	movi	r5,1
10001d38:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001d3c:	0009883a 	mov	r4,zero
10001d40:	014004c4 	movi	r5,19
10001d44:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001d48:	0009883a 	mov	r4,zero
10001d4c:	01414504 	movi	r5,1300
10001d50:	00002480 	call	10000248 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10001d54:	0009883a 	mov	r4,zero
10001d58:	0141a044 	movi	r5,1665
10001d5c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10001d60:	0009883a 	mov	r4,zero
10001d64:	01488004 	movi	r5,8704
10001d68:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001d6c:	0009883a 	mov	r4,zero
10001d70:	000b883a 	mov	r5,zero
10001d74:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10001d78:	0009883a 	mov	r4,zero
10001d7c:	01401ec4 	movi	r5,123
10001d80:	00002480 	call	10000248 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10001d84:	0009883a 	mov	r4,zero
10001d88:	01416004 	movi	r5,1408
10001d8c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001d90:	0009883a 	mov	r4,zero
10001d94:	01400204 	movi	r5,8
10001d98:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001d9c:	0009883a 	mov	r4,zero
10001da0:	0140a404 	movi	r5,656
10001da4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001da8:	0009883a 	mov	r4,zero
10001dac:	01401044 	movi	r5,65
10001db0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001db4:	0009883a 	mov	r4,zero
10001db8:	014004c4 	movi	r5,19
10001dbc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001dc0:	0009883a 	mov	r4,zero
10001dc4:	01414804 	movi	r5,1312
10001dc8:	00002480 	call	10000248 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10001dcc:	0009883a 	mov	r4,zero
10001dd0:	01416204 	movi	r5,1416
10001dd4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001dd8:	0009883a 	mov	r4,zero
10001ddc:	01400204 	movi	r5,8
10001de0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001de4:	0009883a 	mov	r4,zero
10001de8:	0140a404 	movi	r5,656
10001dec:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001df0:	0009883a 	mov	r4,zero
10001df4:	01400044 	movi	r5,1
10001df8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001dfc:	0009883a 	mov	r4,zero
10001e00:	014004c4 	movi	r5,19
10001e04:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001e08:	0009883a 	mov	r4,zero
10001e0c:	01414b04 	movi	r5,1324
10001e10:	00002480 	call	10000248 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10001e14:	0009883a 	mov	r4,zero
10001e18:	01416404 	movi	r5,1424
10001e1c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10001e20:	0009883a 	mov	r4,zero
10001e24:	01400204 	movi	r5,8
10001e28:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001e2c:	0009883a 	mov	r4,zero
10001e30:	0140a404 	movi	r5,656
10001e34:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001e38:	0009883a 	mov	r4,zero
10001e3c:	01401044 	movi	r5,65
10001e40:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001e44:	0009883a 	mov	r4,zero
10001e48:	014004c4 	movi	r5,19
10001e4c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001e50:	0009883a 	mov	r4,zero
10001e54:	01414e04 	movi	r5,1336
10001e58:	00002480 	call	10000248 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10001e5c:	0009883a 	mov	r4,zero
10001e60:	01416604 	movi	r5,1432
10001e64:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10001e68:	0009883a 	mov	r4,zero
10001e6c:	01400204 	movi	r5,8
10001e70:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10001e74:	0009883a 	mov	r4,zero
10001e78:	0140a404 	movi	r5,656
10001e7c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10001e80:	0009883a 	mov	r4,zero
10001e84:	01400044 	movi	r5,1
10001e88:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001e8c:	0009883a 	mov	r4,zero
10001e90:	014004c4 	movi	r5,19
10001e94:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10001e98:	0009883a 	mov	r4,zero
10001e9c:	01415104 	movi	r5,1348
10001ea0:	00002480 	call	10000248 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10001ea4:	0009883a 	mov	r4,zero
10001ea8:	01416804 	movi	r5,1440
10001eac:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001eb0:	0009883a 	mov	r4,zero
10001eb4:	01400204 	movi	r5,8
10001eb8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001ebc:	0009883a 	mov	r4,zero
10001ec0:	0140a404 	movi	r5,656
10001ec4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10001ec8:	0009883a 	mov	r4,zero
10001ecc:	01401044 	movi	r5,65
10001ed0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001ed4:	0009883a 	mov	r4,zero
10001ed8:	014004c4 	movi	r5,19
10001edc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10001ee0:	0009883a 	mov	r4,zero
10001ee4:	01415404 	movi	r5,1360
10001ee8:	00002480 	call	10000248 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
10001eec:	0009883a 	mov	r4,zero
10001ef0:	01416a04 	movi	r5,1448
10001ef4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001ef8:	0009883a 	mov	r4,zero
10001efc:	01400204 	movi	r5,8
10001f00:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001f04:	0009883a 	mov	r4,zero
10001f08:	0140a404 	movi	r5,656
10001f0c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001f10:	0009883a 	mov	r4,zero
10001f14:	01400044 	movi	r5,1
10001f18:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001f1c:	0009883a 	mov	r4,zero
10001f20:	014004c4 	movi	r5,19
10001f24:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
10001f28:	0009883a 	mov	r4,zero
10001f2c:	01415704 	movi	r5,1372
10001f30:	00002480 	call	10000248 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
10001f34:	0009883a 	mov	r4,zero
10001f38:	01416c04 	movi	r5,1456
10001f3c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10001f40:	0009883a 	mov	r4,zero
10001f44:	01400204 	movi	r5,8
10001f48:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
10001f4c:	0009883a 	mov	r4,zero
10001f50:	0140a404 	movi	r5,656
10001f54:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
10001f58:	0009883a 	mov	r4,zero
10001f5c:	01401044 	movi	r5,65
10001f60:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001f64:	0009883a 	mov	r4,zero
10001f68:	014004c4 	movi	r5,19
10001f6c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
10001f70:	0009883a 	mov	r4,zero
10001f74:	01415a04 	movi	r5,1384
10001f78:	00002480 	call	10000248 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
10001f7c:	0009883a 	mov	r4,zero
10001f80:	01416e04 	movi	r5,1464
10001f84:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
10001f88:	0009883a 	mov	r4,zero
10001f8c:	014000c4 	movi	r5,3
10001f90:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10001f94:	0009883a 	mov	r4,zero
10001f98:	0140a404 	movi	r5,656
10001f9c:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10001fa0:	0009883a 	mov	r4,zero
10001fa4:	01400044 	movi	r5,1
10001fa8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
10001fac:	0009883a 	mov	r4,zero
10001fb0:	014004c4 	movi	r5,19
10001fb4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
10001fb8:	0009883a 	mov	r4,zero
10001fbc:	01415d04 	movi	r5,1396
10001fc0:	00002480 	call	10000248 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
10001fc4:	0009883a 	mov	r4,zero
10001fc8:	000b883a 	mov	r5,zero
10001fcc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10001fd0:	0009883a 	mov	r4,zero
10001fd4:	000b883a 	mov	r5,zero
10001fd8:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
10001fdc:	0009883a 	mov	r4,zero
10001fe0:	01408404 	movi	r5,528
10001fe4:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001fe8:	0009883a 	mov	r4,zero
10001fec:	01401044 	movi	r5,65
10001ff0:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001ff4:	0009883a 	mov	r4,zero
10001ff8:	014004c4 	movi	r5,19
10001ffc:	00002480 	call	10000248 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002000:	0009883a 	mov	r4,zero
10002004:	000b883a 	mov	r5,zero
10002008:	00002480 	call	10000248 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000200c:	01006c04 	movi	r4,432
10002010:	01414004 	movi	r5,1280
10002014:	00010680 	call	10001068 <UsbWrite>

}
10002018:	e037883a 	mov	sp,fp
1000201c:	dfc00117 	ldw	ra,4(sp)
10002020:	df000017 	ldw	fp,0(sp)
10002024:	dec00204 	addi	sp,sp,8
10002028:	f800283a 	ret

1000202c <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
1000202c:	defffd04 	addi	sp,sp,-12
10002030:	dfc00215 	stw	ra,8(sp)
10002034:	df000115 	stw	fp,4(sp)
10002038:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
1000203c:	01005104 	movi	r4,324
10002040:	00010bc0 	call	100010bc <UsbRead>
10002044:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002048:	01005104 	movi	r4,324
1000204c:	000b883a 	mov	r5,zero
10002050:	00010680 	call	10001068 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002054:	00000d06 	br	1000208c <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
10002058:	e0bfff0b 	ldhu	r2,-4(fp)
1000205c:	10000526 	beq	r2,zero,10002074 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
10002060:	e0bfff0b 	ldhu	r2,-4(fp)
10002064:	01040074 	movhi	r4,4097
10002068:	2106a604 	addi	r4,r4,6808
1000206c:	100b883a 	mov	r5,r2
10002070:	00021d80 	call	100021d8 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10002074:	01005104 	movi	r4,324
10002078:	00010bc0 	call	100010bc <UsbRead>
1000207c:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002080:	01005104 	movi	r4,324
10002084:	000b883a 	mov	r5,zero
10002088:	00010680 	call	10001068 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
1000208c:	e0bfff0b 	ldhu	r2,-4(fp)
10002090:	10840018 	cmpnei	r2,r2,4096
10002094:	103ff01e 	bne	r2,zero,10002058 <__alt_data_end+0xf8002058>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
10002098:	e0bfff0b 	ldhu	r2,-4(fp)
}
1000209c:	e037883a 	mov	sp,fp
100020a0:	dfc00117 	ldw	ra,4(sp)
100020a4:	df000017 	ldw	fp,0(sp)
100020a8:	dec00204 	addi	sp,sp,8
100020ac:	f800283a 	ret

100020b0 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
100020b0:	defffd04 	addi	sp,sp,-12
100020b4:	dfc00215 	stw	ra,8(sp)
100020b8:	df000115 	stw	fp,4(sp)
100020bc:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
100020c0:	010000c4 	movi	r4,3
100020c4:	00002b40 	call	100002b4 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
100020c8:	01005104 	movi	r4,324
100020cc:	00010bc0 	call	100010bc <UsbRead>
100020d0:	10bfffcc 	andi	r2,r2,65535
100020d4:	10840018 	cmpnei	r2,r2,4096
100020d8:	1000091e 	bne	r2,zero,10002100 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
100020dc:	01005104 	movi	r4,324
100020e0:	000b883a 	mov	r5,zero
100020e4:	00010680 	call	10001068 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100020e8:	0001883a 	nop
100020ec:	010000c4 	movi	r4,3
100020f0:	00002b40 	call	100002b4 <IO_read>
100020f4:	10bfffcc 	andi	r2,r2,65535
100020f8:	1080040c 	andi	r2,r2,16
100020fc:	103ffb26 	beq	r2,zero,100020ec <__alt_data_end+0xf80020ec>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10002100:	01000084 	movi	r4,2
10002104:	01414204 	movi	r5,1288
10002108:	00002480 	call	10000248 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
1000210c:	0009883a 	mov	r4,zero
10002110:	00002b40 	call	100002b4 <IO_read>
10002114:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
10002118:	e0bfff0b 	ldhu	r2,-4(fp)
}
1000211c:	e037883a 	mov	sp,fp
10002120:	dfc00117 	ldw	ra,4(sp)
10002124:	df000017 	ldw	fp,0(sp)
10002128:	dec00204 	addi	sp,sp,8
1000212c:	f800283a 	ret

10002130 <UsbPrintMem>:


void UsbPrintMem()
{
10002130:	defffc04 	addi	sp,sp,-16
10002134:	dfc00315 	stw	ra,12(sp)
10002138:	df000215 	stw	fp,8(sp)
1000213c:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10002140:	01000084 	movi	r4,2
10002144:	01414004 	movi	r5,1280
10002148:	00002480 	call	10000248 <IO_write>
	for (i = 0; i <= 200; i += 2)
1000214c:	e03ffe15 	stw	zero,-8(fp)
10002150:	00000e06 	br	1000218c <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
10002154:	0009883a 	mov	r4,zero
10002158:	00002b40 	call	100002b4 <IO_read>
1000215c:	10bfffcc 	andi	r2,r2,65535
10002160:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
10002164:	e0bffe17 	ldw	r2,-8(fp)
10002168:	10814004 	addi	r2,r2,1280
1000216c:	01040074 	movhi	r4,4097
10002170:	2106ae04 	addi	r4,r4,6840
10002174:	100b883a 	mov	r5,r2
10002178:	e1bfff17 	ldw	r6,-4(fp)
1000217c:	00021d80 	call	100021d8 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
10002180:	e0bffe17 	ldw	r2,-8(fp)
10002184:	10800084 	addi	r2,r2,2
10002188:	e0bffe15 	stw	r2,-8(fp)
1000218c:	e0bffe17 	ldw	r2,-8(fp)
10002190:	10803250 	cmplti	r2,r2,201
10002194:	103fef1e 	bne	r2,zero,10002154 <__alt_data_end+0xf8002154>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
10002198:	e037883a 	mov	sp,fp
1000219c:	dfc00117 	ldw	ra,4(sp)
100021a0:	df000017 	ldw	fp,0(sp)
100021a4:	dec00204 	addi	sp,sp,8
100021a8:	f800283a 	ret

100021ac <_printf_r>:
100021ac:	defffd04 	addi	sp,sp,-12
100021b0:	dfc00015 	stw	ra,0(sp)
100021b4:	d9800115 	stw	r6,4(sp)
100021b8:	d9c00215 	stw	r7,8(sp)
100021bc:	280d883a 	mov	r6,r5
100021c0:	21400217 	ldw	r5,8(r4)
100021c4:	d9c00104 	addi	r7,sp,4
100021c8:	00023780 	call	10002378 <___vfprintf_internal_r>
100021cc:	dfc00017 	ldw	ra,0(sp)
100021d0:	dec00304 	addi	sp,sp,12
100021d4:	f800283a 	ret

100021d8 <printf>:
100021d8:	defffc04 	addi	sp,sp,-16
100021dc:	dfc00015 	stw	ra,0(sp)
100021e0:	d9400115 	stw	r5,4(sp)
100021e4:	d9800215 	stw	r6,8(sp)
100021e8:	d9c00315 	stw	r7,12(sp)
100021ec:	00840074 	movhi	r2,4097
100021f0:	108e1f04 	addi	r2,r2,14460
100021f4:	10800017 	ldw	r2,0(r2)
100021f8:	200b883a 	mov	r5,r4
100021fc:	d9800104 	addi	r6,sp,4
10002200:	11000217 	ldw	r4,8(r2)
10002204:	00044740 	call	10004474 <__vfprintf_internal>
10002208:	dfc00017 	ldw	ra,0(sp)
1000220c:	dec00404 	addi	sp,sp,16
10002210:	f800283a 	ret

10002214 <_puts_r>:
10002214:	defff604 	addi	sp,sp,-40
10002218:	dc000715 	stw	r16,28(sp)
1000221c:	2021883a 	mov	r16,r4
10002220:	2809883a 	mov	r4,r5
10002224:	dc400815 	stw	r17,32(sp)
10002228:	dfc00915 	stw	ra,36(sp)
1000222c:	2823883a 	mov	r17,r5
10002230:	00022e00 	call	100022e0 <strlen>
10002234:	00c40074 	movhi	r3,4097
10002238:	18ce1f04 	addi	r3,r3,14460
1000223c:	18c00017 	ldw	r3,0(r3)
10002240:	11000044 	addi	r4,r2,1
10002244:	d8800115 	stw	r2,4(sp)
10002248:	18c00217 	ldw	r3,8(r3)
1000224c:	01440074 	movhi	r5,4097
10002250:	2946b304 	addi	r5,r5,6860
10002254:	1880030b 	ldhu	r2,12(r3)
10002258:	d9400215 	stw	r5,8(sp)
1000225c:	d9000615 	stw	r4,24(sp)
10002260:	01400044 	movi	r5,1
10002264:	01000084 	movi	r4,2
10002268:	d9000515 	stw	r4,20(sp)
1000226c:	dc400015 	stw	r17,0(sp)
10002270:	d9400315 	stw	r5,12(sp)
10002274:	dec00415 	stw	sp,16(sp)
10002278:	1108000c 	andi	r4,r2,8192
1000227c:	2000061e 	bne	r4,zero,10002298 <_puts_r+0x84>
10002280:	19401917 	ldw	r5,100(r3)
10002284:	0137ffc4 	movi	r4,-8193
10002288:	10880014 	ori	r2,r2,8192
1000228c:	2908703a 	and	r4,r5,r4
10002290:	1880030d 	sth	r2,12(r3)
10002294:	19001915 	stw	r4,100(r3)
10002298:	81400217 	ldw	r5,8(r16)
1000229c:	8009883a 	mov	r4,r16
100022a0:	d9800404 	addi	r6,sp,16
100022a4:	00069380 	call	10006938 <__sfvwrite_r>
100022a8:	1000061e 	bne	r2,zero,100022c4 <_puts_r+0xb0>
100022ac:	00800284 	movi	r2,10
100022b0:	dfc00917 	ldw	ra,36(sp)
100022b4:	dc400817 	ldw	r17,32(sp)
100022b8:	dc000717 	ldw	r16,28(sp)
100022bc:	dec00a04 	addi	sp,sp,40
100022c0:	f800283a 	ret
100022c4:	00bfffc4 	movi	r2,-1
100022c8:	003ff906 	br	100022b0 <__alt_data_end+0xf80022b0>

100022cc <puts>:
100022cc:	00840074 	movhi	r2,4097
100022d0:	108e1f04 	addi	r2,r2,14460
100022d4:	200b883a 	mov	r5,r4
100022d8:	11000017 	ldw	r4,0(r2)
100022dc:	00022141 	jmpi	10002214 <_puts_r>

100022e0 <strlen>:
100022e0:	208000cc 	andi	r2,r4,3
100022e4:	10002026 	beq	r2,zero,10002368 <strlen+0x88>
100022e8:	20800007 	ldb	r2,0(r4)
100022ec:	10002026 	beq	r2,zero,10002370 <strlen+0x90>
100022f0:	2005883a 	mov	r2,r4
100022f4:	00000206 	br	10002300 <strlen+0x20>
100022f8:	10c00007 	ldb	r3,0(r2)
100022fc:	18001826 	beq	r3,zero,10002360 <strlen+0x80>
10002300:	10800044 	addi	r2,r2,1
10002304:	10c000cc 	andi	r3,r2,3
10002308:	183ffb1e 	bne	r3,zero,100022f8 <__alt_data_end+0xf80022f8>
1000230c:	10c00017 	ldw	r3,0(r2)
10002310:	01ffbff4 	movhi	r7,65279
10002314:	39ffbfc4 	addi	r7,r7,-257
10002318:	00ca303a 	nor	r5,zero,r3
1000231c:	01a02074 	movhi	r6,32897
10002320:	19c7883a 	add	r3,r3,r7
10002324:	31a02004 	addi	r6,r6,-32640
10002328:	1946703a 	and	r3,r3,r5
1000232c:	1986703a 	and	r3,r3,r6
10002330:	1800091e 	bne	r3,zero,10002358 <strlen+0x78>
10002334:	10800104 	addi	r2,r2,4
10002338:	10c00017 	ldw	r3,0(r2)
1000233c:	19cb883a 	add	r5,r3,r7
10002340:	00c6303a 	nor	r3,zero,r3
10002344:	28c6703a 	and	r3,r5,r3
10002348:	1986703a 	and	r3,r3,r6
1000234c:	183ff926 	beq	r3,zero,10002334 <__alt_data_end+0xf8002334>
10002350:	00000106 	br	10002358 <strlen+0x78>
10002354:	10800044 	addi	r2,r2,1
10002358:	10c00007 	ldb	r3,0(r2)
1000235c:	183ffd1e 	bne	r3,zero,10002354 <__alt_data_end+0xf8002354>
10002360:	1105c83a 	sub	r2,r2,r4
10002364:	f800283a 	ret
10002368:	2005883a 	mov	r2,r4
1000236c:	003fe706 	br	1000230c <__alt_data_end+0xf800230c>
10002370:	0005883a 	mov	r2,zero
10002374:	f800283a 	ret

10002378 <___vfprintf_internal_r>:
10002378:	defeb604 	addi	sp,sp,-1320
1000237c:	dfc14915 	stw	ra,1316(sp)
10002380:	ddc14715 	stw	r23,1308(sp)
10002384:	dd814615 	stw	r22,1304(sp)
10002388:	202f883a 	mov	r23,r4
1000238c:	282d883a 	mov	r22,r5
10002390:	d9812a15 	stw	r6,1192(sp)
10002394:	d9c12d15 	stw	r7,1204(sp)
10002398:	df014815 	stw	fp,1312(sp)
1000239c:	dd414515 	stw	r21,1300(sp)
100023a0:	dd014415 	stw	r20,1296(sp)
100023a4:	dcc14315 	stw	r19,1292(sp)
100023a8:	dc814215 	stw	r18,1288(sp)
100023ac:	dc414115 	stw	r17,1284(sp)
100023b0:	dc014015 	stw	r16,1280(sp)
100023b4:	0006ff80 	call	10006ff8 <_localeconv_r>
100023b8:	10800017 	ldw	r2,0(r2)
100023bc:	1009883a 	mov	r4,r2
100023c0:	d8813515 	stw	r2,1236(sp)
100023c4:	00022e00 	call	100022e0 <strlen>
100023c8:	d8813815 	stw	r2,1248(sp)
100023cc:	b8000226 	beq	r23,zero,100023d8 <___vfprintf_internal_r+0x60>
100023d0:	b8800e17 	ldw	r2,56(r23)
100023d4:	10010526 	beq	r2,zero,100027ec <___vfprintf_internal_r+0x474>
100023d8:	b0c0030b 	ldhu	r3,12(r22)
100023dc:	1908000c 	andi	r4,r3,8192
100023e0:	1805883a 	mov	r2,r3
100023e4:	2000071e 	bne	r4,zero,10002404 <___vfprintf_internal_r+0x8c>
100023e8:	b1001917 	ldw	r4,100(r22)
100023ec:	18880014 	ori	r2,r3,8192
100023f0:	00f7ffc4 	movi	r3,-8193
100023f4:	20c8703a 	and	r4,r4,r3
100023f8:	b080030d 	sth	r2,12(r22)
100023fc:	1007883a 	mov	r3,r2
10002400:	b1001915 	stw	r4,100(r22)
10002404:	1100020c 	andi	r4,r2,8
10002408:	2000a826 	beq	r4,zero,100026ac <___vfprintf_internal_r+0x334>
1000240c:	b1000417 	ldw	r4,16(r22)
10002410:	2000a626 	beq	r4,zero,100026ac <___vfprintf_internal_r+0x334>
10002414:	1080068c 	andi	r2,r2,26
10002418:	01000284 	movi	r4,10
1000241c:	1100ac26 	beq	r2,r4,100026d0 <___vfprintf_internal_r+0x358>
10002420:	d8c10e04 	addi	r3,sp,1080
10002424:	d9010dc4 	addi	r4,sp,1079
10002428:	d9400404 	addi	r5,sp,16
1000242c:	05040074 	movhi	r20,4097
10002430:	1905c83a 	sub	r2,r3,r4
10002434:	a506c484 	addi	r20,r20,6930
10002438:	d8c12815 	stw	r3,1184(sp)
1000243c:	d9012915 	stw	r4,1188(sp)
10002440:	d9411e15 	stw	r5,1144(sp)
10002444:	d8012015 	stw	zero,1152(sp)
10002448:	d8011f15 	stw	zero,1148(sp)
1000244c:	d8013315 	stw	zero,1228(sp)
10002450:	d8013715 	stw	zero,1244(sp)
10002454:	d8013915 	stw	zero,1252(sp)
10002458:	d8013b15 	stw	zero,1260(sp)
1000245c:	d8013a15 	stw	zero,1256(sp)
10002460:	d8012f15 	stw	zero,1212(sp)
10002464:	2811883a 	mov	r8,r5
10002468:	d8813c15 	stw	r2,1264(sp)
1000246c:	d8c12a17 	ldw	r3,1192(sp)
10002470:	18800007 	ldb	r2,0(r3)
10002474:	10021326 	beq	r2,zero,10002cc4 <___vfprintf_internal_r+0x94c>
10002478:	00c00944 	movi	r3,37
1000247c:	dc012a17 	ldw	r16,1192(sp)
10002480:	10c0021e 	bne	r2,r3,1000248c <___vfprintf_internal_r+0x114>
10002484:	00001606 	br	100024e0 <___vfprintf_internal_r+0x168>
10002488:	10c08526 	beq	r2,r3,100026a0 <___vfprintf_internal_r+0x328>
1000248c:	84000044 	addi	r16,r16,1
10002490:	80800007 	ldb	r2,0(r16)
10002494:	103ffc1e 	bne	r2,zero,10002488 <__alt_data_end+0xf8002488>
10002498:	d9012a17 	ldw	r4,1192(sp)
1000249c:	8123c83a 	sub	r17,r16,r4
100024a0:	88000f26 	beq	r17,zero,100024e0 <___vfprintf_internal_r+0x168>
100024a4:	d8812a17 	ldw	r2,1192(sp)
100024a8:	d8c12017 	ldw	r3,1152(sp)
100024ac:	44400115 	stw	r17,4(r8)
100024b0:	40800015 	stw	r2,0(r8)
100024b4:	d8811f17 	ldw	r2,1148(sp)
100024b8:	1c47883a 	add	r3,r3,r17
100024bc:	d8c12015 	stw	r3,1152(sp)
100024c0:	10800044 	addi	r2,r2,1
100024c4:	d8811f15 	stw	r2,1148(sp)
100024c8:	00c001c4 	movi	r3,7
100024cc:	1880b516 	blt	r3,r2,100027a4 <___vfprintf_internal_r+0x42c>
100024d0:	42000204 	addi	r8,r8,8
100024d4:	d8c12f17 	ldw	r3,1212(sp)
100024d8:	1c47883a 	add	r3,r3,r17
100024dc:	d8c12f15 	stw	r3,1212(sp)
100024e0:	80800007 	ldb	r2,0(r16)
100024e4:	1000b626 	beq	r2,zero,100027c0 <___vfprintf_internal_r+0x448>
100024e8:	80800044 	addi	r2,r16,1
100024ec:	84000047 	ldb	r16,1(r16)
100024f0:	0027883a 	mov	r19,zero
100024f4:	0039883a 	mov	fp,zero
100024f8:	dcc12b05 	stb	r19,1196(sp)
100024fc:	d8012785 	stb	zero,1182(sp)
10002500:	027fffc4 	movi	r9,-1
10002504:	d8012e15 	stw	zero,1208(sp)
10002508:	04401604 	movi	r17,88
1000250c:	04800244 	movi	r18,9
10002510:	da012a15 	stw	r8,1192(sp)
10002514:	e027883a 	mov	r19,fp
10002518:	17000044 	addi	fp,r2,1
1000251c:	80bff804 	addi	r2,r16,-32
10002520:	88831236 	bltu	r17,r2,1000316c <___vfprintf_internal_r+0xdf4>
10002524:	100490ba 	slli	r2,r2,2
10002528:	01040034 	movhi	r4,4096
1000252c:	21094f04 	addi	r4,r4,9532
10002530:	1105883a 	add	r2,r2,r4
10002534:	10800017 	ldw	r2,0(r2)
10002538:	1000683a 	jmp	r2
1000253c:	10003088 	cmpgei	zero,r2,194
10002540:	1000316c 	andhi	zero,r2,197
10002544:	1000316c 	andhi	zero,r2,197
10002548:	100030a4 	muli	zero,r2,194
1000254c:	1000316c 	andhi	zero,r2,197
10002550:	1000316c 	andhi	zero,r2,197
10002554:	1000316c 	andhi	zero,r2,197
10002558:	1000316c 	andhi	zero,r2,197
1000255c:	1000316c 	andhi	zero,r2,197
10002560:	1000316c 	andhi	zero,r2,197
10002564:	100030b4 	orhi	zero,r2,194
10002568:	100030dc 	xori	zero,r2,195
1000256c:	1000316c 	andhi	zero,r2,197
10002570:	100027f8 	rdprs	zero,r2,159
10002574:	10002808 	cmpgei	zero,r2,160
10002578:	1000316c 	andhi	zero,r2,197
1000257c:	10002858 	cmpnei	zero,r2,161
10002580:	10002868 	cmpgeui	zero,r2,161
10002584:	10002868 	cmpgeui	zero,r2,161
10002588:	10002868 	cmpgeui	zero,r2,161
1000258c:	10002868 	cmpgeui	zero,r2,161
10002590:	10002868 	cmpgeui	zero,r2,161
10002594:	10002868 	cmpgeui	zero,r2,161
10002598:	10002868 	cmpgeui	zero,r2,161
1000259c:	10002868 	cmpgeui	zero,r2,161
100025a0:	10002868 	cmpgeui	zero,r2,161
100025a4:	1000316c 	andhi	zero,r2,197
100025a8:	1000316c 	andhi	zero,r2,197
100025ac:	1000316c 	andhi	zero,r2,197
100025b0:	1000316c 	andhi	zero,r2,197
100025b4:	1000316c 	andhi	zero,r2,197
100025b8:	1000316c 	andhi	zero,r2,197
100025bc:	1000316c 	andhi	zero,r2,197
100025c0:	1000316c 	andhi	zero,r2,197
100025c4:	1000316c 	andhi	zero,r2,197
100025c8:	1000316c 	andhi	zero,r2,197
100025cc:	100028ac 	andhi	zero,r2,162
100025d0:	10002ccc 	andi	zero,r2,179
100025d4:	1000316c 	andhi	zero,r2,197
100025d8:	10002ccc 	andi	zero,r2,179
100025dc:	1000316c 	andhi	zero,r2,197
100025e0:	1000316c 	andhi	zero,r2,197
100025e4:	1000316c 	andhi	zero,r2,197
100025e8:	1000316c 	andhi	zero,r2,197
100025ec:	10002d74 	orhi	zero,r2,181
100025f0:	1000316c 	andhi	zero,r2,197
100025f4:	1000316c 	andhi	zero,r2,197
100025f8:	10002d84 	addi	zero,r2,182
100025fc:	1000316c 	andhi	zero,r2,197
10002600:	1000316c 	andhi	zero,r2,197
10002604:	1000316c 	andhi	zero,r2,197
10002608:	1000316c 	andhi	zero,r2,197
1000260c:	1000316c 	andhi	zero,r2,197
10002610:	10002dc8 	cmpgei	zero,r2,183
10002614:	1000316c 	andhi	zero,r2,197
10002618:	1000316c 	andhi	zero,r2,197
1000261c:	10002e00 	call	110002e0 <_gp+0xfe4a68>
10002620:	1000316c 	andhi	zero,r2,197
10002624:	1000316c 	andhi	zero,r2,197
10002628:	1000316c 	andhi	zero,r2,197
1000262c:	1000316c 	andhi	zero,r2,197
10002630:	1000316c 	andhi	zero,r2,197
10002634:	1000316c 	andhi	zero,r2,197
10002638:	1000316c 	andhi	zero,r2,197
1000263c:	1000316c 	andhi	zero,r2,197
10002640:	1000316c 	andhi	zero,r2,197
10002644:	1000316c 	andhi	zero,r2,197
10002648:	1000303c 	xorhi	zero,r2,192
1000264c:	10002fe8 	cmpgeui	zero,r2,191
10002650:	10002ccc 	andi	zero,r2,179
10002654:	10002ccc 	andi	zero,r2,179
10002658:	10002ccc 	andi	zero,r2,179
1000265c:	1000302c 	andhi	zero,r2,192
10002660:	10002fe8 	cmpgeui	zero,r2,191
10002664:	1000316c 	andhi	zero,r2,197
10002668:	1000316c 	andhi	zero,r2,197
1000266c:	10002f04 	addi	zero,r2,188
10002670:	1000316c 	andhi	zero,r2,197
10002674:	10002f1c 	xori	zero,r2,188
10002678:	10002f5c 	xori	zero,r2,189
1000267c:	10002f9c 	xori	zero,r2,190
10002680:	10002e68 	cmpgeui	zero,r2,185
10002684:	1000316c 	andhi	zero,r2,197
10002688:	100030f0 	cmpltui	zero,r2,195
1000268c:	1000316c 	andhi	zero,r2,197
10002690:	10002e78 	rdprs	zero,r2,185
10002694:	1000316c 	andhi	zero,r2,197
10002698:	1000316c 	andhi	zero,r2,197
1000269c:	10002eb8 	rdprs	zero,r2,186
100026a0:	d9412a17 	ldw	r5,1192(sp)
100026a4:	8163c83a 	sub	r17,r16,r5
100026a8:	003f7d06 	br	100024a0 <__alt_data_end+0xf80024a0>
100026ac:	b809883a 	mov	r4,r23
100026b0:	b00b883a 	mov	r5,r22
100026b4:	00044980 	call	10004498 <__swsetup_r>
100026b8:	10002d1e 	bne	r2,zero,10002770 <___vfprintf_internal_r+0x3f8>
100026bc:	b0c0030b 	ldhu	r3,12(r22)
100026c0:	01000284 	movi	r4,10
100026c4:	1805883a 	mov	r2,r3
100026c8:	1080068c 	andi	r2,r2,26
100026cc:	113f541e 	bne	r2,r4,10002420 <__alt_data_end+0xf8002420>
100026d0:	b080038b 	ldhu	r2,14(r22)
100026d4:	113fffcc 	andi	r4,r2,65535
100026d8:	2120001c 	xori	r4,r4,32768
100026dc:	21200004 	addi	r4,r4,-32768
100026e0:	203f4f16 	blt	r4,zero,10002420 <__alt_data_end+0xf8002420>
100026e4:	b2c01917 	ldw	r11,100(r22)
100026e8:	b2800717 	ldw	r10,28(r22)
100026ec:	b2400917 	ldw	r9,36(r22)
100026f0:	d9812a17 	ldw	r6,1192(sp)
100026f4:	d9c12d17 	ldw	r7,1204(sp)
100026f8:	02010004 	movi	r8,1024
100026fc:	18ffff4c 	andi	r3,r3,65533
10002700:	d881078d 	sth	r2,1054(sp)
10002704:	b809883a 	mov	r4,r23
10002708:	d8800404 	addi	r2,sp,16
1000270c:	d9410404 	addi	r5,sp,1040
10002710:	d8c1070d 	sth	r3,1052(sp)
10002714:	dac11d15 	stw	r11,1140(sp)
10002718:	da810b15 	stw	r10,1068(sp)
1000271c:	da410d15 	stw	r9,1076(sp)
10002720:	d8810415 	stw	r2,1040(sp)
10002724:	d8810815 	stw	r2,1056(sp)
10002728:	da010615 	stw	r8,1048(sp)
1000272c:	da010915 	stw	r8,1060(sp)
10002730:	d8010a15 	stw	zero,1064(sp)
10002734:	00023780 	call	10002378 <___vfprintf_internal_r>
10002738:	1021883a 	mov	r16,r2
1000273c:	10000416 	blt	r2,zero,10002750 <___vfprintf_internal_r+0x3d8>
10002740:	b809883a 	mov	r4,r23
10002744:	d9410404 	addi	r5,sp,1040
10002748:	0005f180 	call	10005f18 <_fflush_r>
1000274c:	1007301e 	bne	r2,zero,10004410 <___vfprintf_internal_r+0x2098>
10002750:	d881070b 	ldhu	r2,1052(sp)
10002754:	1080100c 	andi	r2,r2,64
10002758:	10000326 	beq	r2,zero,10002768 <___vfprintf_internal_r+0x3f0>
1000275c:	b080030b 	ldhu	r2,12(r22)
10002760:	10801014 	ori	r2,r2,64
10002764:	b080030d 	sth	r2,12(r22)
10002768:	8005883a 	mov	r2,r16
1000276c:	00000106 	br	10002774 <___vfprintf_internal_r+0x3fc>
10002770:	00bfffc4 	movi	r2,-1
10002774:	dfc14917 	ldw	ra,1316(sp)
10002778:	df014817 	ldw	fp,1312(sp)
1000277c:	ddc14717 	ldw	r23,1308(sp)
10002780:	dd814617 	ldw	r22,1304(sp)
10002784:	dd414517 	ldw	r21,1300(sp)
10002788:	dd014417 	ldw	r20,1296(sp)
1000278c:	dcc14317 	ldw	r19,1292(sp)
10002790:	dc814217 	ldw	r18,1288(sp)
10002794:	dc414117 	ldw	r17,1284(sp)
10002798:	dc014017 	ldw	r16,1280(sp)
1000279c:	dec14a04 	addi	sp,sp,1320
100027a0:	f800283a 	ret
100027a4:	b809883a 	mov	r4,r23
100027a8:	b00b883a 	mov	r5,r22
100027ac:	d9811e04 	addi	r6,sp,1144
100027b0:	00097b80 	call	100097b8 <__sprint_r>
100027b4:	1000081e 	bne	r2,zero,100027d8 <___vfprintf_internal_r+0x460>
100027b8:	da000404 	addi	r8,sp,16
100027bc:	003f4506 	br	100024d4 <__alt_data_end+0xf80024d4>
100027c0:	d8812017 	ldw	r2,1152(sp)
100027c4:	10000426 	beq	r2,zero,100027d8 <___vfprintf_internal_r+0x460>
100027c8:	b809883a 	mov	r4,r23
100027cc:	b00b883a 	mov	r5,r22
100027d0:	d9811e04 	addi	r6,sp,1144
100027d4:	00097b80 	call	100097b8 <__sprint_r>
100027d8:	b080030b 	ldhu	r2,12(r22)
100027dc:	1080100c 	andi	r2,r2,64
100027e0:	103fe31e 	bne	r2,zero,10002770 <__alt_data_end+0xf8002770>
100027e4:	d8812f17 	ldw	r2,1212(sp)
100027e8:	003fe206 	br	10002774 <__alt_data_end+0xf8002774>
100027ec:	b809883a 	mov	r4,r23
100027f0:	00064d40 	call	100064d4 <__sinit>
100027f4:	003ef806 	br	100023d8 <__alt_data_end+0xf80023d8>
100027f8:	e005883a 	mov	r2,fp
100027fc:	9cc00114 	ori	r19,r19,4
10002800:	e4000007 	ldb	r16,0(fp)
10002804:	003f4406 	br	10002518 <__alt_data_end+0xf8002518>
10002808:	e4000007 	ldb	r16,0(fp)
1000280c:	01000a84 	movi	r4,42
10002810:	e0800044 	addi	r2,fp,1
10002814:	8106f626 	beq	r16,r4,100043f0 <___vfprintf_internal_r+0x2078>
10002818:	857ff404 	addi	r21,r16,-48
1000281c:	1039883a 	mov	fp,r2
10002820:	0013883a 	mov	r9,zero
10002824:	957f3d36 	bltu	r18,r21,1000251c <__alt_data_end+0xf800251c>
10002828:	0009883a 	mov	r4,zero
1000282c:	01400284 	movi	r5,10
10002830:	000c2ec0 	call	1000c2ec <__mulsi3>
10002834:	e4000007 	ldb	r16,0(fp)
10002838:	a889883a 	add	r4,r21,r2
1000283c:	e7000044 	addi	fp,fp,1
10002840:	857ff404 	addi	r21,r16,-48
10002844:	957ff92e 	bgeu	r18,r21,1000282c <__alt_data_end+0xf800282c>
10002848:	2013883a 	mov	r9,r4
1000284c:	203f330e 	bge	r4,zero,1000251c <__alt_data_end+0xf800251c>
10002850:	027fffc4 	movi	r9,-1
10002854:	003f3106 	br	1000251c <__alt_data_end+0xf800251c>
10002858:	9cc02014 	ori	r19,r19,128
1000285c:	e005883a 	mov	r2,fp
10002860:	e4000007 	ldb	r16,0(fp)
10002864:	003f2c06 	br	10002518 <__alt_data_end+0xf8002518>
10002868:	857ff404 	addi	r21,r16,-48
1000286c:	d8012e15 	stw	zero,1208(sp)
10002870:	e021883a 	mov	r16,fp
10002874:	0009883a 	mov	r4,zero
10002878:	da412c15 	stw	r9,1200(sp)
1000287c:	01400284 	movi	r5,10
10002880:	000c2ec0 	call	1000c2ec <__mulsi3>
10002884:	81400007 	ldb	r5,0(r16)
10002888:	1549883a 	add	r4,r2,r21
1000288c:	e7000044 	addi	fp,fp,1
10002890:	2d7ff404 	addi	r21,r5,-48
10002894:	e021883a 	mov	r16,fp
10002898:	957ff82e 	bgeu	r18,r21,1000287c <__alt_data_end+0xf800287c>
1000289c:	2821883a 	mov	r16,r5
100028a0:	d9012e15 	stw	r4,1208(sp)
100028a4:	da412c17 	ldw	r9,1200(sp)
100028a8:	003f1c06 	br	1000251c <__alt_data_end+0xf800251c>
100028ac:	da012a17 	ldw	r8,1192(sp)
100028b0:	df012a15 	stw	fp,1192(sp)
100028b4:	9839883a 	mov	fp,r19
100028b8:	dcc12b03 	ldbu	r19,1196(sp)
100028bc:	e7000414 	ori	fp,fp,16
100028c0:	e080080c 	andi	r2,fp,32
100028c4:	dcc12785 	stb	r19,1182(sp)
100028c8:	d8c12d17 	ldw	r3,1204(sp)
100028cc:	1001ce26 	beq	r2,zero,10003008 <___vfprintf_internal_r+0xc90>
100028d0:	d9012d17 	ldw	r4,1204(sp)
100028d4:	18800117 	ldw	r2,4(r3)
100028d8:	1c800017 	ldw	r18,0(r3)
100028dc:	21000204 	addi	r4,r4,8
100028e0:	d9012d15 	stw	r4,1204(sp)
100028e4:	102b883a 	mov	r21,r2
100028e8:	10044916 	blt	r2,zero,10003a10 <___vfprintf_internal_r+0x1698>
100028ec:	dcc12783 	ldbu	r19,1182(sp)
100028f0:	da413215 	stw	r9,1224(sp)
100028f4:	00800044 	movi	r2,1
100028f8:	9546b03a 	or	r3,r18,r21
100028fc:	48000216 	blt	r9,zero,10002908 <___vfprintf_internal_r+0x590>
10002900:	013fdfc4 	movi	r4,-129
10002904:	e138703a 	and	fp,fp,r4
10002908:	1802251e 	bne	r3,zero,100031a0 <___vfprintf_internal_r+0xe28>
1000290c:	48031726 	beq	r9,zero,1000356c <___vfprintf_internal_r+0x11f4>
10002910:	10803fcc 	andi	r2,r2,255
10002914:	00c00044 	movi	r3,1
10002918:	10c24526 	beq	r2,r3,10003230 <___vfprintf_internal_r+0xeb8>
1000291c:	00c00084 	movi	r3,2
10002920:	10c33426 	beq	r2,r3,100035f4 <___vfprintf_internal_r+0x127c>
10002924:	d8c10e04 	addi	r3,sp,1080
10002928:	9008d0fa 	srli	r4,r18,3
1000292c:	a80a977a 	slli	r5,r21,29
10002930:	a82ad0fa 	srli	r21,r21,3
10002934:	948001cc 	andi	r18,r18,7
10002938:	90800c04 	addi	r2,r18,48
1000293c:	18ffffc4 	addi	r3,r3,-1
10002940:	2924b03a 	or	r18,r5,r4
10002944:	18800005 	stb	r2,0(r3)
10002948:	9548b03a 	or	r4,r18,r21
1000294c:	203ff61e 	bne	r4,zero,10002928 <__alt_data_end+0xf8002928>
10002950:	e100004c 	andi	r4,fp,1
10002954:	d8c13115 	stw	r3,1220(sp)
10002958:	20039a1e 	bne	r4,zero,100037c4 <___vfprintf_internal_r+0x144c>
1000295c:	d8812817 	ldw	r2,1184(sp)
10002960:	10e3c83a 	sub	r17,r2,r3
10002964:	8805883a 	mov	r2,r17
10002968:	8a40010e 	bge	r17,r9,10002970 <___vfprintf_internal_r+0x5f8>
1000296c:	4805883a 	mov	r2,r9
10002970:	d8812b15 	stw	r2,1196(sp)
10002974:	d8013415 	stw	zero,1232(sp)
10002978:	98803fcc 	andi	r2,r19,255
1000297c:	1080201c 	xori	r2,r2,128
10002980:	10bfe004 	addi	r2,r2,-128
10002984:	10000326 	beq	r2,zero,10002994 <___vfprintf_internal_r+0x61c>
10002988:	d8c12b17 	ldw	r3,1196(sp)
1000298c:	18c00044 	addi	r3,r3,1
10002990:	d8c12b15 	stw	r3,1196(sp)
10002994:	e0c0008c 	andi	r3,fp,2
10002998:	d8c12c15 	stw	r3,1200(sp)
1000299c:	18000326 	beq	r3,zero,100029ac <___vfprintf_internal_r+0x634>
100029a0:	d8c12b17 	ldw	r3,1196(sp)
100029a4:	18c00084 	addi	r3,r3,2
100029a8:	d8c12b15 	stw	r3,1196(sp)
100029ac:	e0c0210c 	andi	r3,fp,132
100029b0:	d8c13015 	stw	r3,1216(sp)
100029b4:	1801f81e 	bne	r3,zero,10003198 <___vfprintf_internal_r+0xe20>
100029b8:	d9012e17 	ldw	r4,1208(sp)
100029bc:	d8c12b17 	ldw	r3,1196(sp)
100029c0:	20ebc83a 	sub	r21,r4,r3
100029c4:	0541f40e 	bge	zero,r21,10003198 <___vfprintf_internal_r+0xe20>
100029c8:	02400404 	movi	r9,16
100029cc:	d8c12017 	ldw	r3,1152(sp)
100029d0:	d8811f17 	ldw	r2,1148(sp)
100029d4:	4d45750e 	bge	r9,r21,10003fac <___vfprintf_internal_r+0x1c34>
100029d8:	01440074 	movhi	r5,4097
100029dc:	2946c884 	addi	r5,r5,6946
100029e0:	d9413615 	stw	r5,1240(sp)
100029e4:	4827883a 	mov	r19,r9
100029e8:	048001c4 	movi	r18,7
100029ec:	00000306 	br	100029fc <___vfprintf_internal_r+0x684>
100029f0:	ad7ffc04 	addi	r21,r21,-16
100029f4:	42000204 	addi	r8,r8,8
100029f8:	9d40130e 	bge	r19,r21,10002a48 <___vfprintf_internal_r+0x6d0>
100029fc:	01040074 	movhi	r4,4097
10002a00:	18c00404 	addi	r3,r3,16
10002a04:	10800044 	addi	r2,r2,1
10002a08:	2106c884 	addi	r4,r4,6946
10002a0c:	41000015 	stw	r4,0(r8)
10002a10:	44c00115 	stw	r19,4(r8)
10002a14:	d8c12015 	stw	r3,1152(sp)
10002a18:	d8811f15 	stw	r2,1148(sp)
10002a1c:	90bff40e 	bge	r18,r2,100029f0 <__alt_data_end+0xf80029f0>
10002a20:	b809883a 	mov	r4,r23
10002a24:	b00b883a 	mov	r5,r22
10002a28:	d9811e04 	addi	r6,sp,1144
10002a2c:	00097b80 	call	100097b8 <__sprint_r>
10002a30:	103f691e 	bne	r2,zero,100027d8 <__alt_data_end+0xf80027d8>
10002a34:	ad7ffc04 	addi	r21,r21,-16
10002a38:	d8c12017 	ldw	r3,1152(sp)
10002a3c:	d8811f17 	ldw	r2,1148(sp)
10002a40:	da000404 	addi	r8,sp,16
10002a44:	9d7fed16 	blt	r19,r21,100029fc <__alt_data_end+0xf80029fc>
10002a48:	d9413617 	ldw	r5,1240(sp)
10002a4c:	a8c7883a 	add	r3,r21,r3
10002a50:	10800044 	addi	r2,r2,1
10002a54:	41400015 	stw	r5,0(r8)
10002a58:	45400115 	stw	r21,4(r8)
10002a5c:	d8c12015 	stw	r3,1152(sp)
10002a60:	d8811f15 	stw	r2,1148(sp)
10002a64:	010001c4 	movi	r4,7
10002a68:	20832b16 	blt	r4,r2,10003718 <___vfprintf_internal_r+0x13a0>
10002a6c:	d8812787 	ldb	r2,1182(sp)
10002a70:	42000204 	addi	r8,r8,8
10002a74:	10000c26 	beq	r2,zero,10002aa8 <___vfprintf_internal_r+0x730>
10002a78:	d8811f17 	ldw	r2,1148(sp)
10002a7c:	d9012784 	addi	r4,sp,1182
10002a80:	18c00044 	addi	r3,r3,1
10002a84:	10800044 	addi	r2,r2,1
10002a88:	41000015 	stw	r4,0(r8)
10002a8c:	01000044 	movi	r4,1
10002a90:	41000115 	stw	r4,4(r8)
10002a94:	d8c12015 	stw	r3,1152(sp)
10002a98:	d8811f15 	stw	r2,1148(sp)
10002a9c:	010001c4 	movi	r4,7
10002aa0:	2082c416 	blt	r4,r2,100035b4 <___vfprintf_internal_r+0x123c>
10002aa4:	42000204 	addi	r8,r8,8
10002aa8:	d8812c17 	ldw	r2,1200(sp)
10002aac:	10000c26 	beq	r2,zero,10002ae0 <___vfprintf_internal_r+0x768>
10002ab0:	d8811f17 	ldw	r2,1148(sp)
10002ab4:	d9012704 	addi	r4,sp,1180
10002ab8:	18c00084 	addi	r3,r3,2
10002abc:	10800044 	addi	r2,r2,1
10002ac0:	41000015 	stw	r4,0(r8)
10002ac4:	01000084 	movi	r4,2
10002ac8:	41000115 	stw	r4,4(r8)
10002acc:	d8c12015 	stw	r3,1152(sp)
10002ad0:	d8811f15 	stw	r2,1148(sp)
10002ad4:	010001c4 	movi	r4,7
10002ad8:	2082be16 	blt	r4,r2,100035d4 <___vfprintf_internal_r+0x125c>
10002adc:	42000204 	addi	r8,r8,8
10002ae0:	d9013017 	ldw	r4,1216(sp)
10002ae4:	00802004 	movi	r2,128
10002ae8:	20822026 	beq	r4,r2,1000336c <___vfprintf_internal_r+0xff4>
10002aec:	d9413217 	ldw	r5,1224(sp)
10002af0:	2c67c83a 	sub	r19,r5,r17
10002af4:	04c0260e 	bge	zero,r19,10002b90 <___vfprintf_internal_r+0x818>
10002af8:	05400404 	movi	r21,16
10002afc:	d8811f17 	ldw	r2,1148(sp)
10002b00:	acc4720e 	bge	r21,r19,10003ccc <___vfprintf_internal_r+0x1954>
10002b04:	01440074 	movhi	r5,4097
10002b08:	2946c484 	addi	r5,r5,6930
10002b0c:	d9412c15 	stw	r5,1200(sp)
10002b10:	048001c4 	movi	r18,7
10002b14:	00000306 	br	10002b24 <___vfprintf_internal_r+0x7ac>
10002b18:	9cfffc04 	addi	r19,r19,-16
10002b1c:	42000204 	addi	r8,r8,8
10002b20:	acc0110e 	bge	r21,r19,10002b68 <___vfprintf_internal_r+0x7f0>
10002b24:	18c00404 	addi	r3,r3,16
10002b28:	10800044 	addi	r2,r2,1
10002b2c:	45000015 	stw	r20,0(r8)
10002b30:	45400115 	stw	r21,4(r8)
10002b34:	d8c12015 	stw	r3,1152(sp)
10002b38:	d8811f15 	stw	r2,1148(sp)
10002b3c:	90bff60e 	bge	r18,r2,10002b18 <__alt_data_end+0xf8002b18>
10002b40:	b809883a 	mov	r4,r23
10002b44:	b00b883a 	mov	r5,r22
10002b48:	d9811e04 	addi	r6,sp,1144
10002b4c:	00097b80 	call	100097b8 <__sprint_r>
10002b50:	103f211e 	bne	r2,zero,100027d8 <__alt_data_end+0xf80027d8>
10002b54:	9cfffc04 	addi	r19,r19,-16
10002b58:	d8c12017 	ldw	r3,1152(sp)
10002b5c:	d8811f17 	ldw	r2,1148(sp)
10002b60:	da000404 	addi	r8,sp,16
10002b64:	acffef16 	blt	r21,r19,10002b24 <__alt_data_end+0xf8002b24>
10002b68:	d9012c17 	ldw	r4,1200(sp)
10002b6c:	1cc7883a 	add	r3,r3,r19
10002b70:	10800044 	addi	r2,r2,1
10002b74:	41000015 	stw	r4,0(r8)
10002b78:	44c00115 	stw	r19,4(r8)
10002b7c:	d8c12015 	stw	r3,1152(sp)
10002b80:	d8811f15 	stw	r2,1148(sp)
10002b84:	010001c4 	movi	r4,7
10002b88:	20828216 	blt	r4,r2,10003594 <___vfprintf_internal_r+0x121c>
10002b8c:	42000204 	addi	r8,r8,8
10002b90:	e080400c 	andi	r2,fp,256
10002b94:	1001ac1e 	bne	r2,zero,10003248 <___vfprintf_internal_r+0xed0>
10002b98:	d8811f17 	ldw	r2,1148(sp)
10002b9c:	d9413117 	ldw	r5,1220(sp)
10002ba0:	1c47883a 	add	r3,r3,r17
10002ba4:	10800044 	addi	r2,r2,1
10002ba8:	41400015 	stw	r5,0(r8)
10002bac:	44400115 	stw	r17,4(r8)
10002bb0:	d8c12015 	stw	r3,1152(sp)
10002bb4:	d8811f15 	stw	r2,1148(sp)
10002bb8:	010001c4 	movi	r4,7
10002bbc:	20825d16 	blt	r4,r2,10003534 <___vfprintf_internal_r+0x11bc>
10002bc0:	42000204 	addi	r8,r8,8
10002bc4:	e080010c 	andi	r2,fp,4
10002bc8:	10003126 	beq	r2,zero,10002c90 <___vfprintf_internal_r+0x918>
10002bcc:	d8812e17 	ldw	r2,1208(sp)
10002bd0:	d9012b17 	ldw	r4,1196(sp)
10002bd4:	1121c83a 	sub	r16,r2,r4
10002bd8:	04002d0e 	bge	zero,r16,10002c90 <___vfprintf_internal_r+0x918>
10002bdc:	04400404 	movi	r17,16
10002be0:	d8811f17 	ldw	r2,1148(sp)
10002be4:	8c05340e 	bge	r17,r16,100040b8 <___vfprintf_internal_r+0x1d40>
10002be8:	01040074 	movhi	r4,4097
10002bec:	2106c884 	addi	r4,r4,6946
10002bf0:	d9013615 	stw	r4,1240(sp)
10002bf4:	048001c4 	movi	r18,7
10002bf8:	00000306 	br	10002c08 <___vfprintf_internal_r+0x890>
10002bfc:	843ffc04 	addi	r16,r16,-16
10002c00:	42000204 	addi	r8,r8,8
10002c04:	8c00130e 	bge	r17,r16,10002c54 <___vfprintf_internal_r+0x8dc>
10002c08:	01440074 	movhi	r5,4097
10002c0c:	18c00404 	addi	r3,r3,16
10002c10:	10800044 	addi	r2,r2,1
10002c14:	2946c884 	addi	r5,r5,6946
10002c18:	41400015 	stw	r5,0(r8)
10002c1c:	44400115 	stw	r17,4(r8)
10002c20:	d8c12015 	stw	r3,1152(sp)
10002c24:	d8811f15 	stw	r2,1148(sp)
10002c28:	90bff40e 	bge	r18,r2,10002bfc <__alt_data_end+0xf8002bfc>
10002c2c:	b809883a 	mov	r4,r23
10002c30:	b00b883a 	mov	r5,r22
10002c34:	d9811e04 	addi	r6,sp,1144
10002c38:	00097b80 	call	100097b8 <__sprint_r>
10002c3c:	103ee61e 	bne	r2,zero,100027d8 <__alt_data_end+0xf80027d8>
10002c40:	843ffc04 	addi	r16,r16,-16
10002c44:	d8c12017 	ldw	r3,1152(sp)
10002c48:	d8811f17 	ldw	r2,1148(sp)
10002c4c:	da000404 	addi	r8,sp,16
10002c50:	8c3fed16 	blt	r17,r16,10002c08 <__alt_data_end+0xf8002c08>
10002c54:	d9013617 	ldw	r4,1240(sp)
10002c58:	1c07883a 	add	r3,r3,r16
10002c5c:	10800044 	addi	r2,r2,1
10002c60:	41000015 	stw	r4,0(r8)
10002c64:	44000115 	stw	r16,4(r8)
10002c68:	d8c12015 	stw	r3,1152(sp)
10002c6c:	d8811f15 	stw	r2,1148(sp)
10002c70:	010001c4 	movi	r4,7
10002c74:	2080060e 	bge	r4,r2,10002c90 <___vfprintf_internal_r+0x918>
10002c78:	b809883a 	mov	r4,r23
10002c7c:	b00b883a 	mov	r5,r22
10002c80:	d9811e04 	addi	r6,sp,1144
10002c84:	00097b80 	call	100097b8 <__sprint_r>
10002c88:	103ed31e 	bne	r2,zero,100027d8 <__alt_data_end+0xf80027d8>
10002c8c:	d8c12017 	ldw	r3,1152(sp)
10002c90:	df012b17 	ldw	fp,1196(sp)
10002c94:	d9412e17 	ldw	r5,1208(sp)
10002c98:	e140010e 	bge	fp,r5,10002ca0 <___vfprintf_internal_r+0x928>
10002c9c:	2839883a 	mov	fp,r5
10002ca0:	d8812f17 	ldw	r2,1212(sp)
10002ca4:	1705883a 	add	r2,r2,fp
10002ca8:	d8812f15 	stw	r2,1212(sp)
10002cac:	1802291e 	bne	r3,zero,10003554 <___vfprintf_internal_r+0x11dc>
10002cb0:	d8c12a17 	ldw	r3,1192(sp)
10002cb4:	d8011f15 	stw	zero,1148(sp)
10002cb8:	da000404 	addi	r8,sp,16
10002cbc:	18800007 	ldb	r2,0(r3)
10002cc0:	103ded1e 	bne	r2,zero,10002478 <__alt_data_end+0xf8002478>
10002cc4:	dc012a17 	ldw	r16,1192(sp)
10002cc8:	003e0506 	br	100024e0 <__alt_data_end+0xf80024e0>
10002ccc:	d9012d17 	ldw	r4,1204(sp)
10002cd0:	d9412d17 	ldw	r5,1204(sp)
10002cd4:	da012a17 	ldw	r8,1192(sp)
10002cd8:	21000017 	ldw	r4,0(r4)
10002cdc:	29400117 	ldw	r5,4(r5)
10002ce0:	df012a15 	stw	fp,1192(sp)
10002ce4:	9839883a 	mov	fp,r19
10002ce8:	dcc12b03 	ldbu	r19,1196(sp)
10002cec:	d9013715 	stw	r4,1244(sp)
10002cf0:	d9413915 	stw	r5,1252(sp)
10002cf4:	da013f15 	stw	r8,1276(sp)
10002cf8:	da413e15 	stw	r9,1272(sp)
10002cfc:	dcc12785 	stb	r19,1182(sp)
10002d00:	00094140 	call	10009414 <__fpclassifyd>
10002d04:	d8c12d17 	ldw	r3,1204(sp)
10002d08:	04400044 	movi	r17,1
10002d0c:	da013f17 	ldw	r8,1276(sp)
10002d10:	1c800204 	addi	r18,r3,8
10002d14:	da413e17 	ldw	r9,1272(sp)
10002d18:	d9013717 	ldw	r4,1244(sp)
10002d1c:	d9413917 	ldw	r5,1252(sp)
10002d20:	1443451e 	bne	r2,r17,10003a38 <___vfprintf_internal_r+0x16c0>
10002d24:	000d883a 	mov	r6,zero
10002d28:	000f883a 	mov	r7,zero
10002d2c:	000d6940 	call	1000d694 <__ledf2>
10002d30:	da013f17 	ldw	r8,1276(sp)
10002d34:	1004fe16 	blt	r2,zero,10004130 <___vfprintf_internal_r+0x1db8>
10002d38:	dcc12783 	ldbu	r19,1182(sp)
10002d3c:	008011c4 	movi	r2,71
10002d40:	14045d0e 	bge	r2,r16,10003eb8 <___vfprintf_internal_r+0x1b40>
10002d44:	01440074 	movhi	r5,4097
10002d48:	2946b504 	addi	r5,r5,6868
10002d4c:	d9413115 	stw	r5,1220(sp)
10002d50:	00c000c4 	movi	r3,3
10002d54:	00bfdfc4 	movi	r2,-129
10002d58:	d8c12b15 	stw	r3,1196(sp)
10002d5c:	e0b8703a 	and	fp,fp,r2
10002d60:	dc812d15 	stw	r18,1204(sp)
10002d64:	1823883a 	mov	r17,r3
10002d68:	d8013215 	stw	zero,1224(sp)
10002d6c:	d8013415 	stw	zero,1232(sp)
10002d70:	003f0106 	br	10002978 <__alt_data_end+0xf8002978>
10002d74:	9cc00214 	ori	r19,r19,8
10002d78:	e005883a 	mov	r2,fp
10002d7c:	e4000007 	ldb	r16,0(fp)
10002d80:	003de506 	br	10002518 <__alt_data_end+0xf8002518>
10002d84:	da012a17 	ldw	r8,1192(sp)
10002d88:	df012a15 	stw	fp,1192(sp)
10002d8c:	9f000414 	ori	fp,r19,16
10002d90:	e0c0080c 	andi	r3,fp,32
10002d94:	d8812d17 	ldw	r2,1204(sp)
10002d98:	18007626 	beq	r3,zero,10002f74 <___vfprintf_internal_r+0xbfc>
10002d9c:	d9412d17 	ldw	r5,1204(sp)
10002da0:	14800017 	ldw	r18,0(r2)
10002da4:	15400117 	ldw	r21,4(r2)
10002da8:	29400204 	addi	r5,r5,8
10002dac:	d9412d15 	stw	r5,1204(sp)
10002db0:	0005883a 	mov	r2,zero
10002db4:	9546b03a 	or	r3,r18,r21
10002db8:	d8012785 	stb	zero,1182(sp)
10002dbc:	da413215 	stw	r9,1224(sp)
10002dc0:	0027883a 	mov	r19,zero
10002dc4:	003ecd06 	br	100028fc <__alt_data_end+0xf80028fc>
10002dc8:	da012a17 	ldw	r8,1192(sp)
10002dcc:	df012a15 	stw	fp,1192(sp)
10002dd0:	9f000414 	ori	fp,r19,16
10002dd4:	e0c0080c 	andi	r3,fp,32
10002dd8:	d8812d17 	ldw	r2,1204(sp)
10002ddc:	18002c26 	beq	r3,zero,10002e90 <___vfprintf_internal_r+0xb18>
10002de0:	d9012d17 	ldw	r4,1204(sp)
10002de4:	14800017 	ldw	r18,0(r2)
10002de8:	15400117 	ldw	r21,4(r2)
10002dec:	21000204 	addi	r4,r4,8
10002df0:	d9012d15 	stw	r4,1204(sp)
10002df4:	00800044 	movi	r2,1
10002df8:	9546b03a 	or	r3,r18,r21
10002dfc:	003fee06 	br	10002db8 <__alt_data_end+0xf8002db8>
10002e00:	da012a17 	ldw	r8,1192(sp)
10002e04:	df012a15 	stw	fp,1192(sp)
10002e08:	9839883a 	mov	fp,r19
10002e0c:	dcc12b03 	ldbu	r19,1196(sp)
10002e10:	01440074 	movhi	r5,4097
10002e14:	2946b804 	addi	r5,r5,6880
10002e18:	dcc12785 	stb	r19,1182(sp)
10002e1c:	d9413b15 	stw	r5,1260(sp)
10002e20:	e0c0080c 	andi	r3,fp,32
10002e24:	d8812d17 	ldw	r2,1204(sp)
10002e28:	18002e26 	beq	r3,zero,10002ee4 <___vfprintf_internal_r+0xb6c>
10002e2c:	d9412d17 	ldw	r5,1204(sp)
10002e30:	14800017 	ldw	r18,0(r2)
10002e34:	15400117 	ldw	r21,4(r2)
10002e38:	29400204 	addi	r5,r5,8
10002e3c:	d9412d15 	stw	r5,1204(sp)
10002e40:	e080004c 	andi	r2,fp,1
10002e44:	10025c26 	beq	r2,zero,100037b8 <___vfprintf_internal_r+0x1440>
10002e48:	9546b03a 	or	r3,r18,r21
10002e4c:	18038f26 	beq	r3,zero,10003c8c <___vfprintf_internal_r+0x1914>
10002e50:	00800c04 	movi	r2,48
10002e54:	d8812705 	stb	r2,1180(sp)
10002e58:	dc012745 	stb	r16,1181(sp)
10002e5c:	e7000094 	ori	fp,fp,2
10002e60:	00800084 	movi	r2,2
10002e64:	003fd406 	br	10002db8 <__alt_data_end+0xf8002db8>
10002e68:	9cc00814 	ori	r19,r19,32
10002e6c:	e005883a 	mov	r2,fp
10002e70:	e4000007 	ldb	r16,0(fp)
10002e74:	003da806 	br	10002518 <__alt_data_end+0xf8002518>
10002e78:	da012a17 	ldw	r8,1192(sp)
10002e7c:	df012a15 	stw	fp,1192(sp)
10002e80:	9839883a 	mov	fp,r19
10002e84:	e0c0080c 	andi	r3,fp,32
10002e88:	d8812d17 	ldw	r2,1204(sp)
10002e8c:	183fd41e 	bne	r3,zero,10002de0 <__alt_data_end+0xf8002de0>
10002e90:	e0c0040c 	andi	r3,fp,16
10002e94:	18035f26 	beq	r3,zero,10003c14 <___vfprintf_internal_r+0x189c>
10002e98:	d9412d17 	ldw	r5,1204(sp)
10002e9c:	14800017 	ldw	r18,0(r2)
10002ea0:	002b883a 	mov	r21,zero
10002ea4:	29400104 	addi	r5,r5,4
10002ea8:	d9412d15 	stw	r5,1204(sp)
10002eac:	00800044 	movi	r2,1
10002eb0:	9007883a 	mov	r3,r18
10002eb4:	003fc006 	br	10002db8 <__alt_data_end+0xf8002db8>
10002eb8:	da012a17 	ldw	r8,1192(sp)
10002ebc:	df012a15 	stw	fp,1192(sp)
10002ec0:	9839883a 	mov	fp,r19
10002ec4:	dcc12b03 	ldbu	r19,1196(sp)
10002ec8:	01040074 	movhi	r4,4097
10002ecc:	2106bd04 	addi	r4,r4,6900
10002ed0:	d9013b15 	stw	r4,1260(sp)
10002ed4:	dcc12785 	stb	r19,1182(sp)
10002ed8:	e0c0080c 	andi	r3,fp,32
10002edc:	d8812d17 	ldw	r2,1204(sp)
10002ee0:	183fd21e 	bne	r3,zero,10002e2c <__alt_data_end+0xf8002e2c>
10002ee4:	e0c0040c 	andi	r3,fp,16
10002ee8:	18035426 	beq	r3,zero,10003c3c <___vfprintf_internal_r+0x18c4>
10002eec:	d8c12d17 	ldw	r3,1204(sp)
10002ef0:	14800017 	ldw	r18,0(r2)
10002ef4:	002b883a 	mov	r21,zero
10002ef8:	18c00104 	addi	r3,r3,4
10002efc:	d8c12d15 	stw	r3,1204(sp)
10002f00:	003fcf06 	br	10002e40 <__alt_data_end+0xf8002e40>
10002f04:	e4000007 	ldb	r16,0(fp)
10002f08:	00801b04 	movi	r2,108
10002f0c:	8083f726 	beq	r16,r2,10003eec <___vfprintf_internal_r+0x1b74>
10002f10:	9cc00414 	ori	r19,r19,16
10002f14:	e005883a 	mov	r2,fp
10002f18:	003d7f06 	br	10002518 <__alt_data_end+0xf8002518>
10002f1c:	da012a17 	ldw	r8,1192(sp)
10002f20:	df012a15 	stw	fp,1192(sp)
10002f24:	9839883a 	mov	fp,r19
10002f28:	dcc12b03 	ldbu	r19,1196(sp)
10002f2c:	e080080c 	andi	r2,fp,32
10002f30:	dcc12785 	stb	r19,1182(sp)
10002f34:	10032226 	beq	r2,zero,10003bc0 <___vfprintf_internal_r+0x1848>
10002f38:	d9412d17 	ldw	r5,1204(sp)
10002f3c:	d9012f17 	ldw	r4,1212(sp)
10002f40:	28800017 	ldw	r2,0(r5)
10002f44:	2007d7fa 	srai	r3,r4,31
10002f48:	29400104 	addi	r5,r5,4
10002f4c:	d9412d15 	stw	r5,1204(sp)
10002f50:	11000015 	stw	r4,0(r2)
10002f54:	10c00115 	stw	r3,4(r2)
10002f58:	003d4406 	br	1000246c <__alt_data_end+0xf800246c>
10002f5c:	da012a17 	ldw	r8,1192(sp)
10002f60:	df012a15 	stw	fp,1192(sp)
10002f64:	9839883a 	mov	fp,r19
10002f68:	e0c0080c 	andi	r3,fp,32
10002f6c:	d8812d17 	ldw	r2,1204(sp)
10002f70:	183f8a1e 	bne	r3,zero,10002d9c <__alt_data_end+0xf8002d9c>
10002f74:	e0c0040c 	andi	r3,fp,16
10002f78:	18031c26 	beq	r3,zero,10003bec <___vfprintf_internal_r+0x1874>
10002f7c:	14800017 	ldw	r18,0(r2)
10002f80:	d8812d17 	ldw	r2,1204(sp)
10002f84:	002b883a 	mov	r21,zero
10002f88:	9007883a 	mov	r3,r18
10002f8c:	10800104 	addi	r2,r2,4
10002f90:	d8812d15 	stw	r2,1204(sp)
10002f94:	0005883a 	mov	r2,zero
10002f98:	003f8706 	br	10002db8 <__alt_data_end+0xf8002db8>
10002f9c:	d9412d17 	ldw	r5,1204(sp)
10002fa0:	00800c04 	movi	r2,48
10002fa4:	d8812705 	stb	r2,1180(sp)
10002fa8:	2c800017 	ldw	r18,0(r5)
10002fac:	00801e04 	movi	r2,120
10002fb0:	d8812745 	stb	r2,1181(sp)
10002fb4:	00840074 	movhi	r2,4097
10002fb8:	1086bd04 	addi	r2,r2,6900
10002fbc:	29400104 	addi	r5,r5,4
10002fc0:	da012a17 	ldw	r8,1192(sp)
10002fc4:	d8813b15 	stw	r2,1260(sp)
10002fc8:	df012a15 	stw	fp,1192(sp)
10002fcc:	002b883a 	mov	r21,zero
10002fd0:	9f000094 	ori	fp,r19,2
10002fd4:	d9412d15 	stw	r5,1204(sp)
10002fd8:	00800084 	movi	r2,2
10002fdc:	04001e04 	movi	r16,120
10002fe0:	9007883a 	mov	r3,r18
10002fe4:	003f7406 	br	10002db8 <__alt_data_end+0xf8002db8>
10002fe8:	da012a17 	ldw	r8,1192(sp)
10002fec:	df012a15 	stw	fp,1192(sp)
10002ff0:	9839883a 	mov	fp,r19
10002ff4:	dcc12b03 	ldbu	r19,1196(sp)
10002ff8:	e080080c 	andi	r2,fp,32
10002ffc:	d8c12d17 	ldw	r3,1204(sp)
10003000:	dcc12785 	stb	r19,1182(sp)
10003004:	103e321e 	bne	r2,zero,100028d0 <__alt_data_end+0xf80028d0>
10003008:	e080040c 	andi	r2,fp,16
1000300c:	10031326 	beq	r2,zero,10003c5c <___vfprintf_internal_r+0x18e4>
10003010:	1c800017 	ldw	r18,0(r3)
10003014:	d9412d17 	ldw	r5,1204(sp)
10003018:	902bd7fa 	srai	r21,r18,31
1000301c:	29400104 	addi	r5,r5,4
10003020:	d9412d15 	stw	r5,1204(sp)
10003024:	a805883a 	mov	r2,r21
10003028:	003e2f06 	br	100028e8 <__alt_data_end+0xf80028e8>
1000302c:	9cc01014 	ori	r19,r19,64
10003030:	e005883a 	mov	r2,fp
10003034:	e4000007 	ldb	r16,0(fp)
10003038:	003d3706 	br	10002518 <__alt_data_end+0xf8002518>
1000303c:	d8c12d17 	ldw	r3,1204(sp)
10003040:	d9012d17 	ldw	r4,1204(sp)
10003044:	da012a17 	ldw	r8,1192(sp)
10003048:	18800017 	ldw	r2,0(r3)
1000304c:	21000104 	addi	r4,r4,4
10003050:	00c00044 	movi	r3,1
10003054:	df012a15 	stw	fp,1192(sp)
10003058:	d8c12b15 	stw	r3,1196(sp)
1000305c:	9839883a 	mov	fp,r19
10003060:	d8012785 	stb	zero,1182(sp)
10003064:	d8810405 	stb	r2,1040(sp)
10003068:	d9012d15 	stw	r4,1204(sp)
1000306c:	1823883a 	mov	r17,r3
10003070:	d8c10404 	addi	r3,sp,1040
10003074:	d8013215 	stw	zero,1224(sp)
10003078:	d8013415 	stw	zero,1232(sp)
1000307c:	d8c13115 	stw	r3,1220(sp)
10003080:	0005883a 	mov	r2,zero
10003084:	003e4306 	br	10002994 <__alt_data_end+0xf8002994>
10003088:	d8812b07 	ldb	r2,1196(sp)
1000308c:	1002fc1e 	bne	r2,zero,10003c80 <___vfprintf_internal_r+0x1908>
10003090:	00c00804 	movi	r3,32
10003094:	d8c12b05 	stb	r3,1196(sp)
10003098:	e005883a 	mov	r2,fp
1000309c:	e4000007 	ldb	r16,0(fp)
100030a0:	003d1d06 	br	10002518 <__alt_data_end+0xf8002518>
100030a4:	9cc00054 	ori	r19,r19,1
100030a8:	e005883a 	mov	r2,fp
100030ac:	e4000007 	ldb	r16,0(fp)
100030b0:	003d1906 	br	10002518 <__alt_data_end+0xf8002518>
100030b4:	d9012d17 	ldw	r4,1204(sp)
100030b8:	d9412d17 	ldw	r5,1204(sp)
100030bc:	21000017 	ldw	r4,0(r4)
100030c0:	28c00104 	addi	r3,r5,4
100030c4:	d9012e15 	stw	r4,1208(sp)
100030c8:	20038c16 	blt	r4,zero,10003efc <___vfprintf_internal_r+0x1b84>
100030cc:	d8c12d15 	stw	r3,1204(sp)
100030d0:	e005883a 	mov	r2,fp
100030d4:	e4000007 	ldb	r16,0(fp)
100030d8:	003d0f06 	br	10002518 <__alt_data_end+0xf8002518>
100030dc:	00c00ac4 	movi	r3,43
100030e0:	d8c12b05 	stb	r3,1196(sp)
100030e4:	e005883a 	mov	r2,fp
100030e8:	e4000007 	ldb	r16,0(fp)
100030ec:	003d0a06 	br	10002518 <__alt_data_end+0xf8002518>
100030f0:	d8c12d17 	ldw	r3,1204(sp)
100030f4:	d9012d17 	ldw	r4,1204(sp)
100030f8:	da012a17 	ldw	r8,1192(sp)
100030fc:	18c00017 	ldw	r3,0(r3)
10003100:	df012a15 	stw	fp,1192(sp)
10003104:	d8012785 	stb	zero,1182(sp)
10003108:	d8c13115 	stw	r3,1220(sp)
1000310c:	9839883a 	mov	fp,r19
10003110:	24800104 	addi	r18,r4,4
10003114:	1803f726 	beq	r3,zero,100040f4 <___vfprintf_internal_r+0x1d7c>
10003118:	d9013117 	ldw	r4,1220(sp)
1000311c:	48038916 	blt	r9,zero,10003f44 <___vfprintf_internal_r+0x1bcc>
10003120:	480d883a 	mov	r6,r9
10003124:	000b883a 	mov	r5,zero
10003128:	da013f15 	stw	r8,1276(sp)
1000312c:	da413e15 	stw	r9,1272(sp)
10003130:	000798c0 	call	1000798c <memchr>
10003134:	da013f17 	ldw	r8,1276(sp)
10003138:	da413e17 	ldw	r9,1272(sp)
1000313c:	10045926 	beq	r2,zero,100042a4 <___vfprintf_internal_r+0x1f2c>
10003140:	d8c13117 	ldw	r3,1220(sp)
10003144:	10e3c83a 	sub	r17,r2,r3
10003148:	4c433516 	blt	r9,r17,10003e20 <___vfprintf_internal_r+0x1aa8>
1000314c:	8805883a 	mov	r2,r17
10003150:	88038116 	blt	r17,zero,10003f58 <___vfprintf_internal_r+0x1be0>
10003154:	dcc12783 	ldbu	r19,1182(sp)
10003158:	d8812b15 	stw	r2,1196(sp)
1000315c:	dc812d15 	stw	r18,1204(sp)
10003160:	d8013215 	stw	zero,1224(sp)
10003164:	d8013415 	stw	zero,1232(sp)
10003168:	003e0306 	br	10002978 <__alt_data_end+0xf8002978>
1000316c:	da012a17 	ldw	r8,1192(sp)
10003170:	df012a15 	stw	fp,1192(sp)
10003174:	9839883a 	mov	fp,r19
10003178:	dcc12b03 	ldbu	r19,1196(sp)
1000317c:	dcc12785 	stb	r19,1182(sp)
10003180:	803d8f26 	beq	r16,zero,100027c0 <__alt_data_end+0xf80027c0>
10003184:	00c00044 	movi	r3,1
10003188:	d8c12b15 	stw	r3,1196(sp)
1000318c:	dc010405 	stb	r16,1040(sp)
10003190:	d8012785 	stb	zero,1182(sp)
10003194:	003fb506 	br	1000306c <__alt_data_end+0xf800306c>
10003198:	d8c12017 	ldw	r3,1152(sp)
1000319c:	003e3506 	br	10002a74 <__alt_data_end+0xf8002a74>
100031a0:	10803fcc 	andi	r2,r2,255
100031a4:	00c00044 	movi	r3,1
100031a8:	10fddc1e 	bne	r2,r3,1000291c <__alt_data_end+0xf800291c>
100031ac:	a800021e 	bne	r21,zero,100031b8 <___vfprintf_internal_r+0xe40>
100031b0:	00800244 	movi	r2,9
100031b4:	14801e2e 	bgeu	r2,r18,10003230 <___vfprintf_internal_r+0xeb8>
100031b8:	dc012b15 	stw	r16,1196(sp)
100031bc:	dc410e04 	addi	r17,sp,1080
100031c0:	9021883a 	mov	r16,r18
100031c4:	da012c15 	stw	r8,1200(sp)
100031c8:	a825883a 	mov	r18,r21
100031cc:	482b883a 	mov	r21,r9
100031d0:	8009883a 	mov	r4,r16
100031d4:	900b883a 	mov	r5,r18
100031d8:	01800284 	movi	r6,10
100031dc:	000f883a 	mov	r7,zero
100031e0:	000bba40 	call	1000bba4 <__umoddi3>
100031e4:	10800c04 	addi	r2,r2,48
100031e8:	8c7fffc4 	addi	r17,r17,-1
100031ec:	8009883a 	mov	r4,r16
100031f0:	900b883a 	mov	r5,r18
100031f4:	01800284 	movi	r6,10
100031f8:	000f883a 	mov	r7,zero
100031fc:	88800005 	stb	r2,0(r17)
10003200:	000b5640 	call	1000b564 <__udivdi3>
10003204:	1021883a 	mov	r16,r2
10003208:	10c4b03a 	or	r2,r2,r3
1000320c:	1825883a 	mov	r18,r3
10003210:	103fef1e 	bne	r2,zero,100031d0 <__alt_data_end+0xf80031d0>
10003214:	d9012817 	ldw	r4,1184(sp)
10003218:	dc413115 	stw	r17,1220(sp)
1000321c:	dc012b17 	ldw	r16,1196(sp)
10003220:	da012c17 	ldw	r8,1200(sp)
10003224:	a813883a 	mov	r9,r21
10003228:	2463c83a 	sub	r17,r4,r17
1000322c:	003dcd06 	br	10002964 <__alt_data_end+0xf8002964>
10003230:	94800c04 	addi	r18,r18,48
10003234:	d8c10dc4 	addi	r3,sp,1079
10003238:	dc810dc5 	stb	r18,1079(sp)
1000323c:	dc413c17 	ldw	r17,1264(sp)
10003240:	d8c13115 	stw	r3,1220(sp)
10003244:	003dc706 	br	10002964 <__alt_data_end+0xf8002964>
10003248:	00801944 	movi	r2,101
1000324c:	1400720e 	bge	r2,r16,10003418 <___vfprintf_internal_r+0x10a0>
10003250:	d9013717 	ldw	r4,1244(sp)
10003254:	d9413917 	ldw	r5,1252(sp)
10003258:	000d883a 	mov	r6,zero
1000325c:	000f883a 	mov	r7,zero
10003260:	d8c13d15 	stw	r3,1268(sp)
10003264:	da013f15 	stw	r8,1276(sp)
10003268:	000d5300 	call	1000d530 <__eqdf2>
1000326c:	d8c13d17 	ldw	r3,1268(sp)
10003270:	da013f17 	ldw	r8,1276(sp)
10003274:	1000f41e 	bne	r2,zero,10003648 <___vfprintf_internal_r+0x12d0>
10003278:	d8811f17 	ldw	r2,1148(sp)
1000327c:	01040074 	movhi	r4,4097
10003280:	2106c404 	addi	r4,r4,6928
10003284:	18c00044 	addi	r3,r3,1
10003288:	10800044 	addi	r2,r2,1
1000328c:	41000015 	stw	r4,0(r8)
10003290:	01000044 	movi	r4,1
10003294:	41000115 	stw	r4,4(r8)
10003298:	d8c12015 	stw	r3,1152(sp)
1000329c:	d8811f15 	stw	r2,1148(sp)
100032a0:	010001c4 	movi	r4,7
100032a4:	20828d16 	blt	r4,r2,10003cdc <___vfprintf_internal_r+0x1964>
100032a8:	42000204 	addi	r8,r8,8
100032ac:	d8812617 	ldw	r2,1176(sp)
100032b0:	d9413317 	ldw	r5,1228(sp)
100032b4:	11400216 	blt	r2,r5,100032c0 <___vfprintf_internal_r+0xf48>
100032b8:	e080004c 	andi	r2,fp,1
100032bc:	103e4126 	beq	r2,zero,10002bc4 <__alt_data_end+0xf8002bc4>
100032c0:	d8813817 	ldw	r2,1248(sp)
100032c4:	d9013517 	ldw	r4,1236(sp)
100032c8:	d9413817 	ldw	r5,1248(sp)
100032cc:	1887883a 	add	r3,r3,r2
100032d0:	d8811f17 	ldw	r2,1148(sp)
100032d4:	41000015 	stw	r4,0(r8)
100032d8:	41400115 	stw	r5,4(r8)
100032dc:	10800044 	addi	r2,r2,1
100032e0:	d8c12015 	stw	r3,1152(sp)
100032e4:	d8811f15 	stw	r2,1148(sp)
100032e8:	010001c4 	movi	r4,7
100032ec:	20830916 	blt	r4,r2,10003f14 <___vfprintf_internal_r+0x1b9c>
100032f0:	42000204 	addi	r8,r8,8
100032f4:	d8813317 	ldw	r2,1228(sp)
100032f8:	143fffc4 	addi	r16,r2,-1
100032fc:	043e310e 	bge	zero,r16,10002bc4 <__alt_data_end+0xf8002bc4>
10003300:	04400404 	movi	r17,16
10003304:	d8811f17 	ldw	r2,1148(sp)
10003308:	8c007e0e 	bge	r17,r16,10003504 <___vfprintf_internal_r+0x118c>
1000330c:	01440074 	movhi	r5,4097
10003310:	2946c484 	addi	r5,r5,6930
10003314:	d9412c15 	stw	r5,1200(sp)
10003318:	04c001c4 	movi	r19,7
1000331c:	00000306 	br	1000332c <___vfprintf_internal_r+0xfb4>
10003320:	42000204 	addi	r8,r8,8
10003324:	843ffc04 	addi	r16,r16,-16
10003328:	8c00790e 	bge	r17,r16,10003510 <___vfprintf_internal_r+0x1198>
1000332c:	18c00404 	addi	r3,r3,16
10003330:	10800044 	addi	r2,r2,1
10003334:	45000015 	stw	r20,0(r8)
10003338:	44400115 	stw	r17,4(r8)
1000333c:	d8c12015 	stw	r3,1152(sp)
10003340:	d8811f15 	stw	r2,1148(sp)
10003344:	98bff60e 	bge	r19,r2,10003320 <__alt_data_end+0xf8003320>
10003348:	b809883a 	mov	r4,r23
1000334c:	b00b883a 	mov	r5,r22
10003350:	d9811e04 	addi	r6,sp,1144
10003354:	00097b80 	call	100097b8 <__sprint_r>
10003358:	103d1f1e 	bne	r2,zero,100027d8 <__alt_data_end+0xf80027d8>
1000335c:	d8c12017 	ldw	r3,1152(sp)
10003360:	d8811f17 	ldw	r2,1148(sp)
10003364:	da000404 	addi	r8,sp,16
10003368:	003fee06 	br	10003324 <__alt_data_end+0xf8003324>
1000336c:	d9412e17 	ldw	r5,1208(sp)
10003370:	d8812b17 	ldw	r2,1196(sp)
10003374:	28a7c83a 	sub	r19,r5,r2
10003378:	04fddc0e 	bge	zero,r19,10002aec <__alt_data_end+0xf8002aec>
1000337c:	05400404 	movi	r21,16
10003380:	d8811f17 	ldw	r2,1148(sp)
10003384:	acc3870e 	bge	r21,r19,100041a4 <___vfprintf_internal_r+0x1e2c>
10003388:	01440074 	movhi	r5,4097
1000338c:	2946c484 	addi	r5,r5,6930
10003390:	d9412c15 	stw	r5,1200(sp)
10003394:	048001c4 	movi	r18,7
10003398:	00000306 	br	100033a8 <___vfprintf_internal_r+0x1030>
1000339c:	9cfffc04 	addi	r19,r19,-16
100033a0:	42000204 	addi	r8,r8,8
100033a4:	acc0110e 	bge	r21,r19,100033ec <___vfprintf_internal_r+0x1074>
100033a8:	18c00404 	addi	r3,r3,16
100033ac:	10800044 	addi	r2,r2,1
100033b0:	45000015 	stw	r20,0(r8)
100033b4:	45400115 	stw	r21,4(r8)
100033b8:	d8c12015 	stw	r3,1152(sp)
100033bc:	d8811f15 	stw	r2,1148(sp)
100033c0:	90bff60e 	bge	r18,r2,1000339c <__alt_data_end+0xf800339c>
100033c4:	b809883a 	mov	r4,r23
100033c8:	b00b883a 	mov	r5,r22
100033cc:	d9811e04 	addi	r6,sp,1144
100033d0:	00097b80 	call	100097b8 <__sprint_r>
100033d4:	103d001e 	bne	r2,zero,100027d8 <__alt_data_end+0xf80027d8>
100033d8:	9cfffc04 	addi	r19,r19,-16
100033dc:	d8c12017 	ldw	r3,1152(sp)
100033e0:	d8811f17 	ldw	r2,1148(sp)
100033e4:	da000404 	addi	r8,sp,16
100033e8:	acffef16 	blt	r21,r19,100033a8 <__alt_data_end+0xf80033a8>
100033ec:	d9012c17 	ldw	r4,1200(sp)
100033f0:	1cc7883a 	add	r3,r3,r19
100033f4:	10800044 	addi	r2,r2,1
100033f8:	41000015 	stw	r4,0(r8)
100033fc:	44c00115 	stw	r19,4(r8)
10003400:	d8c12015 	stw	r3,1152(sp)
10003404:	d8811f15 	stw	r2,1148(sp)
10003408:	010001c4 	movi	r4,7
1000340c:	20817816 	blt	r4,r2,100039f0 <___vfprintf_internal_r+0x1678>
10003410:	42000204 	addi	r8,r8,8
10003414:	003db506 	br	10002aec <__alt_data_end+0xf8002aec>
10003418:	d9413317 	ldw	r5,1228(sp)
1000341c:	00800044 	movi	r2,1
10003420:	18c00044 	addi	r3,r3,1
10003424:	11413e0e 	bge	r2,r5,10003920 <___vfprintf_internal_r+0x15a8>
10003428:	dc011f17 	ldw	r16,1148(sp)
1000342c:	d8813117 	ldw	r2,1220(sp)
10003430:	d8c12015 	stw	r3,1152(sp)
10003434:	84000044 	addi	r16,r16,1
10003438:	40800015 	stw	r2,0(r8)
1000343c:	00800044 	movi	r2,1
10003440:	40800115 	stw	r2,4(r8)
10003444:	dc011f15 	stw	r16,1148(sp)
10003448:	008001c4 	movi	r2,7
1000344c:	14015616 	blt	r2,r16,100039a8 <___vfprintf_internal_r+0x1630>
10003450:	42000204 	addi	r8,r8,8
10003454:	d9013817 	ldw	r4,1248(sp)
10003458:	d9413517 	ldw	r5,1236(sp)
1000345c:	84000044 	addi	r16,r16,1
10003460:	1907883a 	add	r3,r3,r4
10003464:	41400015 	stw	r5,0(r8)
10003468:	41000115 	stw	r4,4(r8)
1000346c:	d8c12015 	stw	r3,1152(sp)
10003470:	dc011f15 	stw	r16,1148(sp)
10003474:	008001c4 	movi	r2,7
10003478:	14015416 	blt	r2,r16,100039cc <___vfprintf_internal_r+0x1654>
1000347c:	44400204 	addi	r17,r8,8
10003480:	d9013717 	ldw	r4,1244(sp)
10003484:	d9413917 	ldw	r5,1252(sp)
10003488:	000d883a 	mov	r6,zero
1000348c:	000f883a 	mov	r7,zero
10003490:	d8c13d15 	stw	r3,1268(sp)
10003494:	000d5300 	call	1000d530 <__eqdf2>
10003498:	d8c13d17 	ldw	r3,1268(sp)
1000349c:	1000a726 	beq	r2,zero,1000373c <___vfprintf_internal_r+0x13c4>
100034a0:	d9013317 	ldw	r4,1228(sp)
100034a4:	d9413117 	ldw	r5,1220(sp)
100034a8:	84000044 	addi	r16,r16,1
100034ac:	20bfffc4 	addi	r2,r4,-1
100034b0:	1887883a 	add	r3,r3,r2
100034b4:	29000044 	addi	r4,r5,1
100034b8:	88800115 	stw	r2,4(r17)
100034bc:	89000015 	stw	r4,0(r17)
100034c0:	d8c12015 	stw	r3,1152(sp)
100034c4:	dc011f15 	stw	r16,1148(sp)
100034c8:	008001c4 	movi	r2,7
100034cc:	14012d16 	blt	r2,r16,10003984 <___vfprintf_internal_r+0x160c>
100034d0:	8c400204 	addi	r17,r17,8
100034d4:	d9413a17 	ldw	r5,1256(sp)
100034d8:	dcc122c4 	addi	r19,sp,1163
100034dc:	84000044 	addi	r16,r16,1
100034e0:	28c7883a 	add	r3,r5,r3
100034e4:	8cc00015 	stw	r19,0(r17)
100034e8:	89400115 	stw	r5,4(r17)
100034ec:	d8c12015 	stw	r3,1152(sp)
100034f0:	dc011f15 	stw	r16,1148(sp)
100034f4:	008001c4 	movi	r2,7
100034f8:	14000e16 	blt	r2,r16,10003534 <___vfprintf_internal_r+0x11bc>
100034fc:	8a000204 	addi	r8,r17,8
10003500:	003db006 	br	10002bc4 <__alt_data_end+0xf8002bc4>
10003504:	01040074 	movhi	r4,4097
10003508:	2106c484 	addi	r4,r4,6930
1000350c:	d9012c15 	stw	r4,1200(sp)
10003510:	d9012c17 	ldw	r4,1200(sp)
10003514:	1c07883a 	add	r3,r3,r16
10003518:	44000115 	stw	r16,4(r8)
1000351c:	41000015 	stw	r4,0(r8)
10003520:	10800044 	addi	r2,r2,1
10003524:	d8c12015 	stw	r3,1152(sp)
10003528:	d8811f15 	stw	r2,1148(sp)
1000352c:	010001c4 	movi	r4,7
10003530:	20bda30e 	bge	r4,r2,10002bc0 <__alt_data_end+0xf8002bc0>
10003534:	b809883a 	mov	r4,r23
10003538:	b00b883a 	mov	r5,r22
1000353c:	d9811e04 	addi	r6,sp,1144
10003540:	00097b80 	call	100097b8 <__sprint_r>
10003544:	103ca41e 	bne	r2,zero,100027d8 <__alt_data_end+0xf80027d8>
10003548:	d8c12017 	ldw	r3,1152(sp)
1000354c:	da000404 	addi	r8,sp,16
10003550:	003d9c06 	br	10002bc4 <__alt_data_end+0xf8002bc4>
10003554:	b809883a 	mov	r4,r23
10003558:	b00b883a 	mov	r5,r22
1000355c:	d9811e04 	addi	r6,sp,1144
10003560:	00097b80 	call	100097b8 <__sprint_r>
10003564:	103dd226 	beq	r2,zero,10002cb0 <__alt_data_end+0xf8002cb0>
10003568:	003c9b06 	br	100027d8 <__alt_data_end+0xf80027d8>
1000356c:	10803fcc 	andi	r2,r2,255
10003570:	1000311e 	bne	r2,zero,10003638 <___vfprintf_internal_r+0x12c0>
10003574:	e080004c 	andi	r2,fp,1
10003578:	10002f26 	beq	r2,zero,10003638 <___vfprintf_internal_r+0x12c0>
1000357c:	00800c04 	movi	r2,48
10003580:	d8c10dc4 	addi	r3,sp,1079
10003584:	d8810dc5 	stb	r2,1079(sp)
10003588:	dc413c17 	ldw	r17,1264(sp)
1000358c:	d8c13115 	stw	r3,1220(sp)
10003590:	003cf406 	br	10002964 <__alt_data_end+0xf8002964>
10003594:	b809883a 	mov	r4,r23
10003598:	b00b883a 	mov	r5,r22
1000359c:	d9811e04 	addi	r6,sp,1144
100035a0:	00097b80 	call	100097b8 <__sprint_r>
100035a4:	103c8c1e 	bne	r2,zero,100027d8 <__alt_data_end+0xf80027d8>
100035a8:	d8c12017 	ldw	r3,1152(sp)
100035ac:	da000404 	addi	r8,sp,16
100035b0:	003d7706 	br	10002b90 <__alt_data_end+0xf8002b90>
100035b4:	b809883a 	mov	r4,r23
100035b8:	b00b883a 	mov	r5,r22
100035bc:	d9811e04 	addi	r6,sp,1144
100035c0:	00097b80 	call	100097b8 <__sprint_r>
100035c4:	103c841e 	bne	r2,zero,100027d8 <__alt_data_end+0xf80027d8>
100035c8:	d8c12017 	ldw	r3,1152(sp)
100035cc:	da000404 	addi	r8,sp,16
100035d0:	003d3506 	br	10002aa8 <__alt_data_end+0xf8002aa8>
100035d4:	b809883a 	mov	r4,r23
100035d8:	b00b883a 	mov	r5,r22
100035dc:	d9811e04 	addi	r6,sp,1144
100035e0:	00097b80 	call	100097b8 <__sprint_r>
100035e4:	103c7c1e 	bne	r2,zero,100027d8 <__alt_data_end+0xf80027d8>
100035e8:	d8c12017 	ldw	r3,1152(sp)
100035ec:	da000404 	addi	r8,sp,16
100035f0:	003d3b06 	br	10002ae0 <__alt_data_end+0xf8002ae0>
100035f4:	d9413b17 	ldw	r5,1260(sp)
100035f8:	d8c10e04 	addi	r3,sp,1080
100035fc:	908003cc 	andi	r2,r18,15
10003600:	a808973a 	slli	r4,r21,28
10003604:	2885883a 	add	r2,r5,r2
10003608:	9024d13a 	srli	r18,r18,4
1000360c:	10800003 	ldbu	r2,0(r2)
10003610:	a82ad13a 	srli	r21,r21,4
10003614:	18ffffc4 	addi	r3,r3,-1
10003618:	24a4b03a 	or	r18,r4,r18
1000361c:	18800005 	stb	r2,0(r3)
10003620:	9544b03a 	or	r2,r18,r21
10003624:	103ff51e 	bne	r2,zero,100035fc <__alt_data_end+0xf80035fc>
10003628:	d9412817 	ldw	r5,1184(sp)
1000362c:	d8c13115 	stw	r3,1220(sp)
10003630:	28e3c83a 	sub	r17,r5,r3
10003634:	003ccb06 	br	10002964 <__alt_data_end+0xf8002964>
10003638:	d8c10e04 	addi	r3,sp,1080
1000363c:	0023883a 	mov	r17,zero
10003640:	d8c13115 	stw	r3,1220(sp)
10003644:	003cc706 	br	10002964 <__alt_data_end+0xf8002964>
10003648:	dc012617 	ldw	r16,1176(sp)
1000364c:	0401ab0e 	bge	zero,r16,10003cfc <___vfprintf_internal_r+0x1984>
10003650:	d8813317 	ldw	r2,1228(sp)
10003654:	d9413117 	ldw	r5,1220(sp)
10003658:	d9013417 	ldw	r4,1232(sp)
1000365c:	1023883a 	mov	r17,r2
10003660:	28a1883a 	add	r16,r5,r2
10003664:	2080010e 	bge	r4,r2,1000366c <___vfprintf_internal_r+0x12f4>
10003668:	2023883a 	mov	r17,r4
1000366c:	04400b0e 	bge	zero,r17,1000369c <___vfprintf_internal_r+0x1324>
10003670:	d8811f17 	ldw	r2,1148(sp)
10003674:	d9413117 	ldw	r5,1220(sp)
10003678:	1c47883a 	add	r3,r3,r17
1000367c:	10800044 	addi	r2,r2,1
10003680:	41400015 	stw	r5,0(r8)
10003684:	44400115 	stw	r17,4(r8)
10003688:	d8c12015 	stw	r3,1152(sp)
1000368c:	d8811f15 	stw	r2,1148(sp)
10003690:	010001c4 	movi	r4,7
10003694:	20826716 	blt	r4,r2,10004034 <___vfprintf_internal_r+0x1cbc>
10003698:	42000204 	addi	r8,r8,8
1000369c:	88026316 	blt	r17,zero,1000402c <___vfprintf_internal_r+0x1cb4>
100036a0:	d8813417 	ldw	r2,1232(sp)
100036a4:	1463c83a 	sub	r17,r2,r17
100036a8:	0440590e 	bge	zero,r17,10003810 <___vfprintf_internal_r+0x1498>
100036ac:	04c00404 	movi	r19,16
100036b0:	d8811f17 	ldw	r2,1148(sp)
100036b4:	9c41770e 	bge	r19,r17,10003c94 <___vfprintf_internal_r+0x191c>
100036b8:	01440074 	movhi	r5,4097
100036bc:	2946c484 	addi	r5,r5,6930
100036c0:	d9412c15 	stw	r5,1200(sp)
100036c4:	054001c4 	movi	r21,7
100036c8:	00000306 	br	100036d8 <___vfprintf_internal_r+0x1360>
100036cc:	42000204 	addi	r8,r8,8
100036d0:	8c7ffc04 	addi	r17,r17,-16
100036d4:	9c41720e 	bge	r19,r17,10003ca0 <___vfprintf_internal_r+0x1928>
100036d8:	18c00404 	addi	r3,r3,16
100036dc:	10800044 	addi	r2,r2,1
100036e0:	45000015 	stw	r20,0(r8)
100036e4:	44c00115 	stw	r19,4(r8)
100036e8:	d8c12015 	stw	r3,1152(sp)
100036ec:	d8811f15 	stw	r2,1148(sp)
100036f0:	a8bff60e 	bge	r21,r2,100036cc <__alt_data_end+0xf80036cc>
100036f4:	b809883a 	mov	r4,r23
100036f8:	b00b883a 	mov	r5,r22
100036fc:	d9811e04 	addi	r6,sp,1144
10003700:	00097b80 	call	100097b8 <__sprint_r>
10003704:	103c341e 	bne	r2,zero,100027d8 <__alt_data_end+0xf80027d8>
10003708:	d8c12017 	ldw	r3,1152(sp)
1000370c:	d8811f17 	ldw	r2,1148(sp)
10003710:	da000404 	addi	r8,sp,16
10003714:	003fee06 	br	100036d0 <__alt_data_end+0xf80036d0>
10003718:	b809883a 	mov	r4,r23
1000371c:	b00b883a 	mov	r5,r22
10003720:	d9811e04 	addi	r6,sp,1144
10003724:	00097b80 	call	100097b8 <__sprint_r>
10003728:	103c2b1e 	bne	r2,zero,100027d8 <__alt_data_end+0xf80027d8>
1000372c:	d8c12017 	ldw	r3,1152(sp)
10003730:	d8812787 	ldb	r2,1182(sp)
10003734:	da000404 	addi	r8,sp,16
10003738:	003cce06 	br	10002a74 <__alt_data_end+0xf8002a74>
1000373c:	d8813317 	ldw	r2,1228(sp)
10003740:	14ffffc4 	addi	r19,r2,-1
10003744:	04ff630e 	bge	zero,r19,100034d4 <__alt_data_end+0xf80034d4>
10003748:	05400404 	movi	r21,16
1000374c:	acc0810e 	bge	r21,r19,10003954 <___vfprintf_internal_r+0x15dc>
10003750:	01440074 	movhi	r5,4097
10003754:	2946c484 	addi	r5,r5,6930
10003758:	d9412c15 	stw	r5,1200(sp)
1000375c:	01c001c4 	movi	r7,7
10003760:	00000306 	br	10003770 <___vfprintf_internal_r+0x13f8>
10003764:	8c400204 	addi	r17,r17,8
10003768:	9cfffc04 	addi	r19,r19,-16
1000376c:	acc07c0e 	bge	r21,r19,10003960 <___vfprintf_internal_r+0x15e8>
10003770:	18c00404 	addi	r3,r3,16
10003774:	84000044 	addi	r16,r16,1
10003778:	8d000015 	stw	r20,0(r17)
1000377c:	8d400115 	stw	r21,4(r17)
10003780:	d8c12015 	stw	r3,1152(sp)
10003784:	dc011f15 	stw	r16,1148(sp)
10003788:	3c3ff60e 	bge	r7,r16,10003764 <__alt_data_end+0xf8003764>
1000378c:	b809883a 	mov	r4,r23
10003790:	b00b883a 	mov	r5,r22
10003794:	d9811e04 	addi	r6,sp,1144
10003798:	d9c13d15 	stw	r7,1268(sp)
1000379c:	00097b80 	call	100097b8 <__sprint_r>
100037a0:	d9c13d17 	ldw	r7,1268(sp)
100037a4:	103c0c1e 	bne	r2,zero,100027d8 <__alt_data_end+0xf80027d8>
100037a8:	d8c12017 	ldw	r3,1152(sp)
100037ac:	dc011f17 	ldw	r16,1148(sp)
100037b0:	dc400404 	addi	r17,sp,16
100037b4:	003fec06 	br	10003768 <__alt_data_end+0xf8003768>
100037b8:	00800084 	movi	r2,2
100037bc:	9546b03a 	or	r3,r18,r21
100037c0:	003d7d06 	br	10002db8 <__alt_data_end+0xf8002db8>
100037c4:	10803fcc 	andi	r2,r2,255
100037c8:	1080201c 	xori	r2,r2,128
100037cc:	10bfe004 	addi	r2,r2,-128
100037d0:	01000c04 	movi	r4,48
100037d4:	1101d726 	beq	r2,r4,10003f34 <___vfprintf_internal_r+0x1bbc>
100037d8:	d9413117 	ldw	r5,1220(sp)
100037dc:	d8812817 	ldw	r2,1184(sp)
100037e0:	193fffc5 	stb	r4,-1(r3)
100037e4:	297fffc4 	addi	r5,r5,-1
100037e8:	d9413115 	stw	r5,1220(sp)
100037ec:	1163c83a 	sub	r17,r2,r5
100037f0:	003c5c06 	br	10002964 <__alt_data_end+0xf8002964>
100037f4:	b809883a 	mov	r4,r23
100037f8:	b00b883a 	mov	r5,r22
100037fc:	d9811e04 	addi	r6,sp,1144
10003800:	00097b80 	call	100097b8 <__sprint_r>
10003804:	103bf41e 	bne	r2,zero,100027d8 <__alt_data_end+0xf80027d8>
10003808:	d8c12017 	ldw	r3,1152(sp)
1000380c:	da000404 	addi	r8,sp,16
10003810:	d9413117 	ldw	r5,1220(sp)
10003814:	d9013417 	ldw	r4,1232(sp)
10003818:	d8812617 	ldw	r2,1176(sp)
1000381c:	2923883a 	add	r17,r5,r4
10003820:	d9413317 	ldw	r5,1228(sp)
10003824:	11400216 	blt	r2,r5,10003830 <___vfprintf_internal_r+0x14b8>
10003828:	e100004c 	andi	r4,fp,1
1000382c:	20000d26 	beq	r4,zero,10003864 <___vfprintf_internal_r+0x14ec>
10003830:	d9013817 	ldw	r4,1248(sp)
10003834:	d9413517 	ldw	r5,1236(sp)
10003838:	1907883a 	add	r3,r3,r4
1000383c:	d9011f17 	ldw	r4,1148(sp)
10003840:	41400015 	stw	r5,0(r8)
10003844:	d9413817 	ldw	r5,1248(sp)
10003848:	21000044 	addi	r4,r4,1
1000384c:	d8c12015 	stw	r3,1152(sp)
10003850:	41400115 	stw	r5,4(r8)
10003854:	d9011f15 	stw	r4,1148(sp)
10003858:	014001c4 	movi	r5,7
1000385c:	2901fd16 	blt	r5,r4,10004054 <___vfprintf_internal_r+0x1cdc>
10003860:	42000204 	addi	r8,r8,8
10003864:	d9013317 	ldw	r4,1228(sp)
10003868:	2085c83a 	sub	r2,r4,r2
1000386c:	8449c83a 	sub	r4,r16,r17
10003870:	1021883a 	mov	r16,r2
10003874:	2080010e 	bge	r4,r2,1000387c <___vfprintf_internal_r+0x1504>
10003878:	2021883a 	mov	r16,r4
1000387c:	04000a0e 	bge	zero,r16,100038a8 <___vfprintf_internal_r+0x1530>
10003880:	d9011f17 	ldw	r4,1148(sp)
10003884:	1c07883a 	add	r3,r3,r16
10003888:	44400015 	stw	r17,0(r8)
1000388c:	21000044 	addi	r4,r4,1
10003890:	44000115 	stw	r16,4(r8)
10003894:	d8c12015 	stw	r3,1152(sp)
10003898:	d9011f15 	stw	r4,1148(sp)
1000389c:	014001c4 	movi	r5,7
100038a0:	29020916 	blt	r5,r4,100040c8 <___vfprintf_internal_r+0x1d50>
100038a4:	42000204 	addi	r8,r8,8
100038a8:	80020116 	blt	r16,zero,100040b0 <___vfprintf_internal_r+0x1d38>
100038ac:	1421c83a 	sub	r16,r2,r16
100038b0:	043cc40e 	bge	zero,r16,10002bc4 <__alt_data_end+0xf8002bc4>
100038b4:	04400404 	movi	r17,16
100038b8:	d8811f17 	ldw	r2,1148(sp)
100038bc:	8c3f110e 	bge	r17,r16,10003504 <__alt_data_end+0xf8003504>
100038c0:	01440074 	movhi	r5,4097
100038c4:	2946c484 	addi	r5,r5,6930
100038c8:	d9412c15 	stw	r5,1200(sp)
100038cc:	04c001c4 	movi	r19,7
100038d0:	00000306 	br	100038e0 <___vfprintf_internal_r+0x1568>
100038d4:	42000204 	addi	r8,r8,8
100038d8:	843ffc04 	addi	r16,r16,-16
100038dc:	8c3f0c0e 	bge	r17,r16,10003510 <__alt_data_end+0xf8003510>
100038e0:	18c00404 	addi	r3,r3,16
100038e4:	10800044 	addi	r2,r2,1
100038e8:	45000015 	stw	r20,0(r8)
100038ec:	44400115 	stw	r17,4(r8)
100038f0:	d8c12015 	stw	r3,1152(sp)
100038f4:	d8811f15 	stw	r2,1148(sp)
100038f8:	98bff60e 	bge	r19,r2,100038d4 <__alt_data_end+0xf80038d4>
100038fc:	b809883a 	mov	r4,r23
10003900:	b00b883a 	mov	r5,r22
10003904:	d9811e04 	addi	r6,sp,1144
10003908:	00097b80 	call	100097b8 <__sprint_r>
1000390c:	103bb21e 	bne	r2,zero,100027d8 <__alt_data_end+0xf80027d8>
10003910:	d8c12017 	ldw	r3,1152(sp)
10003914:	d8811f17 	ldw	r2,1148(sp)
10003918:	da000404 	addi	r8,sp,16
1000391c:	003fee06 	br	100038d8 <__alt_data_end+0xf80038d8>
10003920:	e088703a 	and	r4,fp,r2
10003924:	203ec01e 	bne	r4,zero,10003428 <__alt_data_end+0xf8003428>
10003928:	dc011f17 	ldw	r16,1148(sp)
1000392c:	d9013117 	ldw	r4,1220(sp)
10003930:	40800115 	stw	r2,4(r8)
10003934:	84000044 	addi	r16,r16,1
10003938:	41000015 	stw	r4,0(r8)
1000393c:	d8c12015 	stw	r3,1152(sp)
10003940:	dc011f15 	stw	r16,1148(sp)
10003944:	008001c4 	movi	r2,7
10003948:	14000e16 	blt	r2,r16,10003984 <___vfprintf_internal_r+0x160c>
1000394c:	44400204 	addi	r17,r8,8
10003950:	003ee006 	br	100034d4 <__alt_data_end+0xf80034d4>
10003954:	01040074 	movhi	r4,4097
10003958:	2106c484 	addi	r4,r4,6930
1000395c:	d9012c15 	stw	r4,1200(sp)
10003960:	d8812c17 	ldw	r2,1200(sp)
10003964:	1cc7883a 	add	r3,r3,r19
10003968:	84000044 	addi	r16,r16,1
1000396c:	88800015 	stw	r2,0(r17)
10003970:	8cc00115 	stw	r19,4(r17)
10003974:	d8c12015 	stw	r3,1152(sp)
10003978:	dc011f15 	stw	r16,1148(sp)
1000397c:	008001c4 	movi	r2,7
10003980:	143ed30e 	bge	r2,r16,100034d0 <__alt_data_end+0xf80034d0>
10003984:	b809883a 	mov	r4,r23
10003988:	b00b883a 	mov	r5,r22
1000398c:	d9811e04 	addi	r6,sp,1144
10003990:	00097b80 	call	100097b8 <__sprint_r>
10003994:	103b901e 	bne	r2,zero,100027d8 <__alt_data_end+0xf80027d8>
10003998:	d8c12017 	ldw	r3,1152(sp)
1000399c:	dc011f17 	ldw	r16,1148(sp)
100039a0:	dc400404 	addi	r17,sp,16
100039a4:	003ecb06 	br	100034d4 <__alt_data_end+0xf80034d4>
100039a8:	b809883a 	mov	r4,r23
100039ac:	b00b883a 	mov	r5,r22
100039b0:	d9811e04 	addi	r6,sp,1144
100039b4:	00097b80 	call	100097b8 <__sprint_r>
100039b8:	103b871e 	bne	r2,zero,100027d8 <__alt_data_end+0xf80027d8>
100039bc:	d8c12017 	ldw	r3,1152(sp)
100039c0:	dc011f17 	ldw	r16,1148(sp)
100039c4:	da000404 	addi	r8,sp,16
100039c8:	003ea206 	br	10003454 <__alt_data_end+0xf8003454>
100039cc:	b809883a 	mov	r4,r23
100039d0:	b00b883a 	mov	r5,r22
100039d4:	d9811e04 	addi	r6,sp,1144
100039d8:	00097b80 	call	100097b8 <__sprint_r>
100039dc:	103b7e1e 	bne	r2,zero,100027d8 <__alt_data_end+0xf80027d8>
100039e0:	d8c12017 	ldw	r3,1152(sp)
100039e4:	dc011f17 	ldw	r16,1148(sp)
100039e8:	dc400404 	addi	r17,sp,16
100039ec:	003ea406 	br	10003480 <__alt_data_end+0xf8003480>
100039f0:	b809883a 	mov	r4,r23
100039f4:	b00b883a 	mov	r5,r22
100039f8:	d9811e04 	addi	r6,sp,1144
100039fc:	00097b80 	call	100097b8 <__sprint_r>
10003a00:	103b751e 	bne	r2,zero,100027d8 <__alt_data_end+0xf80027d8>
10003a04:	d8c12017 	ldw	r3,1152(sp)
10003a08:	da000404 	addi	r8,sp,16
10003a0c:	003c3706 	br	10002aec <__alt_data_end+0xf8002aec>
10003a10:	04a5c83a 	sub	r18,zero,r18
10003a14:	9004c03a 	cmpne	r2,r18,zero
10003a18:	056bc83a 	sub	r21,zero,r21
10003a1c:	a8abc83a 	sub	r21,r21,r2
10003a20:	04c00b44 	movi	r19,45
10003a24:	dcc12785 	stb	r19,1182(sp)
10003a28:	da413215 	stw	r9,1224(sp)
10003a2c:	00800044 	movi	r2,1
10003a30:	9546b03a 	or	r3,r18,r21
10003a34:	003bb106 	br	100028fc <__alt_data_end+0xf80028fc>
10003a38:	da013f15 	stw	r8,1276(sp)
10003a3c:	da413e15 	stw	r9,1272(sp)
10003a40:	00094140 	call	10009414 <__fpclassifyd>
10003a44:	da013f17 	ldw	r8,1276(sp)
10003a48:	da413e17 	ldw	r9,1272(sp)
10003a4c:	1000e526 	beq	r2,zero,10003de4 <___vfprintf_internal_r+0x1a6c>
10003a50:	04fff7c4 	movi	r19,-33
10003a54:	00bfffc4 	movi	r2,-1
10003a58:	84e6703a 	and	r19,r16,r19
10003a5c:	48822926 	beq	r9,r2,10004304 <___vfprintf_internal_r+0x1f8c>
10003a60:	008011c4 	movi	r2,71
10003a64:	98821626 	beq	r19,r2,100042c0 <___vfprintf_internal_r+0x1f48>
10003a68:	d9013917 	ldw	r4,1252(sp)
10003a6c:	e0c04014 	ori	r3,fp,256
10003a70:	d8c12d15 	stw	r3,1204(sp)
10003a74:	20021f16 	blt	r4,zero,100042f4 <___vfprintf_internal_r+0x1f7c>
10003a78:	dc413917 	ldw	r17,1252(sp)
10003a7c:	d8012b05 	stb	zero,1196(sp)
10003a80:	00801984 	movi	r2,102
10003a84:	80814d26 	beq	r16,r2,10003fbc <___vfprintf_internal_r+0x1c44>
10003a88:	00801184 	movi	r2,70
10003a8c:	80814b26 	beq	r16,r2,10003fbc <___vfprintf_internal_r+0x1c44>
10003a90:	00801144 	movi	r2,69
10003a94:	98821d26 	beq	r19,r2,1000430c <___vfprintf_internal_r+0x1f94>
10003a98:	482b883a 	mov	r21,r9
10003a9c:	d8812604 	addi	r2,sp,1176
10003aa0:	d8800115 	stw	r2,4(sp)
10003aa4:	d9413717 	ldw	r5,1244(sp)
10003aa8:	d8812504 	addi	r2,sp,1172
10003aac:	d8800215 	stw	r2,8(sp)
10003ab0:	d8812104 	addi	r2,sp,1156
10003ab4:	dd400015 	stw	r21,0(sp)
10003ab8:	d8800315 	stw	r2,12(sp)
10003abc:	b809883a 	mov	r4,r23
10003ac0:	880d883a 	mov	r6,r17
10003ac4:	01c00084 	movi	r7,2
10003ac8:	da013f15 	stw	r8,1276(sp)
10003acc:	da413e15 	stw	r9,1272(sp)
10003ad0:	00047f00 	call	100047f0 <_dtoa_r>
10003ad4:	d8813115 	stw	r2,1220(sp)
10003ad8:	008019c4 	movi	r2,103
10003adc:	da013f17 	ldw	r8,1276(sp)
10003ae0:	da413e17 	ldw	r9,1272(sp)
10003ae4:	80800226 	beq	r16,r2,10003af0 <___vfprintf_internal_r+0x1778>
10003ae8:	008011c4 	movi	r2,71
10003aec:	8081451e 	bne	r16,r2,10004004 <___vfprintf_internal_r+0x1c8c>
10003af0:	e080004c 	andi	r2,fp,1
10003af4:	10021e26 	beq	r2,zero,10004370 <___vfprintf_internal_r+0x1ff8>
10003af8:	d8c13117 	ldw	r3,1220(sp)
10003afc:	1d55883a 	add	r10,r3,r21
10003b00:	d9013717 	ldw	r4,1244(sp)
10003b04:	880b883a 	mov	r5,r17
10003b08:	000d883a 	mov	r6,zero
10003b0c:	000f883a 	mov	r7,zero
10003b10:	da013f15 	stw	r8,1276(sp)
10003b14:	da413e15 	stw	r9,1272(sp)
10003b18:	da813d15 	stw	r10,1268(sp)
10003b1c:	000d5300 	call	1000d530 <__eqdf2>
10003b20:	da013f17 	ldw	r8,1276(sp)
10003b24:	da413e17 	ldw	r9,1272(sp)
10003b28:	da813d17 	ldw	r10,1268(sp)
10003b2c:	1001a126 	beq	r2,zero,100041b4 <___vfprintf_internal_r+0x1e3c>
10003b30:	d8812117 	ldw	r2,1156(sp)
10003b34:	1280062e 	bgeu	r2,r10,10003b50 <___vfprintf_internal_r+0x17d8>
10003b38:	01000c04 	movi	r4,48
10003b3c:	10c00044 	addi	r3,r2,1
10003b40:	d8c12115 	stw	r3,1156(sp)
10003b44:	11000005 	stb	r4,0(r2)
10003b48:	d8812117 	ldw	r2,1156(sp)
10003b4c:	12bffb36 	bltu	r2,r10,10003b3c <__alt_data_end+0xf8003b3c>
10003b50:	d8c13117 	ldw	r3,1220(sp)
10003b54:	10c5c83a 	sub	r2,r2,r3
10003b58:	d8813315 	stw	r2,1228(sp)
10003b5c:	008011c4 	movi	r2,71
10003b60:	98818926 	beq	r19,r2,10004188 <___vfprintf_internal_r+0x1e10>
10003b64:	00801944 	movi	r2,101
10003b68:	14023c0e 	bge	r2,r16,1000445c <___vfprintf_internal_r+0x20e4>
10003b6c:	d8c12617 	ldw	r3,1176(sp)
10003b70:	00801984 	movi	r2,102
10003b74:	d8c13415 	stw	r3,1232(sp)
10003b78:	8081ef26 	beq	r16,r2,10004338 <___vfprintf_internal_r+0x1fc0>
10003b7c:	d8c13417 	ldw	r3,1232(sp)
10003b80:	d9013317 	ldw	r4,1228(sp)
10003b84:	1901e316 	blt	r3,r4,10004314 <___vfprintf_internal_r+0x1f9c>
10003b88:	e080004c 	andi	r2,fp,1
10003b8c:	1001f426 	beq	r2,zero,10004360 <___vfprintf_internal_r+0x1fe8>
10003b90:	d8c13417 	ldw	r3,1232(sp)
10003b94:	1c400044 	addi	r17,r3,1
10003b98:	8839883a 	mov	fp,r17
10003b9c:	8801e416 	blt	r17,zero,10004330 <___vfprintf_internal_r+0x1fb8>
10003ba0:	dd412b07 	ldb	r21,1196(sp)
10003ba4:	a801701e 	bne	r21,zero,10004168 <___vfprintf_internal_r+0x1df0>
10003ba8:	df012b15 	stw	fp,1196(sp)
10003bac:	dcc12783 	ldbu	r19,1182(sp)
10003bb0:	df012d17 	ldw	fp,1204(sp)
10003bb4:	d8013215 	stw	zero,1224(sp)
10003bb8:	dc812d15 	stw	r18,1204(sp)
10003bbc:	003b6e06 	br	10002978 <__alt_data_end+0xf8002978>
10003bc0:	e080040c 	andi	r2,fp,16
10003bc4:	1000b51e 	bne	r2,zero,10003e9c <___vfprintf_internal_r+0x1b24>
10003bc8:	e080100c 	andi	r2,fp,64
10003bcc:	10015b26 	beq	r2,zero,1000413c <___vfprintf_internal_r+0x1dc4>
10003bd0:	d9012d17 	ldw	r4,1204(sp)
10003bd4:	d9412f17 	ldw	r5,1212(sp)
10003bd8:	20800017 	ldw	r2,0(r4)
10003bdc:	21000104 	addi	r4,r4,4
10003be0:	d9012d15 	stw	r4,1204(sp)
10003be4:	1140000d 	sth	r5,0(r2)
10003be8:	003a2006 	br	1000246c <__alt_data_end+0xf800246c>
10003bec:	e0c0100c 	andi	r3,fp,64
10003bf0:	1800a226 	beq	r3,zero,10003e7c <___vfprintf_internal_r+0x1b04>
10003bf4:	d8c12d17 	ldw	r3,1204(sp)
10003bf8:	1480000b 	ldhu	r18,0(r2)
10003bfc:	002b883a 	mov	r21,zero
10003c00:	18c00104 	addi	r3,r3,4
10003c04:	d8c12d15 	stw	r3,1204(sp)
10003c08:	0005883a 	mov	r2,zero
10003c0c:	9007883a 	mov	r3,r18
10003c10:	003c6906 	br	10002db8 <__alt_data_end+0xf8002db8>
10003c14:	e0c0100c 	andi	r3,fp,64
10003c18:	18009026 	beq	r3,zero,10003e5c <___vfprintf_internal_r+0x1ae4>
10003c1c:	1480000b 	ldhu	r18,0(r2)
10003c20:	d8812d17 	ldw	r2,1204(sp)
10003c24:	002b883a 	mov	r21,zero
10003c28:	9007883a 	mov	r3,r18
10003c2c:	10800104 	addi	r2,r2,4
10003c30:	d8812d15 	stw	r2,1204(sp)
10003c34:	00800044 	movi	r2,1
10003c38:	003c5f06 	br	10002db8 <__alt_data_end+0xf8002db8>
10003c3c:	e0c0100c 	andi	r3,fp,64
10003c40:	18008026 	beq	r3,zero,10003e44 <___vfprintf_internal_r+0x1acc>
10003c44:	d9012d17 	ldw	r4,1204(sp)
10003c48:	1480000b 	ldhu	r18,0(r2)
10003c4c:	002b883a 	mov	r21,zero
10003c50:	21000104 	addi	r4,r4,4
10003c54:	d9012d15 	stw	r4,1204(sp)
10003c58:	003c7906 	br	10002e40 <__alt_data_end+0xf8002e40>
10003c5c:	e080100c 	andi	r2,fp,64
10003c60:	10007126 	beq	r2,zero,10003e28 <___vfprintf_internal_r+0x1ab0>
10003c64:	1c80000f 	ldh	r18,0(r3)
10003c68:	d8812d17 	ldw	r2,1204(sp)
10003c6c:	902bd7fa 	srai	r21,r18,31
10003c70:	10800104 	addi	r2,r2,4
10003c74:	d8812d15 	stw	r2,1204(sp)
10003c78:	a805883a 	mov	r2,r21
10003c7c:	003b1a06 	br	100028e8 <__alt_data_end+0xf80028e8>
10003c80:	e4000007 	ldb	r16,0(fp)
10003c84:	e005883a 	mov	r2,fp
10003c88:	003a2306 	br	10002518 <__alt_data_end+0xf8002518>
10003c8c:	00800084 	movi	r2,2
10003c90:	003c4906 	br	10002db8 <__alt_data_end+0xf8002db8>
10003c94:	01040074 	movhi	r4,4097
10003c98:	2106c484 	addi	r4,r4,6930
10003c9c:	d9012c15 	stw	r4,1200(sp)
10003ca0:	d9012c17 	ldw	r4,1200(sp)
10003ca4:	1c47883a 	add	r3,r3,r17
10003ca8:	10800044 	addi	r2,r2,1
10003cac:	41000015 	stw	r4,0(r8)
10003cb0:	44400115 	stw	r17,4(r8)
10003cb4:	d8c12015 	stw	r3,1152(sp)
10003cb8:	d8811f15 	stw	r2,1148(sp)
10003cbc:	010001c4 	movi	r4,7
10003cc0:	20becc16 	blt	r4,r2,100037f4 <__alt_data_end+0xf80037f4>
10003cc4:	42000204 	addi	r8,r8,8
10003cc8:	003ed106 	br	10003810 <__alt_data_end+0xf8003810>
10003ccc:	01040074 	movhi	r4,4097
10003cd0:	2106c484 	addi	r4,r4,6930
10003cd4:	d9012c15 	stw	r4,1200(sp)
10003cd8:	003ba306 	br	10002b68 <__alt_data_end+0xf8002b68>
10003cdc:	b809883a 	mov	r4,r23
10003ce0:	b00b883a 	mov	r5,r22
10003ce4:	d9811e04 	addi	r6,sp,1144
10003ce8:	00097b80 	call	100097b8 <__sprint_r>
10003cec:	103aba1e 	bne	r2,zero,100027d8 <__alt_data_end+0xf80027d8>
10003cf0:	d8c12017 	ldw	r3,1152(sp)
10003cf4:	da000404 	addi	r8,sp,16
10003cf8:	003d6c06 	br	100032ac <__alt_data_end+0xf80032ac>
10003cfc:	d8811f17 	ldw	r2,1148(sp)
10003d00:	01440074 	movhi	r5,4097
10003d04:	01000044 	movi	r4,1
10003d08:	18c00044 	addi	r3,r3,1
10003d0c:	10800044 	addi	r2,r2,1
10003d10:	2946c404 	addi	r5,r5,6928
10003d14:	41000115 	stw	r4,4(r8)
10003d18:	41400015 	stw	r5,0(r8)
10003d1c:	d8c12015 	stw	r3,1152(sp)
10003d20:	d8811f15 	stw	r2,1148(sp)
10003d24:	010001c4 	movi	r4,7
10003d28:	20806716 	blt	r4,r2,10003ec8 <___vfprintf_internal_r+0x1b50>
10003d2c:	42000204 	addi	r8,r8,8
10003d30:	8000041e 	bne	r16,zero,10003d44 <___vfprintf_internal_r+0x19cc>
10003d34:	d8813317 	ldw	r2,1228(sp)
10003d38:	1000021e 	bne	r2,zero,10003d44 <___vfprintf_internal_r+0x19cc>
10003d3c:	e080004c 	andi	r2,fp,1
10003d40:	103ba026 	beq	r2,zero,10002bc4 <__alt_data_end+0xf8002bc4>
10003d44:	d9013817 	ldw	r4,1248(sp)
10003d48:	d8811f17 	ldw	r2,1148(sp)
10003d4c:	d9413517 	ldw	r5,1236(sp)
10003d50:	1907883a 	add	r3,r3,r4
10003d54:	10800044 	addi	r2,r2,1
10003d58:	41000115 	stw	r4,4(r8)
10003d5c:	41400015 	stw	r5,0(r8)
10003d60:	d8c12015 	stw	r3,1152(sp)
10003d64:	d8811f15 	stw	r2,1148(sp)
10003d68:	010001c4 	movi	r4,7
10003d6c:	20815716 	blt	r4,r2,100042cc <___vfprintf_internal_r+0x1f54>
10003d70:	42000204 	addi	r8,r8,8
10003d74:	0421c83a 	sub	r16,zero,r16
10003d78:	0400810e 	bge	zero,r16,10003f80 <___vfprintf_internal_r+0x1c08>
10003d7c:	04400404 	movi	r17,16
10003d80:	8c00bd0e 	bge	r17,r16,10004078 <___vfprintf_internal_r+0x1d00>
10003d84:	01440074 	movhi	r5,4097
10003d88:	2946c484 	addi	r5,r5,6930
10003d8c:	d9412c15 	stw	r5,1200(sp)
10003d90:	04c001c4 	movi	r19,7
10003d94:	00000306 	br	10003da4 <___vfprintf_internal_r+0x1a2c>
10003d98:	42000204 	addi	r8,r8,8
10003d9c:	843ffc04 	addi	r16,r16,-16
10003da0:	8c00b80e 	bge	r17,r16,10004084 <___vfprintf_internal_r+0x1d0c>
10003da4:	18c00404 	addi	r3,r3,16
10003da8:	10800044 	addi	r2,r2,1
10003dac:	45000015 	stw	r20,0(r8)
10003db0:	44400115 	stw	r17,4(r8)
10003db4:	d8c12015 	stw	r3,1152(sp)
10003db8:	d8811f15 	stw	r2,1148(sp)
10003dbc:	98bff60e 	bge	r19,r2,10003d98 <__alt_data_end+0xf8003d98>
10003dc0:	b809883a 	mov	r4,r23
10003dc4:	b00b883a 	mov	r5,r22
10003dc8:	d9811e04 	addi	r6,sp,1144
10003dcc:	00097b80 	call	100097b8 <__sprint_r>
10003dd0:	103a811e 	bne	r2,zero,100027d8 <__alt_data_end+0xf80027d8>
10003dd4:	d8c12017 	ldw	r3,1152(sp)
10003dd8:	d8811f17 	ldw	r2,1148(sp)
10003ddc:	da000404 	addi	r8,sp,16
10003de0:	003fee06 	br	10003d9c <__alt_data_end+0xf8003d9c>
10003de4:	008011c4 	movi	r2,71
10003de8:	1400db16 	blt	r2,r16,10004158 <___vfprintf_internal_r+0x1de0>
10003dec:	01040074 	movhi	r4,4097
10003df0:	2106b604 	addi	r4,r4,6872
10003df4:	d9013115 	stw	r4,1220(sp)
10003df8:	00c000c4 	movi	r3,3
10003dfc:	00bfdfc4 	movi	r2,-129
10003e00:	d8c12b15 	stw	r3,1196(sp)
10003e04:	e0b8703a 	and	fp,fp,r2
10003e08:	dcc12783 	ldbu	r19,1182(sp)
10003e0c:	dc812d15 	stw	r18,1204(sp)
10003e10:	1823883a 	mov	r17,r3
10003e14:	d8013215 	stw	zero,1224(sp)
10003e18:	d8013415 	stw	zero,1232(sp)
10003e1c:	003ad606 	br	10002978 <__alt_data_end+0xf8002978>
10003e20:	4823883a 	mov	r17,r9
10003e24:	003cc906 	br	1000314c <__alt_data_end+0xf800314c>
10003e28:	1c800017 	ldw	r18,0(r3)
10003e2c:	d8c12d17 	ldw	r3,1204(sp)
10003e30:	902bd7fa 	srai	r21,r18,31
10003e34:	18c00104 	addi	r3,r3,4
10003e38:	d8c12d15 	stw	r3,1204(sp)
10003e3c:	a805883a 	mov	r2,r21
10003e40:	003aa906 	br	100028e8 <__alt_data_end+0xf80028e8>
10003e44:	d9412d17 	ldw	r5,1204(sp)
10003e48:	14800017 	ldw	r18,0(r2)
10003e4c:	002b883a 	mov	r21,zero
10003e50:	29400104 	addi	r5,r5,4
10003e54:	d9412d15 	stw	r5,1204(sp)
10003e58:	003bf906 	br	10002e40 <__alt_data_end+0xf8002e40>
10003e5c:	d8c12d17 	ldw	r3,1204(sp)
10003e60:	14800017 	ldw	r18,0(r2)
10003e64:	002b883a 	mov	r21,zero
10003e68:	18c00104 	addi	r3,r3,4
10003e6c:	d8c12d15 	stw	r3,1204(sp)
10003e70:	00800044 	movi	r2,1
10003e74:	9007883a 	mov	r3,r18
10003e78:	003bcf06 	br	10002db8 <__alt_data_end+0xf8002db8>
10003e7c:	d9012d17 	ldw	r4,1204(sp)
10003e80:	14800017 	ldw	r18,0(r2)
10003e84:	002b883a 	mov	r21,zero
10003e88:	21000104 	addi	r4,r4,4
10003e8c:	d9012d15 	stw	r4,1204(sp)
10003e90:	0005883a 	mov	r2,zero
10003e94:	9007883a 	mov	r3,r18
10003e98:	003bc706 	br	10002db8 <__alt_data_end+0xf8002db8>
10003e9c:	d9412d17 	ldw	r5,1204(sp)
10003ea0:	d8c12f17 	ldw	r3,1212(sp)
10003ea4:	28800017 	ldw	r2,0(r5)
10003ea8:	29400104 	addi	r5,r5,4
10003eac:	d9412d15 	stw	r5,1204(sp)
10003eb0:	10c00015 	stw	r3,0(r2)
10003eb4:	00396d06 	br	1000246c <__alt_data_end+0xf800246c>
10003eb8:	01040074 	movhi	r4,4097
10003ebc:	2106b404 	addi	r4,r4,6864
10003ec0:	d9013115 	stw	r4,1220(sp)
10003ec4:	003ba206 	br	10002d50 <__alt_data_end+0xf8002d50>
10003ec8:	b809883a 	mov	r4,r23
10003ecc:	b00b883a 	mov	r5,r22
10003ed0:	d9811e04 	addi	r6,sp,1144
10003ed4:	00097b80 	call	100097b8 <__sprint_r>
10003ed8:	103a3f1e 	bne	r2,zero,100027d8 <__alt_data_end+0xf80027d8>
10003edc:	dc012617 	ldw	r16,1176(sp)
10003ee0:	d8c12017 	ldw	r3,1152(sp)
10003ee4:	da000404 	addi	r8,sp,16
10003ee8:	003f9106 	br	10003d30 <__alt_data_end+0xf8003d30>
10003eec:	e0800044 	addi	r2,fp,1
10003ef0:	9cc00814 	ori	r19,r19,32
10003ef4:	e4000047 	ldb	r16,1(fp)
10003ef8:	00398706 	br	10002518 <__alt_data_end+0xf8002518>
10003efc:	d8812e17 	ldw	r2,1208(sp)
10003f00:	d8c12d15 	stw	r3,1204(sp)
10003f04:	0085c83a 	sub	r2,zero,r2
10003f08:	d8812e15 	stw	r2,1208(sp)
10003f0c:	e005883a 	mov	r2,fp
10003f10:	003a3a06 	br	100027fc <__alt_data_end+0xf80027fc>
10003f14:	b809883a 	mov	r4,r23
10003f18:	b00b883a 	mov	r5,r22
10003f1c:	d9811e04 	addi	r6,sp,1144
10003f20:	00097b80 	call	100097b8 <__sprint_r>
10003f24:	103a2c1e 	bne	r2,zero,100027d8 <__alt_data_end+0xf80027d8>
10003f28:	d8c12017 	ldw	r3,1152(sp)
10003f2c:	da000404 	addi	r8,sp,16
10003f30:	003cf006 	br	100032f4 <__alt_data_end+0xf80032f4>
10003f34:	d8c12817 	ldw	r3,1184(sp)
10003f38:	d9013117 	ldw	r4,1220(sp)
10003f3c:	1923c83a 	sub	r17,r3,r4
10003f40:	003a8806 	br	10002964 <__alt_data_end+0xf8002964>
10003f44:	da013f15 	stw	r8,1276(sp)
10003f48:	00022e00 	call	100022e0 <strlen>
10003f4c:	1023883a 	mov	r17,r2
10003f50:	da013f17 	ldw	r8,1276(sp)
10003f54:	883c7f0e 	bge	r17,zero,10003154 <__alt_data_end+0xf8003154>
10003f58:	0005883a 	mov	r2,zero
10003f5c:	003c7d06 	br	10003154 <__alt_data_end+0xf8003154>
10003f60:	b809883a 	mov	r4,r23
10003f64:	b00b883a 	mov	r5,r22
10003f68:	d9811e04 	addi	r6,sp,1144
10003f6c:	00097b80 	call	100097b8 <__sprint_r>
10003f70:	103a191e 	bne	r2,zero,100027d8 <__alt_data_end+0xf80027d8>
10003f74:	d8c12017 	ldw	r3,1152(sp)
10003f78:	d8811f17 	ldw	r2,1148(sp)
10003f7c:	da000404 	addi	r8,sp,16
10003f80:	d9413317 	ldw	r5,1228(sp)
10003f84:	d9013117 	ldw	r4,1220(sp)
10003f88:	10800044 	addi	r2,r2,1
10003f8c:	28c7883a 	add	r3,r5,r3
10003f90:	41000015 	stw	r4,0(r8)
10003f94:	41400115 	stw	r5,4(r8)
10003f98:	d8c12015 	stw	r3,1152(sp)
10003f9c:	d8811f15 	stw	r2,1148(sp)
10003fa0:	010001c4 	movi	r4,7
10003fa4:	20bb060e 	bge	r4,r2,10002bc0 <__alt_data_end+0xf8002bc0>
10003fa8:	003d6206 	br	10003534 <__alt_data_end+0xf8003534>
10003fac:	01040074 	movhi	r4,4097
10003fb0:	2106c884 	addi	r4,r4,6946
10003fb4:	d9013615 	stw	r4,1240(sp)
10003fb8:	003aa306 	br	10002a48 <__alt_data_end+0xf8002a48>
10003fbc:	d8812604 	addi	r2,sp,1176
10003fc0:	d8800115 	stw	r2,4(sp)
10003fc4:	d9413717 	ldw	r5,1244(sp)
10003fc8:	d8812504 	addi	r2,sp,1172
10003fcc:	d8800215 	stw	r2,8(sp)
10003fd0:	d8812104 	addi	r2,sp,1156
10003fd4:	da400015 	stw	r9,0(sp)
10003fd8:	d8800315 	stw	r2,12(sp)
10003fdc:	b809883a 	mov	r4,r23
10003fe0:	880d883a 	mov	r6,r17
10003fe4:	01c000c4 	movi	r7,3
10003fe8:	da013f15 	stw	r8,1276(sp)
10003fec:	da413e15 	stw	r9,1272(sp)
10003ff0:	00047f00 	call	100047f0 <_dtoa_r>
10003ff4:	da413e17 	ldw	r9,1272(sp)
10003ff8:	da013f17 	ldw	r8,1276(sp)
10003ffc:	d8813115 	stw	r2,1220(sp)
10004000:	482b883a 	mov	r21,r9
10004004:	d8c13117 	ldw	r3,1220(sp)
10004008:	00801184 	movi	r2,70
1000400c:	1d55883a 	add	r10,r3,r21
10004010:	98bebb1e 	bne	r19,r2,10003b00 <__alt_data_end+0xf8003b00>
10004014:	19000007 	ldb	r4,0(r3)
10004018:	00800c04 	movi	r2,48
1000401c:	2080dd26 	beq	r4,r2,10004394 <___vfprintf_internal_r+0x201c>
10004020:	d8c12617 	ldw	r3,1176(sp)
10004024:	50d5883a 	add	r10,r10,r3
10004028:	003eb506 	br	10003b00 <__alt_data_end+0xf8003b00>
1000402c:	0023883a 	mov	r17,zero
10004030:	003d9b06 	br	100036a0 <__alt_data_end+0xf80036a0>
10004034:	b809883a 	mov	r4,r23
10004038:	b00b883a 	mov	r5,r22
1000403c:	d9811e04 	addi	r6,sp,1144
10004040:	00097b80 	call	100097b8 <__sprint_r>
10004044:	1039e41e 	bne	r2,zero,100027d8 <__alt_data_end+0xf80027d8>
10004048:	d8c12017 	ldw	r3,1152(sp)
1000404c:	da000404 	addi	r8,sp,16
10004050:	003d9206 	br	1000369c <__alt_data_end+0xf800369c>
10004054:	b809883a 	mov	r4,r23
10004058:	b00b883a 	mov	r5,r22
1000405c:	d9811e04 	addi	r6,sp,1144
10004060:	00097b80 	call	100097b8 <__sprint_r>
10004064:	1039dc1e 	bne	r2,zero,100027d8 <__alt_data_end+0xf80027d8>
10004068:	d8812617 	ldw	r2,1176(sp)
1000406c:	d8c12017 	ldw	r3,1152(sp)
10004070:	da000404 	addi	r8,sp,16
10004074:	003dfb06 	br	10003864 <__alt_data_end+0xf8003864>
10004078:	01040074 	movhi	r4,4097
1000407c:	2106c484 	addi	r4,r4,6930
10004080:	d9012c15 	stw	r4,1200(sp)
10004084:	d9012c17 	ldw	r4,1200(sp)
10004088:	1c07883a 	add	r3,r3,r16
1000408c:	10800044 	addi	r2,r2,1
10004090:	41000015 	stw	r4,0(r8)
10004094:	44000115 	stw	r16,4(r8)
10004098:	d8c12015 	stw	r3,1152(sp)
1000409c:	d8811f15 	stw	r2,1148(sp)
100040a0:	010001c4 	movi	r4,7
100040a4:	20bfae16 	blt	r4,r2,10003f60 <__alt_data_end+0xf8003f60>
100040a8:	42000204 	addi	r8,r8,8
100040ac:	003fb406 	br	10003f80 <__alt_data_end+0xf8003f80>
100040b0:	0021883a 	mov	r16,zero
100040b4:	003dfd06 	br	100038ac <__alt_data_end+0xf80038ac>
100040b8:	01440074 	movhi	r5,4097
100040bc:	2946c884 	addi	r5,r5,6946
100040c0:	d9413615 	stw	r5,1240(sp)
100040c4:	003ae306 	br	10002c54 <__alt_data_end+0xf8002c54>
100040c8:	b809883a 	mov	r4,r23
100040cc:	b00b883a 	mov	r5,r22
100040d0:	d9811e04 	addi	r6,sp,1144
100040d4:	00097b80 	call	100097b8 <__sprint_r>
100040d8:	1039bf1e 	bne	r2,zero,100027d8 <__alt_data_end+0xf80027d8>
100040dc:	d8812617 	ldw	r2,1176(sp)
100040e0:	d9413317 	ldw	r5,1228(sp)
100040e4:	d8c12017 	ldw	r3,1152(sp)
100040e8:	da000404 	addi	r8,sp,16
100040ec:	2885c83a 	sub	r2,r5,r2
100040f0:	003ded06 	br	100038a8 <__alt_data_end+0xf80038a8>
100040f4:	00800184 	movi	r2,6
100040f8:	1240012e 	bgeu	r2,r9,10004100 <___vfprintf_internal_r+0x1d88>
100040fc:	1013883a 	mov	r9,r2
10004100:	4823883a 	mov	r17,r9
10004104:	4805883a 	mov	r2,r9
10004108:	4800b216 	blt	r9,zero,100043d4 <___vfprintf_internal_r+0x205c>
1000410c:	01440074 	movhi	r5,4097
10004110:	2946c204 	addi	r5,r5,6920
10004114:	d8812b15 	stw	r2,1196(sp)
10004118:	dc812d15 	stw	r18,1204(sp)
1000411c:	d8013215 	stw	zero,1224(sp)
10004120:	d8013415 	stw	zero,1232(sp)
10004124:	d9413115 	stw	r5,1220(sp)
10004128:	0005883a 	mov	r2,zero
1000412c:	003a1906 	br	10002994 <__alt_data_end+0xf8002994>
10004130:	04c00b44 	movi	r19,45
10004134:	dcc12785 	stb	r19,1182(sp)
10004138:	003b0006 	br	10002d3c <__alt_data_end+0xf8002d3c>
1000413c:	d8c12d17 	ldw	r3,1204(sp)
10004140:	d9012f17 	ldw	r4,1212(sp)
10004144:	18800017 	ldw	r2,0(r3)
10004148:	18c00104 	addi	r3,r3,4
1000414c:	d8c12d15 	stw	r3,1204(sp)
10004150:	11000015 	stw	r4,0(r2)
10004154:	0038c506 	br	1000246c <__alt_data_end+0xf800246c>
10004158:	01440074 	movhi	r5,4097
1000415c:	2946b704 	addi	r5,r5,6876
10004160:	d9413115 	stw	r5,1220(sp)
10004164:	003f2406 	br	10003df8 <__alt_data_end+0xf8003df8>
10004168:	00800b44 	movi	r2,45
1000416c:	d8812785 	stb	r2,1182(sp)
10004170:	df012b15 	stw	fp,1196(sp)
10004174:	d8013215 	stw	zero,1224(sp)
10004178:	df012d17 	ldw	fp,1204(sp)
1000417c:	00800b44 	movi	r2,45
10004180:	dc812d15 	stw	r18,1204(sp)
10004184:	003a0006 	br	10002988 <__alt_data_end+0xf8002988>
10004188:	d8c12617 	ldw	r3,1176(sp)
1000418c:	00bfff44 	movi	r2,-3
10004190:	18800a16 	blt	r3,r2,100041bc <___vfprintf_internal_r+0x1e44>
10004194:	48c00916 	blt	r9,r3,100041bc <___vfprintf_internal_r+0x1e44>
10004198:	d8c13415 	stw	r3,1232(sp)
1000419c:	040019c4 	movi	r16,103
100041a0:	003e7606 	br	10003b7c <__alt_data_end+0xf8003b7c>
100041a4:	01040074 	movhi	r4,4097
100041a8:	2106c484 	addi	r4,r4,6930
100041ac:	d9012c15 	stw	r4,1200(sp)
100041b0:	003c8e06 	br	100033ec <__alt_data_end+0xf80033ec>
100041b4:	5005883a 	mov	r2,r10
100041b8:	003e6506 	br	10003b50 <__alt_data_end+0xf8003b50>
100041bc:	843fff84 	addi	r16,r16,-2
100041c0:	1d7fffc4 	addi	r21,r3,-1
100041c4:	dd412615 	stw	r21,1176(sp)
100041c8:	dc0122c5 	stb	r16,1163(sp)
100041cc:	a8009216 	blt	r21,zero,10004418 <___vfprintf_internal_r+0x20a0>
100041d0:	00800ac4 	movi	r2,43
100041d4:	d8812305 	stb	r2,1164(sp)
100041d8:	00800244 	movi	r2,9
100041dc:	1540660e 	bge	r2,r21,10004378 <___vfprintf_internal_r+0x2000>
100041e0:	dcc122c4 	addi	r19,sp,1163
100041e4:	dc012c15 	stw	r16,1200(sp)
100041e8:	4023883a 	mov	r17,r8
100041ec:	9821883a 	mov	r16,r19
100041f0:	a809883a 	mov	r4,r21
100041f4:	01400284 	movi	r5,10
100041f8:	000c2800 	call	1000c280 <__modsi3>
100041fc:	10800c04 	addi	r2,r2,48
10004200:	843fffc4 	addi	r16,r16,-1
10004204:	a809883a 	mov	r4,r21
10004208:	01400284 	movi	r5,10
1000420c:	80800005 	stb	r2,0(r16)
10004210:	000c22c0 	call	1000c22c <__divsi3>
10004214:	01000244 	movi	r4,9
10004218:	102b883a 	mov	r21,r2
1000421c:	20bff416 	blt	r4,r2,100041f0 <__alt_data_end+0xf80041f0>
10004220:	8811883a 	mov	r8,r17
10004224:	10800c04 	addi	r2,r2,48
10004228:	8023883a 	mov	r17,r16
1000422c:	897fffc4 	addi	r5,r17,-1
10004230:	88bfffc5 	stb	r2,-1(r17)
10004234:	dc012c17 	ldw	r16,1200(sp)
10004238:	2cc08a2e 	bgeu	r5,r19,10004464 <___vfprintf_internal_r+0x20ec>
1000423c:	d9812384 	addi	r6,sp,1166
10004240:	344dc83a 	sub	r6,r6,r17
10004244:	d9012344 	addi	r4,sp,1165
10004248:	998d883a 	add	r6,r19,r6
1000424c:	00000106 	br	10004254 <___vfprintf_internal_r+0x1edc>
10004250:	28800003 	ldbu	r2,0(r5)
10004254:	20800005 	stb	r2,0(r4)
10004258:	21000044 	addi	r4,r4,1
1000425c:	29400044 	addi	r5,r5,1
10004260:	21bffb1e 	bne	r4,r6,10004250 <__alt_data_end+0xf8004250>
10004264:	d8812304 	addi	r2,sp,1164
10004268:	1445c83a 	sub	r2,r2,r17
1000426c:	d9412344 	addi	r5,sp,1165
10004270:	2885883a 	add	r2,r5,r2
10004274:	14e7c83a 	sub	r19,r2,r19
10004278:	d8813317 	ldw	r2,1228(sp)
1000427c:	d8c13317 	ldw	r3,1228(sp)
10004280:	dcc13a15 	stw	r19,1256(sp)
10004284:	14e3883a 	add	r17,r2,r19
10004288:	00800044 	movi	r2,1
1000428c:	10c0550e 	bge	r2,r3,100043e4 <___vfprintf_internal_r+0x206c>
10004290:	8c400044 	addi	r17,r17,1
10004294:	8839883a 	mov	fp,r17
10004298:	88005016 	blt	r17,zero,100043dc <___vfprintf_internal_r+0x2064>
1000429c:	d8013415 	stw	zero,1232(sp)
100042a0:	003e3f06 	br	10003ba0 <__alt_data_end+0xf8003ba0>
100042a4:	da412b15 	stw	r9,1196(sp)
100042a8:	dcc12783 	ldbu	r19,1182(sp)
100042ac:	4823883a 	mov	r17,r9
100042b0:	dc812d15 	stw	r18,1204(sp)
100042b4:	d8013215 	stw	zero,1224(sp)
100042b8:	d8013415 	stw	zero,1232(sp)
100042bc:	0039ae06 	br	10002978 <__alt_data_end+0xf8002978>
100042c0:	483de91e 	bne	r9,zero,10003a68 <__alt_data_end+0xf8003a68>
100042c4:	8813883a 	mov	r9,r17
100042c8:	003de706 	br	10003a68 <__alt_data_end+0xf8003a68>
100042cc:	b809883a 	mov	r4,r23
100042d0:	b00b883a 	mov	r5,r22
100042d4:	d9811e04 	addi	r6,sp,1144
100042d8:	00097b80 	call	100097b8 <__sprint_r>
100042dc:	10393e1e 	bne	r2,zero,100027d8 <__alt_data_end+0xf80027d8>
100042e0:	dc012617 	ldw	r16,1176(sp)
100042e4:	d8c12017 	ldw	r3,1152(sp)
100042e8:	d8811f17 	ldw	r2,1148(sp)
100042ec:	da000404 	addi	r8,sp,16
100042f0:	003ea006 	br	10003d74 <__alt_data_end+0xf8003d74>
100042f4:	00c00b44 	movi	r3,45
100042f8:	2460003c 	xorhi	r17,r4,32768
100042fc:	d8c12b05 	stb	r3,1196(sp)
10004300:	003ddf06 	br	10003a80 <__alt_data_end+0xf8003a80>
10004304:	02400184 	movi	r9,6
10004308:	003dd706 	br	10003a68 <__alt_data_end+0xf8003a68>
1000430c:	4d400044 	addi	r21,r9,1
10004310:	003de206 	br	10003a9c <__alt_data_end+0xf8003a9c>
10004314:	d8c13417 	ldw	r3,1232(sp)
10004318:	00c0490e 	bge	zero,r3,10004440 <___vfprintf_internal_r+0x20c8>
1000431c:	04400044 	movi	r17,1
10004320:	d9013317 	ldw	r4,1228(sp)
10004324:	8923883a 	add	r17,r17,r4
10004328:	8839883a 	mov	fp,r17
1000432c:	883e1c0e 	bge	r17,zero,10003ba0 <__alt_data_end+0xf8003ba0>
10004330:	0039883a 	mov	fp,zero
10004334:	003e1a06 	br	10003ba0 <__alt_data_end+0xf8003ba0>
10004338:	00c03b0e 	bge	zero,r3,10004428 <___vfprintf_internal_r+0x20b0>
1000433c:	4800021e 	bne	r9,zero,10004348 <___vfprintf_internal_r+0x1fd0>
10004340:	e080004c 	andi	r2,fp,1
10004344:	10000626 	beq	r2,zero,10004360 <___vfprintf_internal_r+0x1fe8>
10004348:	d8c13417 	ldw	r3,1232(sp)
1000434c:	4a400044 	addi	r9,r9,1
10004350:	1a63883a 	add	r17,r3,r9
10004354:	8839883a 	mov	fp,r17
10004358:	883e110e 	bge	r17,zero,10003ba0 <__alt_data_end+0xf8003ba0>
1000435c:	003ff406 	br	10004330 <__alt_data_end+0xf8004330>
10004360:	1839883a 	mov	fp,r3
10004364:	18004116 	blt	r3,zero,1000446c <___vfprintf_internal_r+0x20f4>
10004368:	dc413417 	ldw	r17,1232(sp)
1000436c:	003e0c06 	br	10003ba0 <__alt_data_end+0xf8003ba0>
10004370:	d8812117 	ldw	r2,1156(sp)
10004374:	003df606 	br	10003b50 <__alt_data_end+0xf8003b50>
10004378:	00800c04 	movi	r2,48
1000437c:	a8c00c04 	addi	r3,r21,48
10004380:	d8812345 	stb	r2,1165(sp)
10004384:	d8c12385 	stb	r3,1166(sp)
10004388:	d88123c4 	addi	r2,sp,1167
1000438c:	dcc122c4 	addi	r19,sp,1163
10004390:	003fb806 	br	10004274 <__alt_data_end+0xf8004274>
10004394:	d9013717 	ldw	r4,1244(sp)
10004398:	880b883a 	mov	r5,r17
1000439c:	000d883a 	mov	r6,zero
100043a0:	000f883a 	mov	r7,zero
100043a4:	da013f15 	stw	r8,1276(sp)
100043a8:	da413e15 	stw	r9,1272(sp)
100043ac:	da813d15 	stw	r10,1268(sp)
100043b0:	000d5300 	call	1000d530 <__eqdf2>
100043b4:	da013f17 	ldw	r8,1276(sp)
100043b8:	da413e17 	ldw	r9,1272(sp)
100043bc:	da813d17 	ldw	r10,1268(sp)
100043c0:	103f1726 	beq	r2,zero,10004020 <__alt_data_end+0xf8004020>
100043c4:	00800044 	movi	r2,1
100043c8:	1547c83a 	sub	r3,r2,r21
100043cc:	d8c12615 	stw	r3,1176(sp)
100043d0:	003f1406 	br	10004024 <__alt_data_end+0xf8004024>
100043d4:	0005883a 	mov	r2,zero
100043d8:	003f4c06 	br	1000410c <__alt_data_end+0xf800410c>
100043dc:	0039883a 	mov	fp,zero
100043e0:	003fae06 	br	1000429c <__alt_data_end+0xf800429c>
100043e4:	e084703a 	and	r2,fp,r2
100043e8:	103faa26 	beq	r2,zero,10004294 <__alt_data_end+0xf8004294>
100043ec:	003fa806 	br	10004290 <__alt_data_end+0xf8004290>
100043f0:	d9412d17 	ldw	r5,1204(sp)
100043f4:	2a400017 	ldw	r9,0(r5)
100043f8:	28c00104 	addi	r3,r5,4
100043fc:	d8c12d15 	stw	r3,1204(sp)
10004400:	483ebc0e 	bge	r9,zero,10003ef4 <__alt_data_end+0xf8003ef4>
10004404:	027fffc4 	movi	r9,-1
10004408:	e4000047 	ldb	r16,1(fp)
1000440c:	00384206 	br	10002518 <__alt_data_end+0xf8002518>
10004410:	043fffc4 	movi	r16,-1
10004414:	0038ce06 	br	10002750 <__alt_data_end+0xf8002750>
10004418:	00800b44 	movi	r2,45
1000441c:	056bc83a 	sub	r21,zero,r21
10004420:	d8812305 	stb	r2,1164(sp)
10004424:	003f6c06 	br	100041d8 <__alt_data_end+0xf80041d8>
10004428:	4800081e 	bne	r9,zero,1000444c <___vfprintf_internal_r+0x20d4>
1000442c:	e080004c 	andi	r2,fp,1
10004430:	1000061e 	bne	r2,zero,1000444c <___vfprintf_internal_r+0x20d4>
10004434:	07000044 	movi	fp,1
10004438:	e023883a 	mov	r17,fp
1000443c:	003dd806 	br	10003ba0 <__alt_data_end+0xf8003ba0>
10004440:	04400084 	movi	r17,2
10004444:	88e3c83a 	sub	r17,r17,r3
10004448:	003fb506 	br	10004320 <__alt_data_end+0xf8004320>
1000444c:	4c400084 	addi	r17,r9,2
10004450:	8839883a 	mov	fp,r17
10004454:	883dd20e 	bge	r17,zero,10003ba0 <__alt_data_end+0xf8003ba0>
10004458:	003fb506 	br	10004330 <__alt_data_end+0xf8004330>
1000445c:	d8c12617 	ldw	r3,1176(sp)
10004460:	003f5706 	br	100041c0 <__alt_data_end+0xf80041c0>
10004464:	d8812344 	addi	r2,sp,1165
10004468:	003f8206 	br	10004274 <__alt_data_end+0xf8004274>
1000446c:	0039883a 	mov	fp,zero
10004470:	003fbd06 	br	10004368 <__alt_data_end+0xf8004368>

10004474 <__vfprintf_internal>:
10004474:	2007883a 	mov	r3,r4
10004478:	01040074 	movhi	r4,4097
1000447c:	210e1f04 	addi	r4,r4,14460
10004480:	21000017 	ldw	r4,0(r4)
10004484:	2805883a 	mov	r2,r5
10004488:	300f883a 	mov	r7,r6
1000448c:	180b883a 	mov	r5,r3
10004490:	100d883a 	mov	r6,r2
10004494:	00023781 	jmpi	10002378 <___vfprintf_internal_r>

10004498 <__swsetup_r>:
10004498:	00840074 	movhi	r2,4097
1000449c:	defffd04 	addi	sp,sp,-12
100044a0:	108e1f04 	addi	r2,r2,14460
100044a4:	dc400115 	stw	r17,4(sp)
100044a8:	2023883a 	mov	r17,r4
100044ac:	11000017 	ldw	r4,0(r2)
100044b0:	dc000015 	stw	r16,0(sp)
100044b4:	dfc00215 	stw	ra,8(sp)
100044b8:	2821883a 	mov	r16,r5
100044bc:	20000226 	beq	r4,zero,100044c8 <__swsetup_r+0x30>
100044c0:	20c00e17 	ldw	r3,56(r4)
100044c4:	18002e26 	beq	r3,zero,10004580 <__swsetup_r+0xe8>
100044c8:	8080030b 	ldhu	r2,12(r16)
100044cc:	10c0020c 	andi	r3,r2,8
100044d0:	100d883a 	mov	r6,r2
100044d4:	18000f26 	beq	r3,zero,10004514 <__swsetup_r+0x7c>
100044d8:	80c00417 	ldw	r3,16(r16)
100044dc:	18001526 	beq	r3,zero,10004534 <__swsetup_r+0x9c>
100044e0:	1100004c 	andi	r4,r2,1
100044e4:	20001c1e 	bne	r4,zero,10004558 <__swsetup_r+0xc0>
100044e8:	1080008c 	andi	r2,r2,2
100044ec:	1000261e 	bne	r2,zero,10004588 <__swsetup_r+0xf0>
100044f0:	80800517 	ldw	r2,20(r16)
100044f4:	80800215 	stw	r2,8(r16)
100044f8:	18001c26 	beq	r3,zero,1000456c <__swsetup_r+0xd4>
100044fc:	0005883a 	mov	r2,zero
10004500:	dfc00217 	ldw	ra,8(sp)
10004504:	dc400117 	ldw	r17,4(sp)
10004508:	dc000017 	ldw	r16,0(sp)
1000450c:	dec00304 	addi	sp,sp,12
10004510:	f800283a 	ret
10004514:	3080040c 	andi	r2,r6,16
10004518:	10001726 	beq	r2,zero,10004578 <__swsetup_r+0xe0>
1000451c:	3080010c 	andi	r2,r6,4
10004520:	10001b1e 	bne	r2,zero,10004590 <__swsetup_r+0xf8>
10004524:	80c00417 	ldw	r3,16(r16)
10004528:	30800214 	ori	r2,r6,8
1000452c:	8080030d 	sth	r2,12(r16)
10004530:	183feb1e 	bne	r3,zero,100044e0 <__alt_data_end+0xf80044e0>
10004534:	1140a00c 	andi	r5,r2,640
10004538:	01008004 	movi	r4,512
1000453c:	293fe826 	beq	r5,r4,100044e0 <__alt_data_end+0xf80044e0>
10004540:	8809883a 	mov	r4,r17
10004544:	800b883a 	mov	r5,r16
10004548:	000702c0 	call	1000702c <__smakebuf_r>
1000454c:	8080030b 	ldhu	r2,12(r16)
10004550:	80c00417 	ldw	r3,16(r16)
10004554:	003fe206 	br	100044e0 <__alt_data_end+0xf80044e0>
10004558:	80800517 	ldw	r2,20(r16)
1000455c:	80000215 	stw	zero,8(r16)
10004560:	0085c83a 	sub	r2,zero,r2
10004564:	80800615 	stw	r2,24(r16)
10004568:	183fe41e 	bne	r3,zero,100044fc <__alt_data_end+0xf80044fc>
1000456c:	8080030b 	ldhu	r2,12(r16)
10004570:	1080200c 	andi	r2,r2,128
10004574:	103fe226 	beq	r2,zero,10004500 <__alt_data_end+0xf8004500>
10004578:	00bfffc4 	movi	r2,-1
1000457c:	003fe006 	br	10004500 <__alt_data_end+0xf8004500>
10004580:	00064d40 	call	100064d4 <__sinit>
10004584:	003fd006 	br	100044c8 <__alt_data_end+0xf80044c8>
10004588:	0005883a 	mov	r2,zero
1000458c:	003fd906 	br	100044f4 <__alt_data_end+0xf80044f4>
10004590:	81400c17 	ldw	r5,48(r16)
10004594:	28000626 	beq	r5,zero,100045b0 <__swsetup_r+0x118>
10004598:	80801004 	addi	r2,r16,64
1000459c:	28800326 	beq	r5,r2,100045ac <__swsetup_r+0x114>
100045a0:	8809883a 	mov	r4,r17
100045a4:	00066480 	call	10006648 <_free_r>
100045a8:	8180030b 	ldhu	r6,12(r16)
100045ac:	80000c15 	stw	zero,48(r16)
100045b0:	80c00417 	ldw	r3,16(r16)
100045b4:	00bff6c4 	movi	r2,-37
100045b8:	118c703a 	and	r6,r2,r6
100045bc:	80000115 	stw	zero,4(r16)
100045c0:	80c00015 	stw	r3,0(r16)
100045c4:	003fd806 	br	10004528 <__alt_data_end+0xf8004528>

100045c8 <quorem>:
100045c8:	defff204 	addi	sp,sp,-56
100045cc:	ddc00b15 	stw	r23,44(sp)
100045d0:	20800417 	ldw	r2,16(r4)
100045d4:	2dc00417 	ldw	r23,16(r5)
100045d8:	dfc00d15 	stw	ra,52(sp)
100045dc:	df000c15 	stw	fp,48(sp)
100045e0:	dd800a15 	stw	r22,40(sp)
100045e4:	dd400915 	stw	r21,36(sp)
100045e8:	dd000815 	stw	r20,32(sp)
100045ec:	dcc00715 	stw	r19,28(sp)
100045f0:	dc800615 	stw	r18,24(sp)
100045f4:	dc400515 	stw	r17,20(sp)
100045f8:	dc000415 	stw	r16,16(sp)
100045fc:	15c07a16 	blt	r2,r23,100047e8 <quorem+0x220>
10004600:	bdffffc4 	addi	r23,r23,-1
10004604:	bde9883a 	add	r20,r23,r23
10004608:	28c00504 	addi	r3,r5,20
1000460c:	a529883a 	add	r20,r20,r20
10004610:	1d39883a 	add	fp,r3,r20
10004614:	24c00504 	addi	r19,r4,20
10004618:	d9400215 	stw	r5,8(sp)
1000461c:	9d29883a 	add	r20,r19,r20
10004620:	e1400017 	ldw	r5,0(fp)
10004624:	d9000015 	stw	r4,0(sp)
10004628:	a1000017 	ldw	r4,0(r20)
1000462c:	29400044 	addi	r5,r5,1
10004630:	d8c00115 	stw	r3,4(sp)
10004634:	dd000315 	stw	r20,12(sp)
10004638:	000c2dc0 	call	1000c2dc <__udivsi3>
1000463c:	1025883a 	mov	r18,r2
10004640:	10003026 	beq	r2,zero,10004704 <quorem+0x13c>
10004644:	dc400117 	ldw	r17,4(sp)
10004648:	9829883a 	mov	r20,r19
1000464c:	002d883a 	mov	r22,zero
10004650:	0021883a 	mov	r16,zero
10004654:	8d400017 	ldw	r21,0(r17)
10004658:	900b883a 	mov	r5,r18
1000465c:	8c400104 	addi	r17,r17,4
10004660:	a93fffcc 	andi	r4,r21,65535
10004664:	000c2ec0 	call	1000c2ec <__mulsi3>
10004668:	a808d43a 	srli	r4,r21,16
1000466c:	900b883a 	mov	r5,r18
10004670:	b0ad883a 	add	r22,r22,r2
10004674:	000c2ec0 	call	1000c2ec <__mulsi3>
10004678:	a1000017 	ldw	r4,0(r20)
1000467c:	b00cd43a 	srli	r6,r22,16
10004680:	b0ffffcc 	andi	r3,r22,65535
10004684:	217fffcc 	andi	r5,r4,65535
10004688:	2c21883a 	add	r16,r5,r16
1000468c:	80c7c83a 	sub	r3,r16,r3
10004690:	2008d43a 	srli	r4,r4,16
10004694:	3085883a 	add	r2,r6,r2
10004698:	1821d43a 	srai	r16,r3,16
1000469c:	117fffcc 	andi	r5,r2,65535
100046a0:	2149c83a 	sub	r4,r4,r5
100046a4:	2421883a 	add	r16,r4,r16
100046a8:	8008943a 	slli	r4,r16,16
100046ac:	18ffffcc 	andi	r3,r3,65535
100046b0:	102cd43a 	srli	r22,r2,16
100046b4:	20c8b03a 	or	r4,r4,r3
100046b8:	a1000015 	stw	r4,0(r20)
100046bc:	8021d43a 	srai	r16,r16,16
100046c0:	a5000104 	addi	r20,r20,4
100046c4:	e47fe32e 	bgeu	fp,r17,10004654 <__alt_data_end+0xf8004654>
100046c8:	d8c00317 	ldw	r3,12(sp)
100046cc:	18800017 	ldw	r2,0(r3)
100046d0:	10000c1e 	bne	r2,zero,10004704 <quorem+0x13c>
100046d4:	18bfff04 	addi	r2,r3,-4
100046d8:	9880082e 	bgeu	r19,r2,100046fc <quorem+0x134>
100046dc:	18ffff17 	ldw	r3,-4(r3)
100046e0:	18000326 	beq	r3,zero,100046f0 <quorem+0x128>
100046e4:	00000506 	br	100046fc <quorem+0x134>
100046e8:	10c00017 	ldw	r3,0(r2)
100046ec:	1800031e 	bne	r3,zero,100046fc <quorem+0x134>
100046f0:	10bfff04 	addi	r2,r2,-4
100046f4:	bdffffc4 	addi	r23,r23,-1
100046f8:	98bffb36 	bltu	r19,r2,100046e8 <__alt_data_end+0xf80046e8>
100046fc:	d8c00017 	ldw	r3,0(sp)
10004700:	1dc00415 	stw	r23,16(r3)
10004704:	d9000017 	ldw	r4,0(sp)
10004708:	d9400217 	ldw	r5,8(sp)
1000470c:	00087a80 	call	100087a8 <__mcmp>
10004710:	10002816 	blt	r2,zero,100047b4 <quorem+0x1ec>
10004714:	dc400117 	ldw	r17,4(sp)
10004718:	94800044 	addi	r18,r18,1
1000471c:	980d883a 	mov	r6,r19
10004720:	0007883a 	mov	r3,zero
10004724:	31000017 	ldw	r4,0(r6)
10004728:	89400017 	ldw	r5,0(r17)
1000472c:	31800104 	addi	r6,r6,4
10004730:	20bfffcc 	andi	r2,r4,65535
10004734:	10c7883a 	add	r3,r2,r3
10004738:	28bfffcc 	andi	r2,r5,65535
1000473c:	1885c83a 	sub	r2,r3,r2
10004740:	280ad43a 	srli	r5,r5,16
10004744:	2008d43a 	srli	r4,r4,16
10004748:	1007d43a 	srai	r3,r2,16
1000474c:	10bfffcc 	andi	r2,r2,65535
10004750:	2149c83a 	sub	r4,r4,r5
10004754:	20c9883a 	add	r4,r4,r3
10004758:	200a943a 	slli	r5,r4,16
1000475c:	8c400104 	addi	r17,r17,4
10004760:	2007d43a 	srai	r3,r4,16
10004764:	2884b03a 	or	r2,r5,r2
10004768:	30bfff15 	stw	r2,-4(r6)
1000476c:	e47fed2e 	bgeu	fp,r17,10004724 <__alt_data_end+0xf8004724>
10004770:	bdc5883a 	add	r2,r23,r23
10004774:	1085883a 	add	r2,r2,r2
10004778:	9887883a 	add	r3,r19,r2
1000477c:	18800017 	ldw	r2,0(r3)
10004780:	10000c1e 	bne	r2,zero,100047b4 <quorem+0x1ec>
10004784:	18bfff04 	addi	r2,r3,-4
10004788:	9880082e 	bgeu	r19,r2,100047ac <quorem+0x1e4>
1000478c:	18ffff17 	ldw	r3,-4(r3)
10004790:	18000326 	beq	r3,zero,100047a0 <quorem+0x1d8>
10004794:	00000506 	br	100047ac <quorem+0x1e4>
10004798:	10c00017 	ldw	r3,0(r2)
1000479c:	1800031e 	bne	r3,zero,100047ac <quorem+0x1e4>
100047a0:	10bfff04 	addi	r2,r2,-4
100047a4:	bdffffc4 	addi	r23,r23,-1
100047a8:	98bffb36 	bltu	r19,r2,10004798 <__alt_data_end+0xf8004798>
100047ac:	d8c00017 	ldw	r3,0(sp)
100047b0:	1dc00415 	stw	r23,16(r3)
100047b4:	9005883a 	mov	r2,r18
100047b8:	dfc00d17 	ldw	ra,52(sp)
100047bc:	df000c17 	ldw	fp,48(sp)
100047c0:	ddc00b17 	ldw	r23,44(sp)
100047c4:	dd800a17 	ldw	r22,40(sp)
100047c8:	dd400917 	ldw	r21,36(sp)
100047cc:	dd000817 	ldw	r20,32(sp)
100047d0:	dcc00717 	ldw	r19,28(sp)
100047d4:	dc800617 	ldw	r18,24(sp)
100047d8:	dc400517 	ldw	r17,20(sp)
100047dc:	dc000417 	ldw	r16,16(sp)
100047e0:	dec00e04 	addi	sp,sp,56
100047e4:	f800283a 	ret
100047e8:	0005883a 	mov	r2,zero
100047ec:	003ff206 	br	100047b8 <__alt_data_end+0xf80047b8>

100047f0 <_dtoa_r>:
100047f0:	20801017 	ldw	r2,64(r4)
100047f4:	deffde04 	addi	sp,sp,-136
100047f8:	dd401d15 	stw	r21,116(sp)
100047fc:	dcc01b15 	stw	r19,108(sp)
10004800:	dc801a15 	stw	r18,104(sp)
10004804:	dc401915 	stw	r17,100(sp)
10004808:	dc001815 	stw	r16,96(sp)
1000480c:	dfc02115 	stw	ra,132(sp)
10004810:	df002015 	stw	fp,128(sp)
10004814:	ddc01f15 	stw	r23,124(sp)
10004818:	dd801e15 	stw	r22,120(sp)
1000481c:	dd001c15 	stw	r20,112(sp)
10004820:	d9c00315 	stw	r7,12(sp)
10004824:	2021883a 	mov	r16,r4
10004828:	302b883a 	mov	r21,r6
1000482c:	2825883a 	mov	r18,r5
10004830:	dc402417 	ldw	r17,144(sp)
10004834:	3027883a 	mov	r19,r6
10004838:	10000826 	beq	r2,zero,1000485c <_dtoa_r+0x6c>
1000483c:	21801117 	ldw	r6,68(r4)
10004840:	00c00044 	movi	r3,1
10004844:	100b883a 	mov	r5,r2
10004848:	1986983a 	sll	r3,r3,r6
1000484c:	11800115 	stw	r6,4(r2)
10004850:	10c00215 	stw	r3,8(r2)
10004854:	0007ed40 	call	10007ed4 <_Bfree>
10004858:	80001015 	stw	zero,64(r16)
1000485c:	a8002d16 	blt	r21,zero,10004914 <_dtoa_r+0x124>
10004860:	88000015 	stw	zero,0(r17)
10004864:	a8dffc2c 	andhi	r3,r21,32752
10004868:	009ffc34 	movhi	r2,32752
1000486c:	18801b26 	beq	r3,r2,100048dc <_dtoa_r+0xec>
10004870:	9009883a 	mov	r4,r18
10004874:	980b883a 	mov	r5,r19
10004878:	000d883a 	mov	r6,zero
1000487c:	000f883a 	mov	r7,zero
10004880:	000d5300 	call	1000d530 <__eqdf2>
10004884:	10002a1e 	bne	r2,zero,10004930 <_dtoa_r+0x140>
10004888:	d8c02317 	ldw	r3,140(sp)
1000488c:	d9002517 	ldw	r4,148(sp)
10004890:	00800044 	movi	r2,1
10004894:	18800015 	stw	r2,0(r3)
10004898:	2001a226 	beq	r4,zero,10004f24 <_dtoa_r+0x734>
1000489c:	00840074 	movhi	r2,4097
100048a0:	1086c444 	addi	r2,r2,6929
100048a4:	20800015 	stw	r2,0(r4)
100048a8:	10bfffc4 	addi	r2,r2,-1
100048ac:	dfc02117 	ldw	ra,132(sp)
100048b0:	df002017 	ldw	fp,128(sp)
100048b4:	ddc01f17 	ldw	r23,124(sp)
100048b8:	dd801e17 	ldw	r22,120(sp)
100048bc:	dd401d17 	ldw	r21,116(sp)
100048c0:	dd001c17 	ldw	r20,112(sp)
100048c4:	dcc01b17 	ldw	r19,108(sp)
100048c8:	dc801a17 	ldw	r18,104(sp)
100048cc:	dc401917 	ldw	r17,100(sp)
100048d0:	dc001817 	ldw	r16,96(sp)
100048d4:	dec02204 	addi	sp,sp,136
100048d8:	f800283a 	ret
100048dc:	d8c02317 	ldw	r3,140(sp)
100048e0:	0089c3c4 	movi	r2,9999
100048e4:	18800015 	stw	r2,0(r3)
100048e8:	90017c26 	beq	r18,zero,10004edc <_dtoa_r+0x6ec>
100048ec:	00840074 	movhi	r2,4097
100048f0:	1086d004 	addi	r2,r2,6976
100048f4:	d9002517 	ldw	r4,148(sp)
100048f8:	203fec26 	beq	r4,zero,100048ac <__alt_data_end+0xf80048ac>
100048fc:	10c000c7 	ldb	r3,3(r2)
10004900:	18017d1e 	bne	r3,zero,10004ef8 <_dtoa_r+0x708>
10004904:	10c000c4 	addi	r3,r2,3
10004908:	d9802517 	ldw	r6,148(sp)
1000490c:	30c00015 	stw	r3,0(r6)
10004910:	003fe606 	br	100048ac <__alt_data_end+0xf80048ac>
10004914:	04e00034 	movhi	r19,32768
10004918:	9cffffc4 	addi	r19,r19,-1
1000491c:	00800044 	movi	r2,1
10004920:	ace6703a 	and	r19,r21,r19
10004924:	88800015 	stw	r2,0(r17)
10004928:	982b883a 	mov	r21,r19
1000492c:	003fcd06 	br	10004864 <__alt_data_end+0xf8004864>
10004930:	d8800204 	addi	r2,sp,8
10004934:	a822d53a 	srli	r17,r21,20
10004938:	d8800015 	stw	r2,0(sp)
1000493c:	8009883a 	mov	r4,r16
10004940:	900b883a 	mov	r5,r18
10004944:	980d883a 	mov	r6,r19
10004948:	d9c00104 	addi	r7,sp,4
1000494c:	0008b1c0 	call	10008b1c <__d2b>
10004950:	1039883a 	mov	fp,r2
10004954:	88016a1e 	bne	r17,zero,10004f00 <_dtoa_r+0x710>
10004958:	dd000217 	ldw	r20,8(sp)
1000495c:	dc400117 	ldw	r17,4(sp)
10004960:	00befbc4 	movi	r2,-1041
10004964:	a463883a 	add	r17,r20,r17
10004968:	8882ea16 	blt	r17,r2,10005514 <_dtoa_r+0xd24>
1000496c:	00bf0384 	movi	r2,-1010
10004970:	1445c83a 	sub	r2,r2,r17
10004974:	89010484 	addi	r4,r17,1042
10004978:	a8aa983a 	sll	r21,r21,r2
1000497c:	9108d83a 	srl	r4,r18,r4
10004980:	a908b03a 	or	r4,r21,r4
10004984:	000ea080 	call	1000ea08 <__floatunsidf>
10004988:	017f8434 	movhi	r5,65040
1000498c:	01800044 	movi	r6,1
10004990:	1009883a 	mov	r4,r2
10004994:	194b883a 	add	r5,r3,r5
10004998:	8c7fffc4 	addi	r17,r17,-1
1000499c:	d9800f15 	stw	r6,60(sp)
100049a0:	000d883a 	mov	r6,zero
100049a4:	01cffe34 	movhi	r7,16376
100049a8:	000dfe00 	call	1000dfe0 <__subdf3>
100049ac:	0198dbf4 	movhi	r6,25455
100049b0:	01cff4f4 	movhi	r7,16339
100049b4:	1009883a 	mov	r4,r2
100049b8:	180b883a 	mov	r5,r3
100049bc:	3190d844 	addi	r6,r6,17249
100049c0:	39e1e9c4 	addi	r7,r7,-30809
100049c4:	000d7740 	call	1000d774 <__muldf3>
100049c8:	01a2d874 	movhi	r6,35681
100049cc:	01cff1f4 	movhi	r7,16327
100049d0:	180b883a 	mov	r5,r3
100049d4:	31b22cc4 	addi	r6,r6,-14157
100049d8:	39e28a04 	addi	r7,r7,-30168
100049dc:	1009883a 	mov	r4,r2
100049e0:	000c3140 	call	1000c314 <__adddf3>
100049e4:	8809883a 	mov	r4,r17
100049e8:	102d883a 	mov	r22,r2
100049ec:	182b883a 	mov	r21,r3
100049f0:	000e9380 	call	1000e938 <__floatsidf>
100049f4:	019427f4 	movhi	r6,20639
100049f8:	01cff4f4 	movhi	r7,16339
100049fc:	1009883a 	mov	r4,r2
10004a00:	180b883a 	mov	r5,r3
10004a04:	319e7ec4 	addi	r6,r6,31227
10004a08:	39d104c4 	addi	r7,r7,17427
10004a0c:	000d7740 	call	1000d774 <__muldf3>
10004a10:	b009883a 	mov	r4,r22
10004a14:	a80b883a 	mov	r5,r21
10004a18:	100d883a 	mov	r6,r2
10004a1c:	180f883a 	mov	r7,r3
10004a20:	000c3140 	call	1000c314 <__adddf3>
10004a24:	1009883a 	mov	r4,r2
10004a28:	180b883a 	mov	r5,r3
10004a2c:	102d883a 	mov	r22,r2
10004a30:	182b883a 	mov	r21,r3
10004a34:	000e8b00 	call	1000e8b0 <__fixdfsi>
10004a38:	b009883a 	mov	r4,r22
10004a3c:	a80b883a 	mov	r5,r21
10004a40:	000d883a 	mov	r6,zero
10004a44:	000f883a 	mov	r7,zero
10004a48:	d8800515 	stw	r2,20(sp)
10004a4c:	000d6940 	call	1000d694 <__ledf2>
10004a50:	10023116 	blt	r2,zero,10005318 <_dtoa_r+0xb28>
10004a54:	d8c00517 	ldw	r3,20(sp)
10004a58:	00800584 	movi	r2,22
10004a5c:	10c21f36 	bltu	r2,r3,100052dc <_dtoa_r+0xaec>
10004a60:	180490fa 	slli	r2,r3,3
10004a64:	00c40074 	movhi	r3,4097
10004a68:	18c6ec04 	addi	r3,r3,7088
10004a6c:	1885883a 	add	r2,r3,r2
10004a70:	11000017 	ldw	r4,0(r2)
10004a74:	11400117 	ldw	r5,4(r2)
10004a78:	900d883a 	mov	r6,r18
10004a7c:	980f883a 	mov	r7,r19
10004a80:	000d5b40 	call	1000d5b4 <__gedf2>
10004a84:	0082a70e 	bge	zero,r2,10005524 <_dtoa_r+0xd34>
10004a88:	d9000517 	ldw	r4,20(sp)
10004a8c:	d8000c15 	stw	zero,48(sp)
10004a90:	213fffc4 	addi	r4,r4,-1
10004a94:	d9000515 	stw	r4,20(sp)
10004a98:	a463c83a 	sub	r17,r20,r17
10004a9c:	8dbfffc4 	addi	r22,r17,-1
10004aa0:	b0021916 	blt	r22,zero,10005308 <_dtoa_r+0xb18>
10004aa4:	d8000815 	stw	zero,32(sp)
10004aa8:	d8800517 	ldw	r2,20(sp)
10004aac:	10020e16 	blt	r2,zero,100052e8 <_dtoa_r+0xaf8>
10004ab0:	b0ad883a 	add	r22,r22,r2
10004ab4:	d8800a15 	stw	r2,40(sp)
10004ab8:	d8000915 	stw	zero,36(sp)
10004abc:	d8c00317 	ldw	r3,12(sp)
10004ac0:	00800244 	movi	r2,9
10004ac4:	10c11a36 	bltu	r2,r3,10004f30 <_dtoa_r+0x740>
10004ac8:	00800144 	movi	r2,5
10004acc:	10c4fc0e 	bge	r2,r3,10005ec0 <_dtoa_r+0x16d0>
10004ad0:	18ffff04 	addi	r3,r3,-4
10004ad4:	d8c00315 	stw	r3,12(sp)
10004ad8:	0029883a 	mov	r20,zero
10004adc:	d9800317 	ldw	r6,12(sp)
10004ae0:	008000c4 	movi	r2,3
10004ae4:	3083bd26 	beq	r6,r2,100059dc <_dtoa_r+0x11ec>
10004ae8:	1183670e 	bge	r2,r6,10005888 <_dtoa_r+0x1098>
10004aec:	d8c00317 	ldw	r3,12(sp)
10004af0:	00800104 	movi	r2,4
10004af4:	1882e726 	beq	r3,r2,10005694 <_dtoa_r+0xea4>
10004af8:	00800144 	movi	r2,5
10004afc:	1884f21e 	bne	r3,r2,10005ec8 <_dtoa_r+0x16d8>
10004b00:	00800044 	movi	r2,1
10004b04:	d8800b15 	stw	r2,44(sp)
10004b08:	d8c02217 	ldw	r3,136(sp)
10004b0c:	d9000517 	ldw	r4,20(sp)
10004b10:	1907883a 	add	r3,r3,r4
10004b14:	19800044 	addi	r6,r3,1
10004b18:	d8c00d15 	stw	r3,52(sp)
10004b1c:	d9800615 	stw	r6,24(sp)
10004b20:	0183c30e 	bge	zero,r6,10005a30 <_dtoa_r+0x1240>
10004b24:	d9800617 	ldw	r6,24(sp)
10004b28:	3023883a 	mov	r17,r6
10004b2c:	80001115 	stw	zero,68(r16)
10004b30:	008005c4 	movi	r2,23
10004b34:	1184f62e 	bgeu	r2,r6,10005f10 <_dtoa_r+0x1720>
10004b38:	00c00044 	movi	r3,1
10004b3c:	00800104 	movi	r2,4
10004b40:	1085883a 	add	r2,r2,r2
10004b44:	11000504 	addi	r4,r2,20
10004b48:	180b883a 	mov	r5,r3
10004b4c:	18c00044 	addi	r3,r3,1
10004b50:	313ffb2e 	bgeu	r6,r4,10004b40 <__alt_data_end+0xf8004b40>
10004b54:	81401115 	stw	r5,68(r16)
10004b58:	8009883a 	mov	r4,r16
10004b5c:	0007e2c0 	call	10007e2c <_Balloc>
10004b60:	d8800715 	stw	r2,28(sp)
10004b64:	80801015 	stw	r2,64(r16)
10004b68:	00800384 	movi	r2,14
10004b6c:	1440fd36 	bltu	r2,r17,10004f64 <_dtoa_r+0x774>
10004b70:	a000fc26 	beq	r20,zero,10004f64 <_dtoa_r+0x774>
10004b74:	d8800517 	ldw	r2,20(sp)
10004b78:	0083b90e 	bge	zero,r2,10005a60 <_dtoa_r+0x1270>
10004b7c:	d8c00517 	ldw	r3,20(sp)
10004b80:	108003cc 	andi	r2,r2,15
10004b84:	100490fa 	slli	r2,r2,3
10004b88:	182fd13a 	srai	r23,r3,4
10004b8c:	00c40074 	movhi	r3,4097
10004b90:	18c6ec04 	addi	r3,r3,7088
10004b94:	1885883a 	add	r2,r3,r2
10004b98:	b8c0040c 	andi	r3,r23,16
10004b9c:	12c00017 	ldw	r11,0(r2)
10004ba0:	12800117 	ldw	r10,4(r2)
10004ba4:	18039726 	beq	r3,zero,10005a04 <_dtoa_r+0x1214>
10004ba8:	00840074 	movhi	r2,4097
10004bac:	1086e204 	addi	r2,r2,7048
10004bb0:	11800817 	ldw	r6,32(r2)
10004bb4:	11c00917 	ldw	r7,36(r2)
10004bb8:	9009883a 	mov	r4,r18
10004bbc:	980b883a 	mov	r5,r19
10004bc0:	da801615 	stw	r10,88(sp)
10004bc4:	dac01515 	stw	r11,84(sp)
10004bc8:	000cbb00 	call	1000cbb0 <__divdf3>
10004bcc:	da801617 	ldw	r10,88(sp)
10004bd0:	dac01517 	ldw	r11,84(sp)
10004bd4:	bdc003cc 	andi	r23,r23,15
10004bd8:	044000c4 	movi	r17,3
10004bdc:	d8800e15 	stw	r2,56(sp)
10004be0:	182b883a 	mov	r21,r3
10004be4:	b8001126 	beq	r23,zero,10004c2c <_dtoa_r+0x43c>
10004be8:	05040074 	movhi	r20,4097
10004bec:	a506e204 	addi	r20,r20,7048
10004bf0:	5805883a 	mov	r2,r11
10004bf4:	5007883a 	mov	r3,r10
10004bf8:	b980004c 	andi	r6,r23,1
10004bfc:	1009883a 	mov	r4,r2
10004c00:	b82fd07a 	srai	r23,r23,1
10004c04:	180b883a 	mov	r5,r3
10004c08:	30000426 	beq	r6,zero,10004c1c <_dtoa_r+0x42c>
10004c0c:	a1800017 	ldw	r6,0(r20)
10004c10:	a1c00117 	ldw	r7,4(r20)
10004c14:	8c400044 	addi	r17,r17,1
10004c18:	000d7740 	call	1000d774 <__muldf3>
10004c1c:	a5000204 	addi	r20,r20,8
10004c20:	b83ff51e 	bne	r23,zero,10004bf8 <__alt_data_end+0xf8004bf8>
10004c24:	1017883a 	mov	r11,r2
10004c28:	1815883a 	mov	r10,r3
10004c2c:	d9000e17 	ldw	r4,56(sp)
10004c30:	a80b883a 	mov	r5,r21
10004c34:	580d883a 	mov	r6,r11
10004c38:	500f883a 	mov	r7,r10
10004c3c:	000cbb00 	call	1000cbb0 <__divdf3>
10004c40:	1029883a 	mov	r20,r2
10004c44:	182b883a 	mov	r21,r3
10004c48:	d9800c17 	ldw	r6,48(sp)
10004c4c:	30000626 	beq	r6,zero,10004c68 <_dtoa_r+0x478>
10004c50:	a009883a 	mov	r4,r20
10004c54:	a80b883a 	mov	r5,r21
10004c58:	000d883a 	mov	r6,zero
10004c5c:	01cffc34 	movhi	r7,16368
10004c60:	000d6940 	call	1000d694 <__ledf2>
10004c64:	10043216 	blt	r2,zero,10005d30 <_dtoa_r+0x1540>
10004c68:	8809883a 	mov	r4,r17
10004c6c:	000e9380 	call	1000e938 <__floatsidf>
10004c70:	1009883a 	mov	r4,r2
10004c74:	180b883a 	mov	r5,r3
10004c78:	a00d883a 	mov	r6,r20
10004c7c:	a80f883a 	mov	r7,r21
10004c80:	000d7740 	call	1000d774 <__muldf3>
10004c84:	000d883a 	mov	r6,zero
10004c88:	1009883a 	mov	r4,r2
10004c8c:	180b883a 	mov	r5,r3
10004c90:	01d00734 	movhi	r7,16412
10004c94:	000c3140 	call	1000c314 <__adddf3>
10004c98:	1023883a 	mov	r17,r2
10004c9c:	d9800617 	ldw	r6,24(sp)
10004ca0:	00bf3034 	movhi	r2,64704
10004ca4:	1885883a 	add	r2,r3,r2
10004ca8:	d8800e15 	stw	r2,56(sp)
10004cac:	30032e26 	beq	r6,zero,10005968 <_dtoa_r+0x1178>
10004cb0:	d8c00517 	ldw	r3,20(sp)
10004cb4:	da800617 	ldw	r10,24(sp)
10004cb8:	d8c01215 	stw	r3,72(sp)
10004cbc:	d9000b17 	ldw	r4,44(sp)
10004cc0:	2003b026 	beq	r4,zero,10005b84 <_dtoa_r+0x1394>
10004cc4:	50bfffc4 	addi	r2,r10,-1
10004cc8:	100490fa 	slli	r2,r2,3
10004ccc:	00c40074 	movhi	r3,4097
10004cd0:	18c6ec04 	addi	r3,r3,7088
10004cd4:	1885883a 	add	r2,r3,r2
10004cd8:	11800017 	ldw	r6,0(r2)
10004cdc:	11c00117 	ldw	r7,4(r2)
10004ce0:	d8800717 	ldw	r2,28(sp)
10004ce4:	0009883a 	mov	r4,zero
10004ce8:	014ff834 	movhi	r5,16352
10004cec:	da801615 	stw	r10,88(sp)
10004cf0:	15c00044 	addi	r23,r2,1
10004cf4:	000cbb00 	call	1000cbb0 <__divdf3>
10004cf8:	d9c00e17 	ldw	r7,56(sp)
10004cfc:	880d883a 	mov	r6,r17
10004d00:	1009883a 	mov	r4,r2
10004d04:	180b883a 	mov	r5,r3
10004d08:	000dfe00 	call	1000dfe0 <__subdf3>
10004d0c:	a80b883a 	mov	r5,r21
10004d10:	a009883a 	mov	r4,r20
10004d14:	d8c01015 	stw	r3,64(sp)
10004d18:	d8800e15 	stw	r2,56(sp)
10004d1c:	000e8b00 	call	1000e8b0 <__fixdfsi>
10004d20:	1009883a 	mov	r4,r2
10004d24:	d8801715 	stw	r2,92(sp)
10004d28:	000e9380 	call	1000e938 <__floatsidf>
10004d2c:	a009883a 	mov	r4,r20
10004d30:	a80b883a 	mov	r5,r21
10004d34:	100d883a 	mov	r6,r2
10004d38:	180f883a 	mov	r7,r3
10004d3c:	000dfe00 	call	1000dfe0 <__subdf3>
10004d40:	da001717 	ldw	r8,92(sp)
10004d44:	1829883a 	mov	r20,r3
10004d48:	d8c00717 	ldw	r3,28(sp)
10004d4c:	d9000e17 	ldw	r4,56(sp)
10004d50:	d9401017 	ldw	r5,64(sp)
10004d54:	42000c04 	addi	r8,r8,48
10004d58:	1023883a 	mov	r17,r2
10004d5c:	1a000005 	stb	r8,0(r3)
10004d60:	880d883a 	mov	r6,r17
10004d64:	a00f883a 	mov	r7,r20
10004d68:	402b883a 	mov	r21,r8
10004d6c:	000d5b40 	call	1000d5b4 <__gedf2>
10004d70:	00844516 	blt	zero,r2,10005e88 <_dtoa_r+0x1698>
10004d74:	0009883a 	mov	r4,zero
10004d78:	014ffc34 	movhi	r5,16368
10004d7c:	880d883a 	mov	r6,r17
10004d80:	a00f883a 	mov	r7,r20
10004d84:	000dfe00 	call	1000dfe0 <__subdf3>
10004d88:	d9000e17 	ldw	r4,56(sp)
10004d8c:	d9401017 	ldw	r5,64(sp)
10004d90:	100d883a 	mov	r6,r2
10004d94:	180f883a 	mov	r7,r3
10004d98:	000d5b40 	call	1000d5b4 <__gedf2>
10004d9c:	da801617 	ldw	r10,88(sp)
10004da0:	00843616 	blt	zero,r2,10005e7c <_dtoa_r+0x168c>
10004da4:	00800044 	movi	r2,1
10004da8:	12806e0e 	bge	r2,r10,10004f64 <_dtoa_r+0x774>
10004dac:	d9000717 	ldw	r4,28(sp)
10004db0:	dd801315 	stw	r22,76(sp)
10004db4:	dc001115 	stw	r16,68(sp)
10004db8:	2295883a 	add	r10,r4,r10
10004dbc:	dcc01415 	stw	r19,80(sp)
10004dc0:	502d883a 	mov	r22,r10
10004dc4:	dcc01017 	ldw	r19,64(sp)
10004dc8:	b821883a 	mov	r16,r23
10004dcc:	dc801015 	stw	r18,64(sp)
10004dd0:	dc800e17 	ldw	r18,56(sp)
10004dd4:	00000906 	br	10004dfc <_dtoa_r+0x60c>
10004dd8:	000dfe00 	call	1000dfe0 <__subdf3>
10004ddc:	1009883a 	mov	r4,r2
10004de0:	180b883a 	mov	r5,r3
10004de4:	900d883a 	mov	r6,r18
10004de8:	980f883a 	mov	r7,r19
10004dec:	000d6940 	call	1000d694 <__ledf2>
10004df0:	10040e16 	blt	r2,zero,10005e2c <_dtoa_r+0x163c>
10004df4:	b821883a 	mov	r16,r23
10004df8:	bd841026 	beq	r23,r22,10005e3c <_dtoa_r+0x164c>
10004dfc:	9009883a 	mov	r4,r18
10004e00:	980b883a 	mov	r5,r19
10004e04:	000d883a 	mov	r6,zero
10004e08:	01d00934 	movhi	r7,16420
10004e0c:	000d7740 	call	1000d774 <__muldf3>
10004e10:	000d883a 	mov	r6,zero
10004e14:	01d00934 	movhi	r7,16420
10004e18:	8809883a 	mov	r4,r17
10004e1c:	a00b883a 	mov	r5,r20
10004e20:	1025883a 	mov	r18,r2
10004e24:	1827883a 	mov	r19,r3
10004e28:	000d7740 	call	1000d774 <__muldf3>
10004e2c:	180b883a 	mov	r5,r3
10004e30:	1009883a 	mov	r4,r2
10004e34:	1823883a 	mov	r17,r3
10004e38:	1029883a 	mov	r20,r2
10004e3c:	000e8b00 	call	1000e8b0 <__fixdfsi>
10004e40:	1009883a 	mov	r4,r2
10004e44:	102b883a 	mov	r21,r2
10004e48:	000e9380 	call	1000e938 <__floatsidf>
10004e4c:	a009883a 	mov	r4,r20
10004e50:	880b883a 	mov	r5,r17
10004e54:	100d883a 	mov	r6,r2
10004e58:	180f883a 	mov	r7,r3
10004e5c:	000dfe00 	call	1000dfe0 <__subdf3>
10004e60:	ad400c04 	addi	r21,r21,48
10004e64:	1009883a 	mov	r4,r2
10004e68:	180b883a 	mov	r5,r3
10004e6c:	900d883a 	mov	r6,r18
10004e70:	980f883a 	mov	r7,r19
10004e74:	85400005 	stb	r21,0(r16)
10004e78:	1023883a 	mov	r17,r2
10004e7c:	1829883a 	mov	r20,r3
10004e80:	000d6940 	call	1000d694 <__ledf2>
10004e84:	bdc00044 	addi	r23,r23,1
10004e88:	0009883a 	mov	r4,zero
10004e8c:	014ffc34 	movhi	r5,16368
10004e90:	880d883a 	mov	r6,r17
10004e94:	a00f883a 	mov	r7,r20
10004e98:	103fcf0e 	bge	r2,zero,10004dd8 <__alt_data_end+0xf8004dd8>
10004e9c:	d9801217 	ldw	r6,72(sp)
10004ea0:	dc001117 	ldw	r16,68(sp)
10004ea4:	d9800515 	stw	r6,20(sp)
10004ea8:	8009883a 	mov	r4,r16
10004eac:	e00b883a 	mov	r5,fp
10004eb0:	0007ed40 	call	10007ed4 <_Bfree>
10004eb4:	d8c00517 	ldw	r3,20(sp)
10004eb8:	d9002317 	ldw	r4,140(sp)
10004ebc:	d9802517 	ldw	r6,148(sp)
10004ec0:	b8000005 	stb	zero,0(r23)
10004ec4:	18800044 	addi	r2,r3,1
10004ec8:	20800015 	stw	r2,0(r4)
10004ecc:	30027226 	beq	r6,zero,10005898 <_dtoa_r+0x10a8>
10004ed0:	35c00015 	stw	r23,0(r6)
10004ed4:	d8800717 	ldw	r2,28(sp)
10004ed8:	003e7406 	br	100048ac <__alt_data_end+0xf80048ac>
10004edc:	00800434 	movhi	r2,16
10004ee0:	10bfffc4 	addi	r2,r2,-1
10004ee4:	a8aa703a 	and	r21,r21,r2
10004ee8:	a83e801e 	bne	r21,zero,100048ec <__alt_data_end+0xf80048ec>
10004eec:	00840074 	movhi	r2,4097
10004ef0:	1086cd04 	addi	r2,r2,6964
10004ef4:	003e7f06 	br	100048f4 <__alt_data_end+0xf80048f4>
10004ef8:	10c00204 	addi	r3,r2,8
10004efc:	003e8206 	br	10004908 <__alt_data_end+0xf8004908>
10004f00:	01400434 	movhi	r5,16
10004f04:	297fffc4 	addi	r5,r5,-1
10004f08:	994a703a 	and	r5,r19,r5
10004f0c:	9009883a 	mov	r4,r18
10004f10:	8c7f0044 	addi	r17,r17,-1023
10004f14:	294ffc34 	orhi	r5,r5,16368
10004f18:	dd000217 	ldw	r20,8(sp)
10004f1c:	d8000f15 	stw	zero,60(sp)
10004f20:	003e9f06 	br	100049a0 <__alt_data_end+0xf80049a0>
10004f24:	00840074 	movhi	r2,4097
10004f28:	1086c404 	addi	r2,r2,6928
10004f2c:	003e5f06 	br	100048ac <__alt_data_end+0xf80048ac>
10004f30:	80001115 	stw	zero,68(r16)
10004f34:	8009883a 	mov	r4,r16
10004f38:	000b883a 	mov	r5,zero
10004f3c:	0007e2c0 	call	10007e2c <_Balloc>
10004f40:	01bfffc4 	movi	r6,-1
10004f44:	d8800715 	stw	r2,28(sp)
10004f48:	80801015 	stw	r2,64(r16)
10004f4c:	00800044 	movi	r2,1
10004f50:	d9800615 	stw	r6,24(sp)
10004f54:	d8800b15 	stw	r2,44(sp)
10004f58:	d8002215 	stw	zero,136(sp)
10004f5c:	d9800d15 	stw	r6,52(sp)
10004f60:	d8000315 	stw	zero,12(sp)
10004f64:	d8800117 	ldw	r2,4(sp)
10004f68:	10008e16 	blt	r2,zero,100051a4 <_dtoa_r+0x9b4>
10004f6c:	d9000517 	ldw	r4,20(sp)
10004f70:	00c00384 	movi	r3,14
10004f74:	19008b16 	blt	r3,r4,100051a4 <_dtoa_r+0x9b4>
10004f78:	200490fa 	slli	r2,r4,3
10004f7c:	00c40074 	movhi	r3,4097
10004f80:	d9802217 	ldw	r6,136(sp)
10004f84:	18c6ec04 	addi	r3,r3,7088
10004f88:	1885883a 	add	r2,r3,r2
10004f8c:	14400017 	ldw	r17,0(r2)
10004f90:	15000117 	ldw	r20,4(r2)
10004f94:	3001c716 	blt	r6,zero,100056b4 <_dtoa_r+0xec4>
10004f98:	880d883a 	mov	r6,r17
10004f9c:	a00f883a 	mov	r7,r20
10004fa0:	9009883a 	mov	r4,r18
10004fa4:	980b883a 	mov	r5,r19
10004fa8:	000cbb00 	call	1000cbb0 <__divdf3>
10004fac:	180b883a 	mov	r5,r3
10004fb0:	1009883a 	mov	r4,r2
10004fb4:	000e8b00 	call	1000e8b0 <__fixdfsi>
10004fb8:	1009883a 	mov	r4,r2
10004fbc:	102d883a 	mov	r22,r2
10004fc0:	000e9380 	call	1000e938 <__floatsidf>
10004fc4:	1009883a 	mov	r4,r2
10004fc8:	180b883a 	mov	r5,r3
10004fcc:	880d883a 	mov	r6,r17
10004fd0:	a00f883a 	mov	r7,r20
10004fd4:	000d7740 	call	1000d774 <__muldf3>
10004fd8:	9009883a 	mov	r4,r18
10004fdc:	980b883a 	mov	r5,r19
10004fe0:	100d883a 	mov	r6,r2
10004fe4:	180f883a 	mov	r7,r3
10004fe8:	000dfe00 	call	1000dfe0 <__subdf3>
10004fec:	d9000717 	ldw	r4,28(sp)
10004ff0:	d9800617 	ldw	r6,24(sp)
10004ff4:	180b883a 	mov	r5,r3
10004ff8:	b0c00c04 	addi	r3,r22,48
10004ffc:	20c00005 	stb	r3,0(r4)
10005000:	25c00044 	addi	r23,r4,1
10005004:	01000044 	movi	r4,1
10005008:	1011883a 	mov	r8,r2
1000500c:	2807883a 	mov	r3,r5
10005010:	31003d26 	beq	r6,r4,10005108 <_dtoa_r+0x918>
10005014:	000d883a 	mov	r6,zero
10005018:	01d00934 	movhi	r7,16420
1000501c:	1009883a 	mov	r4,r2
10005020:	000d7740 	call	1000d774 <__muldf3>
10005024:	1009883a 	mov	r4,r2
10005028:	180b883a 	mov	r5,r3
1000502c:	000d883a 	mov	r6,zero
10005030:	000f883a 	mov	r7,zero
10005034:	1027883a 	mov	r19,r2
10005038:	182b883a 	mov	r21,r3
1000503c:	000d5300 	call	1000d530 <__eqdf2>
10005040:	103f9926 	beq	r2,zero,10004ea8 <__alt_data_end+0xf8004ea8>
10005044:	d8c00617 	ldw	r3,24(sp)
10005048:	d9000717 	ldw	r4,28(sp)
1000504c:	b825883a 	mov	r18,r23
10005050:	18bfffc4 	addi	r2,r3,-1
10005054:	20ad883a 	add	r22,r4,r2
10005058:	dc000315 	stw	r16,12(sp)
1000505c:	00000a06 	br	10005088 <_dtoa_r+0x898>
10005060:	000d7740 	call	1000d774 <__muldf3>
10005064:	1009883a 	mov	r4,r2
10005068:	180b883a 	mov	r5,r3
1000506c:	000d883a 	mov	r6,zero
10005070:	000f883a 	mov	r7,zero
10005074:	1027883a 	mov	r19,r2
10005078:	182b883a 	mov	r21,r3
1000507c:	b825883a 	mov	r18,r23
10005080:	000d5300 	call	1000d530 <__eqdf2>
10005084:	10022626 	beq	r2,zero,10005920 <_dtoa_r+0x1130>
10005088:	880d883a 	mov	r6,r17
1000508c:	a00f883a 	mov	r7,r20
10005090:	9809883a 	mov	r4,r19
10005094:	a80b883a 	mov	r5,r21
10005098:	000cbb00 	call	1000cbb0 <__divdf3>
1000509c:	180b883a 	mov	r5,r3
100050a0:	1009883a 	mov	r4,r2
100050a4:	000e8b00 	call	1000e8b0 <__fixdfsi>
100050a8:	1009883a 	mov	r4,r2
100050ac:	1021883a 	mov	r16,r2
100050b0:	000e9380 	call	1000e938 <__floatsidf>
100050b4:	1009883a 	mov	r4,r2
100050b8:	180b883a 	mov	r5,r3
100050bc:	880d883a 	mov	r6,r17
100050c0:	a00f883a 	mov	r7,r20
100050c4:	000d7740 	call	1000d774 <__muldf3>
100050c8:	9809883a 	mov	r4,r19
100050cc:	a80b883a 	mov	r5,r21
100050d0:	100d883a 	mov	r6,r2
100050d4:	180f883a 	mov	r7,r3
100050d8:	000dfe00 	call	1000dfe0 <__subdf3>
100050dc:	82000c04 	addi	r8,r16,48
100050e0:	92000005 	stb	r8,0(r18)
100050e4:	1009883a 	mov	r4,r2
100050e8:	180b883a 	mov	r5,r3
100050ec:	000d883a 	mov	r6,zero
100050f0:	01d00934 	movhi	r7,16420
100050f4:	1011883a 	mov	r8,r2
100050f8:	bdc00044 	addi	r23,r23,1
100050fc:	95bfd81e 	bne	r18,r22,10005060 <__alt_data_end+0xf8005060>
10005100:	802d883a 	mov	r22,r16
10005104:	dc000317 	ldw	r16,12(sp)
10005108:	4009883a 	mov	r4,r8
1000510c:	180b883a 	mov	r5,r3
10005110:	400d883a 	mov	r6,r8
10005114:	180f883a 	mov	r7,r3
10005118:	000c3140 	call	1000c314 <__adddf3>
1000511c:	8809883a 	mov	r4,r17
10005120:	a00b883a 	mov	r5,r20
10005124:	100d883a 	mov	r6,r2
10005128:	180f883a 	mov	r7,r3
1000512c:	1027883a 	mov	r19,r2
10005130:	1825883a 	mov	r18,r3
10005134:	000d6940 	call	1000d694 <__ledf2>
10005138:	10000816 	blt	r2,zero,1000515c <_dtoa_r+0x96c>
1000513c:	8809883a 	mov	r4,r17
10005140:	a00b883a 	mov	r5,r20
10005144:	980d883a 	mov	r6,r19
10005148:	900f883a 	mov	r7,r18
1000514c:	000d5300 	call	1000d530 <__eqdf2>
10005150:	103f551e 	bne	r2,zero,10004ea8 <__alt_data_end+0xf8004ea8>
10005154:	b580004c 	andi	r22,r22,1
10005158:	b03f5326 	beq	r22,zero,10004ea8 <__alt_data_end+0xf8004ea8>
1000515c:	bd7fffc3 	ldbu	r21,-1(r23)
10005160:	b8bfffc4 	addi	r2,r23,-1
10005164:	1007883a 	mov	r3,r2
10005168:	01400e44 	movi	r5,57
1000516c:	d9800717 	ldw	r6,28(sp)
10005170:	00000506 	br	10005188 <_dtoa_r+0x998>
10005174:	18ffffc4 	addi	r3,r3,-1
10005178:	30825e26 	beq	r6,r2,10005af4 <_dtoa_r+0x1304>
1000517c:	1d400003 	ldbu	r21,0(r3)
10005180:	102f883a 	mov	r23,r2
10005184:	10bfffc4 	addi	r2,r2,-1
10005188:	a9003fcc 	andi	r4,r21,255
1000518c:	2100201c 	xori	r4,r4,128
10005190:	213fe004 	addi	r4,r4,-128
10005194:	217ff726 	beq	r4,r5,10005174 <__alt_data_end+0xf8005174>
10005198:	aa000044 	addi	r8,r21,1
1000519c:	12000005 	stb	r8,0(r2)
100051a0:	003f4106 	br	10004ea8 <__alt_data_end+0xf8004ea8>
100051a4:	d8c00b17 	ldw	r3,44(sp)
100051a8:	18006726 	beq	r3,zero,10005348 <_dtoa_r+0xb58>
100051ac:	d9000317 	ldw	r4,12(sp)
100051b0:	00c00044 	movi	r3,1
100051b4:	19016a0e 	bge	r3,r4,10005760 <_dtoa_r+0xf70>
100051b8:	d8800617 	ldw	r2,24(sp)
100051bc:	d8c00917 	ldw	r3,36(sp)
100051c0:	157fffc4 	addi	r21,r2,-1
100051c4:	1d420716 	blt	r3,r21,100059e4 <_dtoa_r+0x11f4>
100051c8:	1d6bc83a 	sub	r21,r3,r21
100051cc:	d8800617 	ldw	r2,24(sp)
100051d0:	1002c716 	blt	r2,zero,10005cf0 <_dtoa_r+0x1500>
100051d4:	dd000817 	ldw	r20,32(sp)
100051d8:	d8800617 	ldw	r2,24(sp)
100051dc:	d9800817 	ldw	r6,32(sp)
100051e0:	8009883a 	mov	r4,r16
100051e4:	01400044 	movi	r5,1
100051e8:	308d883a 	add	r6,r6,r2
100051ec:	d9800815 	stw	r6,32(sp)
100051f0:	b0ad883a 	add	r22,r22,r2
100051f4:	00082540 	call	10008254 <__i2b>
100051f8:	1023883a 	mov	r17,r2
100051fc:	a0000826 	beq	r20,zero,10005220 <_dtoa_r+0xa30>
10005200:	0580070e 	bge	zero,r22,10005220 <_dtoa_r+0xa30>
10005204:	b005883a 	mov	r2,r22
10005208:	a5812016 	blt	r20,r22,1000568c <_dtoa_r+0xe9c>
1000520c:	d8c00817 	ldw	r3,32(sp)
10005210:	a0a9c83a 	sub	r20,r20,r2
10005214:	b0adc83a 	sub	r22,r22,r2
10005218:	1887c83a 	sub	r3,r3,r2
1000521c:	d8c00815 	stw	r3,32(sp)
10005220:	d9000917 	ldw	r4,36(sp)
10005224:	0100140e 	bge	zero,r4,10005278 <_dtoa_r+0xa88>
10005228:	d9800b17 	ldw	r6,44(sp)
1000522c:	3001e526 	beq	r6,zero,100059c4 <_dtoa_r+0x11d4>
10005230:	05400e0e 	bge	zero,r21,1000526c <_dtoa_r+0xa7c>
10005234:	880b883a 	mov	r5,r17
10005238:	8009883a 	mov	r4,r16
1000523c:	a80d883a 	mov	r6,r21
10005240:	00085200 	call	10008520 <__pow5mult>
10005244:	e00d883a 	mov	r6,fp
10005248:	8009883a 	mov	r4,r16
1000524c:	100b883a 	mov	r5,r2
10005250:	1023883a 	mov	r17,r2
10005254:	00082900 	call	10008290 <__multiply>
10005258:	102f883a 	mov	r23,r2
1000525c:	e00b883a 	mov	r5,fp
10005260:	8009883a 	mov	r4,r16
10005264:	0007ed40 	call	10007ed4 <_Bfree>
10005268:	b839883a 	mov	fp,r23
1000526c:	d8800917 	ldw	r2,36(sp)
10005270:	154dc83a 	sub	r6,r2,r21
10005274:	3001281e 	bne	r6,zero,10005718 <_dtoa_r+0xf28>
10005278:	05c00044 	movi	r23,1
1000527c:	8009883a 	mov	r4,r16
10005280:	b80b883a 	mov	r5,r23
10005284:	00082540 	call	10008254 <__i2b>
10005288:	d8c00a17 	ldw	r3,40(sp)
1000528c:	102b883a 	mov	r21,r2
10005290:	00c0310e 	bge	zero,r3,10005358 <_dtoa_r+0xb68>
10005294:	8009883a 	mov	r4,r16
10005298:	100b883a 	mov	r5,r2
1000529c:	180d883a 	mov	r6,r3
100052a0:	00085200 	call	10008520 <__pow5mult>
100052a4:	d9000317 	ldw	r4,12(sp)
100052a8:	102b883a 	mov	r21,r2
100052ac:	b9011f0e 	bge	r23,r4,1000572c <_dtoa_r+0xf3c>
100052b0:	0027883a 	mov	r19,zero
100052b4:	a8800417 	ldw	r2,16(r21)
100052b8:	10800104 	addi	r2,r2,4
100052bc:	1085883a 	add	r2,r2,r2
100052c0:	1085883a 	add	r2,r2,r2
100052c4:	a885883a 	add	r2,r21,r2
100052c8:	11000017 	ldw	r4,0(r2)
100052cc:	000813c0 	call	1000813c <__hi0bits>
100052d0:	00c00804 	movi	r3,32
100052d4:	1885c83a 	sub	r2,r3,r2
100052d8:	00002506 	br	10005370 <_dtoa_r+0xb80>
100052dc:	01800044 	movi	r6,1
100052e0:	d9800c15 	stw	r6,48(sp)
100052e4:	003dec06 	br	10004a98 <__alt_data_end+0xf8004a98>
100052e8:	d8c00817 	ldw	r3,32(sp)
100052ec:	d9000517 	ldw	r4,20(sp)
100052f0:	d8000a15 	stw	zero,40(sp)
100052f4:	1907c83a 	sub	r3,r3,r4
100052f8:	010dc83a 	sub	r6,zero,r4
100052fc:	d8c00815 	stw	r3,32(sp)
10005300:	d9800915 	stw	r6,36(sp)
10005304:	003ded06 	br	10004abc <__alt_data_end+0xf8004abc>
10005308:	05adc83a 	sub	r22,zero,r22
1000530c:	dd800815 	stw	r22,32(sp)
10005310:	002d883a 	mov	r22,zero
10005314:	003de406 	br	10004aa8 <__alt_data_end+0xf8004aa8>
10005318:	d9000517 	ldw	r4,20(sp)
1000531c:	000e9380 	call	1000e938 <__floatsidf>
10005320:	1009883a 	mov	r4,r2
10005324:	180b883a 	mov	r5,r3
10005328:	b00d883a 	mov	r6,r22
1000532c:	a80f883a 	mov	r7,r21
10005330:	000d5300 	call	1000d530 <__eqdf2>
10005334:	103dc726 	beq	r2,zero,10004a54 <__alt_data_end+0xf8004a54>
10005338:	d8800517 	ldw	r2,20(sp)
1000533c:	10bfffc4 	addi	r2,r2,-1
10005340:	d8800515 	stw	r2,20(sp)
10005344:	003dc306 	br	10004a54 <__alt_data_end+0xf8004a54>
10005348:	dd400917 	ldw	r21,36(sp)
1000534c:	dd000817 	ldw	r20,32(sp)
10005350:	0023883a 	mov	r17,zero
10005354:	003fa906 	br	100051fc <__alt_data_end+0xf80051fc>
10005358:	d9800317 	ldw	r6,12(sp)
1000535c:	b981670e 	bge	r23,r6,100058fc <_dtoa_r+0x110c>
10005360:	0027883a 	mov	r19,zero
10005364:	d8c00a17 	ldw	r3,40(sp)
10005368:	183fd21e 	bne	r3,zero,100052b4 <__alt_data_end+0xf80052b4>
1000536c:	00800044 	movi	r2,1
10005370:	1585883a 	add	r2,r2,r22
10005374:	108007cc 	andi	r2,r2,31
10005378:	10005f26 	beq	r2,zero,100054f8 <_dtoa_r+0xd08>
1000537c:	00c00804 	movi	r3,32
10005380:	1887c83a 	sub	r3,r3,r2
10005384:	01000104 	movi	r4,4
10005388:	20c2dd0e 	bge	r4,r3,10005f00 <_dtoa_r+0x1710>
1000538c:	d9000817 	ldw	r4,32(sp)
10005390:	00c00704 	movi	r3,28
10005394:	1885c83a 	sub	r2,r3,r2
10005398:	2089883a 	add	r4,r4,r2
1000539c:	d9000815 	stw	r4,32(sp)
100053a0:	a0a9883a 	add	r20,r20,r2
100053a4:	b0ad883a 	add	r22,r22,r2
100053a8:	d8800817 	ldw	r2,32(sp)
100053ac:	0080050e 	bge	zero,r2,100053c4 <_dtoa_r+0xbd4>
100053b0:	e00b883a 	mov	r5,fp
100053b4:	8009883a 	mov	r4,r16
100053b8:	100d883a 	mov	r6,r2
100053bc:	00086600 	call	10008660 <__lshift>
100053c0:	1039883a 	mov	fp,r2
100053c4:	0580050e 	bge	zero,r22,100053dc <_dtoa_r+0xbec>
100053c8:	a80b883a 	mov	r5,r21
100053cc:	8009883a 	mov	r4,r16
100053d0:	b00d883a 	mov	r6,r22
100053d4:	00086600 	call	10008660 <__lshift>
100053d8:	102b883a 	mov	r21,r2
100053dc:	d8c00c17 	ldw	r3,48(sp)
100053e0:	1801161e 	bne	r3,zero,1000583c <_dtoa_r+0x104c>
100053e4:	d8c00617 	ldw	r3,24(sp)
100053e8:	00c12d0e 	bge	zero,r3,100058a0 <_dtoa_r+0x10b0>
100053ec:	d8c00b17 	ldw	r3,44(sp)
100053f0:	1800571e 	bne	r3,zero,10005550 <_dtoa_r+0xd60>
100053f4:	dc800717 	ldw	r18,28(sp)
100053f8:	dcc00617 	ldw	r19,24(sp)
100053fc:	9029883a 	mov	r20,r18
10005400:	00000206 	br	1000540c <_dtoa_r+0xc1c>
10005404:	0007efc0 	call	10007efc <__multadd>
10005408:	1039883a 	mov	fp,r2
1000540c:	e009883a 	mov	r4,fp
10005410:	a80b883a 	mov	r5,r21
10005414:	00045c80 	call	100045c8 <quorem>
10005418:	10800c04 	addi	r2,r2,48
1000541c:	90800005 	stb	r2,0(r18)
10005420:	94800044 	addi	r18,r18,1
10005424:	9507c83a 	sub	r3,r18,r20
10005428:	8009883a 	mov	r4,r16
1000542c:	e00b883a 	mov	r5,fp
10005430:	01800284 	movi	r6,10
10005434:	000f883a 	mov	r7,zero
10005438:	1cfff216 	blt	r3,r19,10005404 <__alt_data_end+0xf8005404>
1000543c:	1011883a 	mov	r8,r2
10005440:	d8800617 	ldw	r2,24(sp)
10005444:	00822e0e 	bge	zero,r2,10005d00 <_dtoa_r+0x1510>
10005448:	d9000717 	ldw	r4,28(sp)
1000544c:	0025883a 	mov	r18,zero
10005450:	20af883a 	add	r23,r4,r2
10005454:	e00b883a 	mov	r5,fp
10005458:	01800044 	movi	r6,1
1000545c:	8009883a 	mov	r4,r16
10005460:	da001715 	stw	r8,92(sp)
10005464:	00086600 	call	10008660 <__lshift>
10005468:	1009883a 	mov	r4,r2
1000546c:	a80b883a 	mov	r5,r21
10005470:	1039883a 	mov	fp,r2
10005474:	00087a80 	call	100087a8 <__mcmp>
10005478:	da001717 	ldw	r8,92(sp)
1000547c:	00816e0e 	bge	zero,r2,10005a38 <_dtoa_r+0x1248>
10005480:	b93fffc3 	ldbu	r4,-1(r23)
10005484:	b8bfffc4 	addi	r2,r23,-1
10005488:	1007883a 	mov	r3,r2
1000548c:	01800e44 	movi	r6,57
10005490:	d9c00717 	ldw	r7,28(sp)
10005494:	00000506 	br	100054ac <_dtoa_r+0xcbc>
10005498:	18ffffc4 	addi	r3,r3,-1
1000549c:	38811926 	beq	r7,r2,10005904 <_dtoa_r+0x1114>
100054a0:	19000003 	ldbu	r4,0(r3)
100054a4:	102f883a 	mov	r23,r2
100054a8:	10bfffc4 	addi	r2,r2,-1
100054ac:	21403fcc 	andi	r5,r4,255
100054b0:	2940201c 	xori	r5,r5,128
100054b4:	297fe004 	addi	r5,r5,-128
100054b8:	29bff726 	beq	r5,r6,10005498 <__alt_data_end+0xf8005498>
100054bc:	21000044 	addi	r4,r4,1
100054c0:	11000005 	stb	r4,0(r2)
100054c4:	8009883a 	mov	r4,r16
100054c8:	a80b883a 	mov	r5,r21
100054cc:	0007ed40 	call	10007ed4 <_Bfree>
100054d0:	883e7526 	beq	r17,zero,10004ea8 <__alt_data_end+0xf8004ea8>
100054d4:	90000426 	beq	r18,zero,100054e8 <_dtoa_r+0xcf8>
100054d8:	94400326 	beq	r18,r17,100054e8 <_dtoa_r+0xcf8>
100054dc:	8009883a 	mov	r4,r16
100054e0:	900b883a 	mov	r5,r18
100054e4:	0007ed40 	call	10007ed4 <_Bfree>
100054e8:	8009883a 	mov	r4,r16
100054ec:	880b883a 	mov	r5,r17
100054f0:	0007ed40 	call	10007ed4 <_Bfree>
100054f4:	003e6c06 	br	10004ea8 <__alt_data_end+0xf8004ea8>
100054f8:	00800704 	movi	r2,28
100054fc:	d9800817 	ldw	r6,32(sp)
10005500:	a0a9883a 	add	r20,r20,r2
10005504:	b0ad883a 	add	r22,r22,r2
10005508:	308d883a 	add	r6,r6,r2
1000550c:	d9800815 	stw	r6,32(sp)
10005510:	003fa506 	br	100053a8 <__alt_data_end+0xf80053a8>
10005514:	013efb84 	movi	r4,-1042
10005518:	246bc83a 	sub	r21,r4,r17
1000551c:	9548983a 	sll	r4,r18,r21
10005520:	003d1806 	br	10004984 <__alt_data_end+0xf8004984>
10005524:	d8000c15 	stw	zero,48(sp)
10005528:	003d5b06 	br	10004a98 <__alt_data_end+0xf8004a98>
1000552c:	880b883a 	mov	r5,r17
10005530:	8009883a 	mov	r4,r16
10005534:	01800284 	movi	r6,10
10005538:	000f883a 	mov	r7,zero
1000553c:	0007efc0 	call	10007efc <__multadd>
10005540:	1023883a 	mov	r17,r2
10005544:	d8800d17 	ldw	r2,52(sp)
10005548:	0082550e 	bge	zero,r2,10005ea0 <_dtoa_r+0x16b0>
1000554c:	d8800615 	stw	r2,24(sp)
10005550:	0500050e 	bge	zero,r20,10005568 <_dtoa_r+0xd78>
10005554:	880b883a 	mov	r5,r17
10005558:	8009883a 	mov	r4,r16
1000555c:	a00d883a 	mov	r6,r20
10005560:	00086600 	call	10008660 <__lshift>
10005564:	1023883a 	mov	r17,r2
10005568:	98016a1e 	bne	r19,zero,10005b14 <_dtoa_r+0x1324>
1000556c:	8829883a 	mov	r20,r17
10005570:	d9000617 	ldw	r4,24(sp)
10005574:	dcc00717 	ldw	r19,28(sp)
10005578:	9480004c 	andi	r18,r18,1
1000557c:	20bfffc4 	addi	r2,r4,-1
10005580:	9885883a 	add	r2,r19,r2
10005584:	d8800415 	stw	r2,16(sp)
10005588:	dc800615 	stw	r18,24(sp)
1000558c:	e009883a 	mov	r4,fp
10005590:	a80b883a 	mov	r5,r21
10005594:	00045c80 	call	100045c8 <quorem>
10005598:	e009883a 	mov	r4,fp
1000559c:	880b883a 	mov	r5,r17
100055a0:	102f883a 	mov	r23,r2
100055a4:	00087a80 	call	100087a8 <__mcmp>
100055a8:	8009883a 	mov	r4,r16
100055ac:	a80b883a 	mov	r5,r21
100055b0:	a00d883a 	mov	r6,r20
100055b4:	102d883a 	mov	r22,r2
100055b8:	00088080 	call	10008808 <__mdiff>
100055bc:	1007883a 	mov	r3,r2
100055c0:	10800317 	ldw	r2,12(r2)
100055c4:	bc800c04 	addi	r18,r23,48
100055c8:	1000971e 	bne	r2,zero,10005828 <_dtoa_r+0x1038>
100055cc:	180b883a 	mov	r5,r3
100055d0:	e009883a 	mov	r4,fp
100055d4:	d8c01515 	stw	r3,84(sp)
100055d8:	00087a80 	call	100087a8 <__mcmp>
100055dc:	d8c01517 	ldw	r3,84(sp)
100055e0:	8009883a 	mov	r4,r16
100055e4:	d8801515 	stw	r2,84(sp)
100055e8:	180b883a 	mov	r5,r3
100055ec:	0007ed40 	call	10007ed4 <_Bfree>
100055f0:	d8801517 	ldw	r2,84(sp)
100055f4:	1000041e 	bne	r2,zero,10005608 <_dtoa_r+0xe18>
100055f8:	d9800317 	ldw	r6,12(sp)
100055fc:	3000021e 	bne	r6,zero,10005608 <_dtoa_r+0xe18>
10005600:	d8c00617 	ldw	r3,24(sp)
10005604:	18007626 	beq	r3,zero,100057e0 <_dtoa_r+0xff0>
10005608:	b0005b16 	blt	r22,zero,10005778 <_dtoa_r+0xf88>
1000560c:	b000041e 	bne	r22,zero,10005620 <_dtoa_r+0xe30>
10005610:	d9000317 	ldw	r4,12(sp)
10005614:	2000021e 	bne	r4,zero,10005620 <_dtoa_r+0xe30>
10005618:	d8c00617 	ldw	r3,24(sp)
1000561c:	18005626 	beq	r3,zero,10005778 <_dtoa_r+0xf88>
10005620:	00814d16 	blt	zero,r2,10005b58 <_dtoa_r+0x1368>
10005624:	d8c00417 	ldw	r3,16(sp)
10005628:	9d800044 	addi	r22,r19,1
1000562c:	9c800005 	stb	r18,0(r19)
10005630:	b02f883a 	mov	r23,r22
10005634:	98c14c26 	beq	r19,r3,10005b68 <_dtoa_r+0x1378>
10005638:	e00b883a 	mov	r5,fp
1000563c:	8009883a 	mov	r4,r16
10005640:	01800284 	movi	r6,10
10005644:	000f883a 	mov	r7,zero
10005648:	0007efc0 	call	10007efc <__multadd>
1000564c:	1039883a 	mov	fp,r2
10005650:	8d006d26 	beq	r17,r20,10005808 <_dtoa_r+0x1018>
10005654:	880b883a 	mov	r5,r17
10005658:	01800284 	movi	r6,10
1000565c:	000f883a 	mov	r7,zero
10005660:	8009883a 	mov	r4,r16
10005664:	0007efc0 	call	10007efc <__multadd>
10005668:	a00b883a 	mov	r5,r20
1000566c:	8009883a 	mov	r4,r16
10005670:	01800284 	movi	r6,10
10005674:	000f883a 	mov	r7,zero
10005678:	1023883a 	mov	r17,r2
1000567c:	0007efc0 	call	10007efc <__multadd>
10005680:	1029883a 	mov	r20,r2
10005684:	b027883a 	mov	r19,r22
10005688:	003fc006 	br	1000558c <__alt_data_end+0xf800558c>
1000568c:	a005883a 	mov	r2,r20
10005690:	003ede06 	br	1000520c <__alt_data_end+0xf800520c>
10005694:	01000044 	movi	r4,1
10005698:	d9000b15 	stw	r4,44(sp)
1000569c:	d9802217 	ldw	r6,136(sp)
100056a0:	0180dc0e 	bge	zero,r6,10005a14 <_dtoa_r+0x1224>
100056a4:	3023883a 	mov	r17,r6
100056a8:	d9800d15 	stw	r6,52(sp)
100056ac:	d9800615 	stw	r6,24(sp)
100056b0:	003d1e06 	br	10004b2c <__alt_data_end+0xf8004b2c>
100056b4:	d8800617 	ldw	r2,24(sp)
100056b8:	00be3716 	blt	zero,r2,10004f98 <__alt_data_end+0xf8004f98>
100056bc:	1000be1e 	bne	r2,zero,100059b8 <_dtoa_r+0x11c8>
100056c0:	8809883a 	mov	r4,r17
100056c4:	a00b883a 	mov	r5,r20
100056c8:	000d883a 	mov	r6,zero
100056cc:	01d00534 	movhi	r7,16404
100056d0:	000d7740 	call	1000d774 <__muldf3>
100056d4:	1009883a 	mov	r4,r2
100056d8:	180b883a 	mov	r5,r3
100056dc:	900d883a 	mov	r6,r18
100056e0:	980f883a 	mov	r7,r19
100056e4:	000d5b40 	call	1000d5b4 <__gedf2>
100056e8:	002b883a 	mov	r21,zero
100056ec:	0023883a 	mov	r17,zero
100056f0:	10007a16 	blt	r2,zero,100058dc <_dtoa_r+0x10ec>
100056f4:	d9002217 	ldw	r4,136(sp)
100056f8:	ddc00717 	ldw	r23,28(sp)
100056fc:	0108303a 	nor	r4,zero,r4
10005700:	d9000515 	stw	r4,20(sp)
10005704:	8009883a 	mov	r4,r16
10005708:	a80b883a 	mov	r5,r21
1000570c:	0007ed40 	call	10007ed4 <_Bfree>
10005710:	883f751e 	bne	r17,zero,100054e8 <__alt_data_end+0xf80054e8>
10005714:	003de406 	br	10004ea8 <__alt_data_end+0xf8004ea8>
10005718:	e00b883a 	mov	r5,fp
1000571c:	8009883a 	mov	r4,r16
10005720:	00085200 	call	10008520 <__pow5mult>
10005724:	1039883a 	mov	fp,r2
10005728:	003ed306 	br	10005278 <__alt_data_end+0xf8005278>
1000572c:	903ee01e 	bne	r18,zero,100052b0 <__alt_data_end+0xf80052b0>
10005730:	00800434 	movhi	r2,16
10005734:	10bfffc4 	addi	r2,r2,-1
10005738:	9884703a 	and	r2,r19,r2
1000573c:	103f081e 	bne	r2,zero,10005360 <__alt_data_end+0xf8005360>
10005740:	9cdffc2c 	andhi	r19,r19,32752
10005744:	983f0626 	beq	r19,zero,10005360 <__alt_data_end+0xf8005360>
10005748:	d8800817 	ldw	r2,32(sp)
1000574c:	b5800044 	addi	r22,r22,1
10005750:	04c00044 	movi	r19,1
10005754:	10800044 	addi	r2,r2,1
10005758:	d8800815 	stw	r2,32(sp)
1000575c:	003f0106 	br	10005364 <__alt_data_end+0xf8005364>
10005760:	d9800f17 	ldw	r6,60(sp)
10005764:	30016826 	beq	r6,zero,10005d08 <_dtoa_r+0x1518>
10005768:	10810cc4 	addi	r2,r2,1075
1000576c:	dd400917 	ldw	r21,36(sp)
10005770:	dd000817 	ldw	r20,32(sp)
10005774:	003e9906 	br	100051dc <__alt_data_end+0xf80051dc>
10005778:	9011883a 	mov	r8,r18
1000577c:	4007883a 	mov	r3,r8
10005780:	e02d883a 	mov	r22,fp
10005784:	0080100e 	bge	zero,r2,100057c8 <_dtoa_r+0xfd8>
10005788:	01800044 	movi	r6,1
1000578c:	8009883a 	mov	r4,r16
10005790:	e00b883a 	mov	r5,fp
10005794:	da001515 	stw	r8,84(sp)
10005798:	da001715 	stw	r8,92(sp)
1000579c:	00086600 	call	10008660 <__lshift>
100057a0:	1009883a 	mov	r4,r2
100057a4:	a80b883a 	mov	r5,r21
100057a8:	102d883a 	mov	r22,r2
100057ac:	00087a80 	call	100087a8 <__mcmp>
100057b0:	d8c01517 	ldw	r3,84(sp)
100057b4:	da001717 	ldw	r8,92(sp)
100057b8:	0081a50e 	bge	zero,r2,10005e50 <_dtoa_r+0x1660>
100057bc:	00800e44 	movi	r2,57
100057c0:	40817b26 	beq	r8,r2,10005db0 <_dtoa_r+0x15c0>
100057c4:	40c00044 	addi	r3,r8,1
100057c8:	8825883a 	mov	r18,r17
100057cc:	9dc00044 	addi	r23,r19,1
100057d0:	98c00005 	stb	r3,0(r19)
100057d4:	a023883a 	mov	r17,r20
100057d8:	b039883a 	mov	fp,r22
100057dc:	003f3906 	br	100054c4 <__alt_data_end+0xf80054c4>
100057e0:	00800e44 	movi	r2,57
100057e4:	9011883a 	mov	r8,r18
100057e8:	90817226 	beq	r18,r2,10005db4 <_dtoa_r+0x15c4>
100057ec:	0580010e 	bge	zero,r22,100057f4 <_dtoa_r+0x1004>
100057f0:	ba000c44 	addi	r8,r23,49
100057f4:	8825883a 	mov	r18,r17
100057f8:	9dc00044 	addi	r23,r19,1
100057fc:	9a000005 	stb	r8,0(r19)
10005800:	a023883a 	mov	r17,r20
10005804:	003f2f06 	br	100054c4 <__alt_data_end+0xf80054c4>
10005808:	880b883a 	mov	r5,r17
1000580c:	8009883a 	mov	r4,r16
10005810:	01800284 	movi	r6,10
10005814:	000f883a 	mov	r7,zero
10005818:	0007efc0 	call	10007efc <__multadd>
1000581c:	1023883a 	mov	r17,r2
10005820:	1029883a 	mov	r20,r2
10005824:	003f9706 	br	10005684 <__alt_data_end+0xf8005684>
10005828:	8009883a 	mov	r4,r16
1000582c:	180b883a 	mov	r5,r3
10005830:	0007ed40 	call	10007ed4 <_Bfree>
10005834:	00800044 	movi	r2,1
10005838:	003f7306 	br	10005608 <__alt_data_end+0xf8005608>
1000583c:	e009883a 	mov	r4,fp
10005840:	a80b883a 	mov	r5,r21
10005844:	00087a80 	call	100087a8 <__mcmp>
10005848:	103ee60e 	bge	r2,zero,100053e4 <__alt_data_end+0xf80053e4>
1000584c:	8009883a 	mov	r4,r16
10005850:	e00b883a 	mov	r5,fp
10005854:	01800284 	movi	r6,10
10005858:	000f883a 	mov	r7,zero
1000585c:	0007efc0 	call	10007efc <__multadd>
10005860:	d9000517 	ldw	r4,20(sp)
10005864:	d9800b17 	ldw	r6,44(sp)
10005868:	1039883a 	mov	fp,r2
1000586c:	213fffc4 	addi	r4,r4,-1
10005870:	d9000515 	stw	r4,20(sp)
10005874:	303f2d1e 	bne	r6,zero,1000552c <__alt_data_end+0xf800552c>
10005878:	d9000d17 	ldw	r4,52(sp)
1000587c:	0101780e 	bge	zero,r4,10005e60 <_dtoa_r+0x1670>
10005880:	d9000615 	stw	r4,24(sp)
10005884:	003edb06 	br	100053f4 <__alt_data_end+0xf80053f4>
10005888:	00800084 	movi	r2,2
1000588c:	30818e1e 	bne	r6,r2,10005ec8 <_dtoa_r+0x16d8>
10005890:	d8000b15 	stw	zero,44(sp)
10005894:	003f8106 	br	1000569c <__alt_data_end+0xf800569c>
10005898:	d8800717 	ldw	r2,28(sp)
1000589c:	003c0306 	br	100048ac <__alt_data_end+0xf80048ac>
100058a0:	d9000317 	ldw	r4,12(sp)
100058a4:	00800084 	movi	r2,2
100058a8:	113ed00e 	bge	r2,r4,100053ec <__alt_data_end+0xf80053ec>
100058ac:	d8c00617 	ldw	r3,24(sp)
100058b0:	183f901e 	bne	r3,zero,100056f4 <__alt_data_end+0xf80056f4>
100058b4:	a80b883a 	mov	r5,r21
100058b8:	8009883a 	mov	r4,r16
100058bc:	01800144 	movi	r6,5
100058c0:	000f883a 	mov	r7,zero
100058c4:	0007efc0 	call	10007efc <__multadd>
100058c8:	e009883a 	mov	r4,fp
100058cc:	100b883a 	mov	r5,r2
100058d0:	102b883a 	mov	r21,r2
100058d4:	00087a80 	call	100087a8 <__mcmp>
100058d8:	00bf860e 	bge	zero,r2,100056f4 <__alt_data_end+0xf80056f4>
100058dc:	d9800717 	ldw	r6,28(sp)
100058e0:	00800c44 	movi	r2,49
100058e4:	30800005 	stb	r2,0(r6)
100058e8:	d8800517 	ldw	r2,20(sp)
100058ec:	35c00044 	addi	r23,r6,1
100058f0:	10800044 	addi	r2,r2,1
100058f4:	d8800515 	stw	r2,20(sp)
100058f8:	003f8206 	br	10005704 <__alt_data_end+0xf8005704>
100058fc:	903e981e 	bne	r18,zero,10005360 <__alt_data_end+0xf8005360>
10005900:	003f8b06 	br	10005730 <__alt_data_end+0xf8005730>
10005904:	d9800517 	ldw	r6,20(sp)
10005908:	d8c00717 	ldw	r3,28(sp)
1000590c:	00800c44 	movi	r2,49
10005910:	31800044 	addi	r6,r6,1
10005914:	d9800515 	stw	r6,20(sp)
10005918:	18800005 	stb	r2,0(r3)
1000591c:	003ee906 	br	100054c4 <__alt_data_end+0xf80054c4>
10005920:	dc000317 	ldw	r16,12(sp)
10005924:	003d6006 	br	10004ea8 <__alt_data_end+0xf8004ea8>
10005928:	8809883a 	mov	r4,r17
1000592c:	000e9380 	call	1000e938 <__floatsidf>
10005930:	a009883a 	mov	r4,r20
10005934:	a80b883a 	mov	r5,r21
10005938:	100d883a 	mov	r6,r2
1000593c:	180f883a 	mov	r7,r3
10005940:	000d7740 	call	1000d774 <__muldf3>
10005944:	1009883a 	mov	r4,r2
10005948:	180b883a 	mov	r5,r3
1000594c:	000d883a 	mov	r6,zero
10005950:	01d00734 	movhi	r7,16412
10005954:	000c3140 	call	1000c314 <__adddf3>
10005958:	1023883a 	mov	r17,r2
1000595c:	00bf3034 	movhi	r2,64704
10005960:	1885883a 	add	r2,r3,r2
10005964:	d8800e15 	stw	r2,56(sp)
10005968:	a009883a 	mov	r4,r20
1000596c:	a80b883a 	mov	r5,r21
10005970:	000d883a 	mov	r6,zero
10005974:	01d00534 	movhi	r7,16404
10005978:	000dfe00 	call	1000dfe0 <__subdf3>
1000597c:	d9c00e17 	ldw	r7,56(sp)
10005980:	1009883a 	mov	r4,r2
10005984:	180b883a 	mov	r5,r3
10005988:	880d883a 	mov	r6,r17
1000598c:	102b883a 	mov	r21,r2
10005990:	1829883a 	mov	r20,r3
10005994:	000d5b40 	call	1000d5b4 <__gedf2>
10005998:	00807716 	blt	zero,r2,10005b78 <_dtoa_r+0x1388>
1000599c:	d8800e17 	ldw	r2,56(sp)
100059a0:	a809883a 	mov	r4,r21
100059a4:	a00b883a 	mov	r5,r20
100059a8:	11e0003c 	xorhi	r7,r2,32768
100059ac:	880d883a 	mov	r6,r17
100059b0:	000d6940 	call	1000d694 <__ledf2>
100059b4:	103d6b0e 	bge	r2,zero,10004f64 <__alt_data_end+0xf8004f64>
100059b8:	002b883a 	mov	r21,zero
100059bc:	0023883a 	mov	r17,zero
100059c0:	003f4c06 	br	100056f4 <__alt_data_end+0xf80056f4>
100059c4:	d9800917 	ldw	r6,36(sp)
100059c8:	e00b883a 	mov	r5,fp
100059cc:	8009883a 	mov	r4,r16
100059d0:	00085200 	call	10008520 <__pow5mult>
100059d4:	1039883a 	mov	fp,r2
100059d8:	003e2706 	br	10005278 <__alt_data_end+0xf8005278>
100059dc:	d8000b15 	stw	zero,44(sp)
100059e0:	003c4906 	br	10004b08 <__alt_data_end+0xf8004b08>
100059e4:	d9000917 	ldw	r4,36(sp)
100059e8:	d9800a17 	ldw	r6,40(sp)
100059ec:	dd400915 	stw	r21,36(sp)
100059f0:	a905c83a 	sub	r2,r21,r4
100059f4:	308d883a 	add	r6,r6,r2
100059f8:	d9800a15 	stw	r6,40(sp)
100059fc:	002b883a 	mov	r21,zero
10005a00:	003df206 	br	100051cc <__alt_data_end+0xf80051cc>
10005a04:	dc800e15 	stw	r18,56(sp)
10005a08:	982b883a 	mov	r21,r19
10005a0c:	04400084 	movi	r17,2
10005a10:	003c7406 	br	10004be4 <__alt_data_end+0xf8004be4>
10005a14:	04400044 	movi	r17,1
10005a18:	dc400d15 	stw	r17,52(sp)
10005a1c:	dc400615 	stw	r17,24(sp)
10005a20:	dc402215 	stw	r17,136(sp)
10005a24:	80001115 	stw	zero,68(r16)
10005a28:	000b883a 	mov	r5,zero
10005a2c:	003c4a06 	br	10004b58 <__alt_data_end+0xf8004b58>
10005a30:	3023883a 	mov	r17,r6
10005a34:	003ffb06 	br	10005a24 <__alt_data_end+0xf8005a24>
10005a38:	1000021e 	bne	r2,zero,10005a44 <_dtoa_r+0x1254>
10005a3c:	4200004c 	andi	r8,r8,1
10005a40:	403e8f1e 	bne	r8,zero,10005480 <__alt_data_end+0xf8005480>
10005a44:	01000c04 	movi	r4,48
10005a48:	00000106 	br	10005a50 <_dtoa_r+0x1260>
10005a4c:	102f883a 	mov	r23,r2
10005a50:	b8bfffc4 	addi	r2,r23,-1
10005a54:	10c00007 	ldb	r3,0(r2)
10005a58:	193ffc26 	beq	r3,r4,10005a4c <__alt_data_end+0xf8005a4c>
10005a5c:	003e9906 	br	100054c4 <__alt_data_end+0xf80054c4>
10005a60:	d9000517 	ldw	r4,20(sp)
10005a64:	012fc83a 	sub	r23,zero,r4
10005a68:	b800ad26 	beq	r23,zero,10005d20 <_dtoa_r+0x1530>
10005a6c:	b88003cc 	andi	r2,r23,15
10005a70:	100490fa 	slli	r2,r2,3
10005a74:	00c40074 	movhi	r3,4097
10005a78:	18c6ec04 	addi	r3,r3,7088
10005a7c:	1885883a 	add	r2,r3,r2
10005a80:	11800017 	ldw	r6,0(r2)
10005a84:	11c00117 	ldw	r7,4(r2)
10005a88:	b82fd13a 	srai	r23,r23,4
10005a8c:	9009883a 	mov	r4,r18
10005a90:	980b883a 	mov	r5,r19
10005a94:	000d7740 	call	1000d774 <__muldf3>
10005a98:	1029883a 	mov	r20,r2
10005a9c:	182b883a 	mov	r21,r3
10005aa0:	b800f426 	beq	r23,zero,10005e74 <_dtoa_r+0x1684>
10005aa4:	02040074 	movhi	r8,4097
10005aa8:	4206e204 	addi	r8,r8,7048
10005aac:	8029883a 	mov	r20,r16
10005ab0:	04400084 	movi	r17,2
10005ab4:	4021883a 	mov	r16,r8
10005ab8:	b980004c 	andi	r6,r23,1
10005abc:	1009883a 	mov	r4,r2
10005ac0:	b82fd07a 	srai	r23,r23,1
10005ac4:	180b883a 	mov	r5,r3
10005ac8:	30000426 	beq	r6,zero,10005adc <_dtoa_r+0x12ec>
10005acc:	81800017 	ldw	r6,0(r16)
10005ad0:	81c00117 	ldw	r7,4(r16)
10005ad4:	8c400044 	addi	r17,r17,1
10005ad8:	000d7740 	call	1000d774 <__muldf3>
10005adc:	84000204 	addi	r16,r16,8
10005ae0:	b83ff51e 	bne	r23,zero,10005ab8 <__alt_data_end+0xf8005ab8>
10005ae4:	a021883a 	mov	r16,r20
10005ae8:	182b883a 	mov	r21,r3
10005aec:	1029883a 	mov	r20,r2
10005af0:	003c5506 	br	10004c48 <__alt_data_end+0xf8004c48>
10005af4:	d9800517 	ldw	r6,20(sp)
10005af8:	d9000717 	ldw	r4,28(sp)
10005afc:	00c00c04 	movi	r3,48
10005b00:	31800044 	addi	r6,r6,1
10005b04:	d9800515 	stw	r6,20(sp)
10005b08:	20c00005 	stb	r3,0(r4)
10005b0c:	02000c44 	movi	r8,49
10005b10:	003da206 	br	1000519c <__alt_data_end+0xf800519c>
10005b14:	89400117 	ldw	r5,4(r17)
10005b18:	8009883a 	mov	r4,r16
10005b1c:	0007e2c0 	call	10007e2c <_Balloc>
10005b20:	89800417 	ldw	r6,16(r17)
10005b24:	11000304 	addi	r4,r2,12
10005b28:	89400304 	addi	r5,r17,12
10005b2c:	31800084 	addi	r6,r6,2
10005b30:	318d883a 	add	r6,r6,r6
10005b34:	318d883a 	add	r6,r6,r6
10005b38:	1027883a 	mov	r19,r2
10005b3c:	0007a740 	call	10007a74 <memcpy>
10005b40:	8009883a 	mov	r4,r16
10005b44:	980b883a 	mov	r5,r19
10005b48:	01800044 	movi	r6,1
10005b4c:	00086600 	call	10008660 <__lshift>
10005b50:	1029883a 	mov	r20,r2
10005b54:	003e8606 	br	10005570 <__alt_data_end+0xf8005570>
10005b58:	00800e44 	movi	r2,57
10005b5c:	90809526 	beq	r18,r2,10005db4 <_dtoa_r+0x15c4>
10005b60:	92000044 	addi	r8,r18,1
10005b64:	003f2306 	br	100057f4 <__alt_data_end+0xf80057f4>
10005b68:	9011883a 	mov	r8,r18
10005b6c:	8825883a 	mov	r18,r17
10005b70:	a023883a 	mov	r17,r20
10005b74:	003e3706 	br	10005454 <__alt_data_end+0xf8005454>
10005b78:	002b883a 	mov	r21,zero
10005b7c:	0023883a 	mov	r17,zero
10005b80:	003f5606 	br	100058dc <__alt_data_end+0xf80058dc>
10005b84:	51bfffc4 	addi	r6,r10,-1
10005b88:	300490fa 	slli	r2,r6,3
10005b8c:	00c40074 	movhi	r3,4097
10005b90:	18c6ec04 	addi	r3,r3,7088
10005b94:	1885883a 	add	r2,r3,r2
10005b98:	d9c00e17 	ldw	r7,56(sp)
10005b9c:	11000017 	ldw	r4,0(r2)
10005ba0:	11400117 	ldw	r5,4(r2)
10005ba4:	d8800717 	ldw	r2,28(sp)
10005ba8:	d9801015 	stw	r6,64(sp)
10005bac:	880d883a 	mov	r6,r17
10005bb0:	da801615 	stw	r10,88(sp)
10005bb4:	15c00044 	addi	r23,r2,1
10005bb8:	000d7740 	call	1000d774 <__muldf3>
10005bbc:	a80b883a 	mov	r5,r21
10005bc0:	a009883a 	mov	r4,r20
10005bc4:	d8c01115 	stw	r3,68(sp)
10005bc8:	d8800e15 	stw	r2,56(sp)
10005bcc:	000e8b00 	call	1000e8b0 <__fixdfsi>
10005bd0:	1009883a 	mov	r4,r2
10005bd4:	1023883a 	mov	r17,r2
10005bd8:	000e9380 	call	1000e938 <__floatsidf>
10005bdc:	a009883a 	mov	r4,r20
10005be0:	a80b883a 	mov	r5,r21
10005be4:	100d883a 	mov	r6,r2
10005be8:	180f883a 	mov	r7,r3
10005bec:	000dfe00 	call	1000dfe0 <__subdf3>
10005bf0:	1813883a 	mov	r9,r3
10005bf4:	d8c00717 	ldw	r3,28(sp)
10005bf8:	8c400c04 	addi	r17,r17,48
10005bfc:	1011883a 	mov	r8,r2
10005c00:	1c400005 	stb	r17,0(r3)
10005c04:	da801617 	ldw	r10,88(sp)
10005c08:	00800044 	movi	r2,1
10005c0c:	50802326 	beq	r10,r2,10005c9c <_dtoa_r+0x14ac>
10005c10:	d8800717 	ldw	r2,28(sp)
10005c14:	b82b883a 	mov	r21,r23
10005c18:	dc001315 	stw	r16,76(sp)
10005c1c:	12a9883a 	add	r20,r2,r10
10005c20:	4807883a 	mov	r3,r9
10005c24:	4005883a 	mov	r2,r8
10005c28:	dc801415 	stw	r18,80(sp)
10005c2c:	000d883a 	mov	r6,zero
10005c30:	01d00934 	movhi	r7,16420
10005c34:	1009883a 	mov	r4,r2
10005c38:	180b883a 	mov	r5,r3
10005c3c:	000d7740 	call	1000d774 <__muldf3>
10005c40:	180b883a 	mov	r5,r3
10005c44:	1009883a 	mov	r4,r2
10005c48:	1821883a 	mov	r16,r3
10005c4c:	1025883a 	mov	r18,r2
10005c50:	000e8b00 	call	1000e8b0 <__fixdfsi>
10005c54:	1009883a 	mov	r4,r2
10005c58:	1023883a 	mov	r17,r2
10005c5c:	000e9380 	call	1000e938 <__floatsidf>
10005c60:	9009883a 	mov	r4,r18
10005c64:	800b883a 	mov	r5,r16
10005c68:	100d883a 	mov	r6,r2
10005c6c:	180f883a 	mov	r7,r3
10005c70:	8c400c04 	addi	r17,r17,48
10005c74:	000dfe00 	call	1000dfe0 <__subdf3>
10005c78:	ad400044 	addi	r21,r21,1
10005c7c:	ac7fffc5 	stb	r17,-1(r21)
10005c80:	ad3fea1e 	bne	r21,r20,10005c2c <__alt_data_end+0xf8005c2c>
10005c84:	1813883a 	mov	r9,r3
10005c88:	d8c01017 	ldw	r3,64(sp)
10005c8c:	dc001317 	ldw	r16,76(sp)
10005c90:	dc801417 	ldw	r18,80(sp)
10005c94:	1011883a 	mov	r8,r2
10005c98:	b8ef883a 	add	r23,r23,r3
10005c9c:	d9000e17 	ldw	r4,56(sp)
10005ca0:	d9401117 	ldw	r5,68(sp)
10005ca4:	000d883a 	mov	r6,zero
10005ca8:	01cff834 	movhi	r7,16352
10005cac:	da001715 	stw	r8,92(sp)
10005cb0:	da401515 	stw	r9,84(sp)
10005cb4:	000c3140 	call	1000c314 <__adddf3>
10005cb8:	da001717 	ldw	r8,92(sp)
10005cbc:	da401517 	ldw	r9,84(sp)
10005cc0:	1009883a 	mov	r4,r2
10005cc4:	400d883a 	mov	r6,r8
10005cc8:	480f883a 	mov	r7,r9
10005ccc:	180b883a 	mov	r5,r3
10005cd0:	000d6940 	call	1000d694 <__ledf2>
10005cd4:	da001717 	ldw	r8,92(sp)
10005cd8:	da401517 	ldw	r9,84(sp)
10005cdc:	10003b0e 	bge	r2,zero,10005dcc <_dtoa_r+0x15dc>
10005ce0:	d9001217 	ldw	r4,72(sp)
10005ce4:	bd7fffc3 	ldbu	r21,-1(r23)
10005ce8:	d9000515 	stw	r4,20(sp)
10005cec:	003d1c06 	br	10005160 <__alt_data_end+0xf8005160>
10005cf0:	d8c00817 	ldw	r3,32(sp)
10005cf4:	18a9c83a 	sub	r20,r3,r2
10005cf8:	0005883a 	mov	r2,zero
10005cfc:	003d3706 	br	100051dc <__alt_data_end+0xf80051dc>
10005d00:	00800044 	movi	r2,1
10005d04:	003dd006 	br	10005448 <__alt_data_end+0xf8005448>
10005d08:	d8c00217 	ldw	r3,8(sp)
10005d0c:	00800d84 	movi	r2,54
10005d10:	dd400917 	ldw	r21,36(sp)
10005d14:	10c5c83a 	sub	r2,r2,r3
10005d18:	dd000817 	ldw	r20,32(sp)
10005d1c:	003d2f06 	br	100051dc <__alt_data_end+0xf80051dc>
10005d20:	9029883a 	mov	r20,r18
10005d24:	982b883a 	mov	r21,r19
10005d28:	04400084 	movi	r17,2
10005d2c:	003bc606 	br	10004c48 <__alt_data_end+0xf8004c48>
10005d30:	d8800617 	ldw	r2,24(sp)
10005d34:	103efc26 	beq	r2,zero,10005928 <__alt_data_end+0xf8005928>
10005d38:	d8c00d17 	ldw	r3,52(sp)
10005d3c:	00fc890e 	bge	zero,r3,10004f64 <__alt_data_end+0xf8004f64>
10005d40:	a80b883a 	mov	r5,r21
10005d44:	a009883a 	mov	r4,r20
10005d48:	000d883a 	mov	r6,zero
10005d4c:	01d00934 	movhi	r7,16420
10005d50:	000d7740 	call	1000d774 <__muldf3>
10005d54:	89000044 	addi	r4,r17,1
10005d58:	1029883a 	mov	r20,r2
10005d5c:	182b883a 	mov	r21,r3
10005d60:	000e9380 	call	1000e938 <__floatsidf>
10005d64:	a009883a 	mov	r4,r20
10005d68:	a80b883a 	mov	r5,r21
10005d6c:	100d883a 	mov	r6,r2
10005d70:	180f883a 	mov	r7,r3
10005d74:	000d7740 	call	1000d774 <__muldf3>
10005d78:	1009883a 	mov	r4,r2
10005d7c:	180b883a 	mov	r5,r3
10005d80:	000d883a 	mov	r6,zero
10005d84:	01d00734 	movhi	r7,16412
10005d88:	000c3140 	call	1000c314 <__adddf3>
10005d8c:	d9000517 	ldw	r4,20(sp)
10005d90:	1023883a 	mov	r17,r2
10005d94:	00bf3034 	movhi	r2,64704
10005d98:	213fffc4 	addi	r4,r4,-1
10005d9c:	1885883a 	add	r2,r3,r2
10005da0:	d9001215 	stw	r4,72(sp)
10005da4:	d8800e15 	stw	r2,56(sp)
10005da8:	da800d17 	ldw	r10,52(sp)
10005dac:	003bc306 	br	10004cbc <__alt_data_end+0xf8004cbc>
10005db0:	b039883a 	mov	fp,r22
10005db4:	01000e44 	movi	r4,57
10005db8:	8825883a 	mov	r18,r17
10005dbc:	9dc00044 	addi	r23,r19,1
10005dc0:	99000005 	stb	r4,0(r19)
10005dc4:	a023883a 	mov	r17,r20
10005dc8:	003dae06 	br	10005484 <__alt_data_end+0xf8005484>
10005dcc:	d9800e17 	ldw	r6,56(sp)
10005dd0:	d9c01117 	ldw	r7,68(sp)
10005dd4:	0009883a 	mov	r4,zero
10005dd8:	014ff834 	movhi	r5,16352
10005ddc:	da001715 	stw	r8,92(sp)
10005de0:	da401515 	stw	r9,84(sp)
10005de4:	000dfe00 	call	1000dfe0 <__subdf3>
10005de8:	da001717 	ldw	r8,92(sp)
10005dec:	da401517 	ldw	r9,84(sp)
10005df0:	1009883a 	mov	r4,r2
10005df4:	180b883a 	mov	r5,r3
10005df8:	400d883a 	mov	r6,r8
10005dfc:	480f883a 	mov	r7,r9
10005e00:	000d5b40 	call	1000d5b4 <__gedf2>
10005e04:	00bc570e 	bge	zero,r2,10004f64 <__alt_data_end+0xf8004f64>
10005e08:	01000c04 	movi	r4,48
10005e0c:	00000106 	br	10005e14 <_dtoa_r+0x1624>
10005e10:	102f883a 	mov	r23,r2
10005e14:	b8bfffc4 	addi	r2,r23,-1
10005e18:	10c00007 	ldb	r3,0(r2)
10005e1c:	193ffc26 	beq	r3,r4,10005e10 <__alt_data_end+0xf8005e10>
10005e20:	d9801217 	ldw	r6,72(sp)
10005e24:	d9800515 	stw	r6,20(sp)
10005e28:	003c1f06 	br	10004ea8 <__alt_data_end+0xf8004ea8>
10005e2c:	d8801217 	ldw	r2,72(sp)
10005e30:	dc001117 	ldw	r16,68(sp)
10005e34:	d8800515 	stw	r2,20(sp)
10005e38:	003cc906 	br	10005160 <__alt_data_end+0xf8005160>
10005e3c:	dd801317 	ldw	r22,76(sp)
10005e40:	dc001117 	ldw	r16,68(sp)
10005e44:	dcc01417 	ldw	r19,80(sp)
10005e48:	dc801017 	ldw	r18,64(sp)
10005e4c:	003c4506 	br	10004f64 <__alt_data_end+0xf8004f64>
10005e50:	103e5d1e 	bne	r2,zero,100057c8 <__alt_data_end+0xf80057c8>
10005e54:	4080004c 	andi	r2,r8,1
10005e58:	103e5b26 	beq	r2,zero,100057c8 <__alt_data_end+0xf80057c8>
10005e5c:	003e5706 	br	100057bc <__alt_data_end+0xf80057bc>
10005e60:	d8c00317 	ldw	r3,12(sp)
10005e64:	00800084 	movi	r2,2
10005e68:	10c00a16 	blt	r2,r3,10005e94 <_dtoa_r+0x16a4>
10005e6c:	d9000d17 	ldw	r4,52(sp)
10005e70:	003e8306 	br	10005880 <__alt_data_end+0xf8005880>
10005e74:	04400084 	movi	r17,2
10005e78:	003b7306 	br	10004c48 <__alt_data_end+0xf8004c48>
10005e7c:	d9801217 	ldw	r6,72(sp)
10005e80:	d9800515 	stw	r6,20(sp)
10005e84:	003cb606 	br	10005160 <__alt_data_end+0xf8005160>
10005e88:	d9001217 	ldw	r4,72(sp)
10005e8c:	d9000515 	stw	r4,20(sp)
10005e90:	003c0506 	br	10004ea8 <__alt_data_end+0xf8004ea8>
10005e94:	d9800d17 	ldw	r6,52(sp)
10005e98:	d9800615 	stw	r6,24(sp)
10005e9c:	003e8306 	br	100058ac <__alt_data_end+0xf80058ac>
10005ea0:	d9800317 	ldw	r6,12(sp)
10005ea4:	00800084 	movi	r2,2
10005ea8:	11800216 	blt	r2,r6,10005eb4 <_dtoa_r+0x16c4>
10005eac:	d8800d17 	ldw	r2,52(sp)
10005eb0:	003da606 	br	1000554c <__alt_data_end+0xf800554c>
10005eb4:	d8800d17 	ldw	r2,52(sp)
10005eb8:	d8800615 	stw	r2,24(sp)
10005ebc:	003e7b06 	br	100058ac <__alt_data_end+0xf80058ac>
10005ec0:	05000044 	movi	r20,1
10005ec4:	003b0506 	br	10004adc <__alt_data_end+0xf8004adc>
10005ec8:	8009883a 	mov	r4,r16
10005ecc:	80001115 	stw	zero,68(r16)
10005ed0:	000b883a 	mov	r5,zero
10005ed4:	0007e2c0 	call	10007e2c <_Balloc>
10005ed8:	d8800715 	stw	r2,28(sp)
10005edc:	d8c00717 	ldw	r3,28(sp)
10005ee0:	00bfffc4 	movi	r2,-1
10005ee4:	01000044 	movi	r4,1
10005ee8:	d8800615 	stw	r2,24(sp)
10005eec:	80c01015 	stw	r3,64(r16)
10005ef0:	d9000b15 	stw	r4,44(sp)
10005ef4:	d8002215 	stw	zero,136(sp)
10005ef8:	d8800d15 	stw	r2,52(sp)
10005efc:	003c1906 	br	10004f64 <__alt_data_end+0xf8004f64>
10005f00:	193d2926 	beq	r3,r4,100053a8 <__alt_data_end+0xf80053a8>
10005f04:	00c00f04 	movi	r3,60
10005f08:	1885c83a 	sub	r2,r3,r2
10005f0c:	003d7b06 	br	100054fc <__alt_data_end+0xf80054fc>
10005f10:	000b883a 	mov	r5,zero
10005f14:	003b1006 	br	10004b58 <__alt_data_end+0xf8004b58>

10005f18 <_fflush_r>:
10005f18:	defffb04 	addi	sp,sp,-20
10005f1c:	dcc00315 	stw	r19,12(sp)
10005f20:	dc000015 	stw	r16,0(sp)
10005f24:	dfc00415 	stw	ra,16(sp)
10005f28:	dc800215 	stw	r18,8(sp)
10005f2c:	dc400115 	stw	r17,4(sp)
10005f30:	2027883a 	mov	r19,r4
10005f34:	2821883a 	mov	r16,r5
10005f38:	20000226 	beq	r4,zero,10005f44 <_fflush_r+0x2c>
10005f3c:	20800e17 	ldw	r2,56(r4)
10005f40:	10005326 	beq	r2,zero,10006090 <_fflush_r+0x178>
10005f44:	8080030b 	ldhu	r2,12(r16)
10005f48:	10ffffcc 	andi	r3,r2,65535
10005f4c:	18e0001c 	xori	r3,r3,32768
10005f50:	18e00004 	addi	r3,r3,-32768
10005f54:	18002c26 	beq	r3,zero,10006008 <_fflush_r+0xf0>
10005f58:	10c0020c 	andi	r3,r2,8
10005f5c:	1800321e 	bne	r3,zero,10006028 <_fflush_r+0x110>
10005f60:	80c00117 	ldw	r3,4(r16)
10005f64:	10820014 	ori	r2,r2,2048
10005f68:	8080030d 	sth	r2,12(r16)
10005f6c:	00c0570e 	bge	zero,r3,100060cc <_fflush_r+0x1b4>
10005f70:	82000a17 	ldw	r8,40(r16)
10005f74:	40002426 	beq	r8,zero,10006008 <_fflush_r+0xf0>
10005f78:	9c400017 	ldw	r17,0(r19)
10005f7c:	10c4000c 	andi	r3,r2,4096
10005f80:	98000015 	stw	zero,0(r19)
10005f84:	18004626 	beq	r3,zero,100060a0 <_fflush_r+0x188>
10005f88:	81801417 	ldw	r6,80(r16)
10005f8c:	10c0010c 	andi	r3,r2,4
10005f90:	18000626 	beq	r3,zero,10005fac <_fflush_r+0x94>
10005f94:	80c00117 	ldw	r3,4(r16)
10005f98:	80800c17 	ldw	r2,48(r16)
10005f9c:	30cdc83a 	sub	r6,r6,r3
10005fa0:	10000226 	beq	r2,zero,10005fac <_fflush_r+0x94>
10005fa4:	80800f17 	ldw	r2,60(r16)
10005fa8:	308dc83a 	sub	r6,r6,r2
10005fac:	81400717 	ldw	r5,28(r16)
10005fb0:	9809883a 	mov	r4,r19
10005fb4:	000f883a 	mov	r7,zero
10005fb8:	403ee83a 	callr	r8
10005fbc:	00ffffc4 	movi	r3,-1
10005fc0:	10c04526 	beq	r2,r3,100060d8 <_fflush_r+0x1c0>
10005fc4:	80c0030b 	ldhu	r3,12(r16)
10005fc8:	81000417 	ldw	r4,16(r16)
10005fcc:	80000115 	stw	zero,4(r16)
10005fd0:	197dffcc 	andi	r5,r3,63487
10005fd4:	8140030d 	sth	r5,12(r16)
10005fd8:	81000015 	stw	r4,0(r16)
10005fdc:	18c4000c 	andi	r3,r3,4096
10005fe0:	18000126 	beq	r3,zero,10005fe8 <_fflush_r+0xd0>
10005fe4:	80801415 	stw	r2,80(r16)
10005fe8:	81400c17 	ldw	r5,48(r16)
10005fec:	9c400015 	stw	r17,0(r19)
10005ff0:	28000526 	beq	r5,zero,10006008 <_fflush_r+0xf0>
10005ff4:	80801004 	addi	r2,r16,64
10005ff8:	28800226 	beq	r5,r2,10006004 <_fflush_r+0xec>
10005ffc:	9809883a 	mov	r4,r19
10006000:	00066480 	call	10006648 <_free_r>
10006004:	80000c15 	stw	zero,48(r16)
10006008:	0005883a 	mov	r2,zero
1000600c:	dfc00417 	ldw	ra,16(sp)
10006010:	dcc00317 	ldw	r19,12(sp)
10006014:	dc800217 	ldw	r18,8(sp)
10006018:	dc400117 	ldw	r17,4(sp)
1000601c:	dc000017 	ldw	r16,0(sp)
10006020:	dec00504 	addi	sp,sp,20
10006024:	f800283a 	ret
10006028:	84800417 	ldw	r18,16(r16)
1000602c:	903ff626 	beq	r18,zero,10006008 <__alt_data_end+0xf8006008>
10006030:	84400017 	ldw	r17,0(r16)
10006034:	108000cc 	andi	r2,r2,3
10006038:	84800015 	stw	r18,0(r16)
1000603c:	8ca3c83a 	sub	r17,r17,r18
10006040:	10001526 	beq	r2,zero,10006098 <_fflush_r+0x180>
10006044:	0005883a 	mov	r2,zero
10006048:	80800215 	stw	r2,8(r16)
1000604c:	04400316 	blt	zero,r17,1000605c <_fflush_r+0x144>
10006050:	003fed06 	br	10006008 <__alt_data_end+0xf8006008>
10006054:	90a5883a 	add	r18,r18,r2
10006058:	047feb0e 	bge	zero,r17,10006008 <__alt_data_end+0xf8006008>
1000605c:	80800917 	ldw	r2,36(r16)
10006060:	81400717 	ldw	r5,28(r16)
10006064:	880f883a 	mov	r7,r17
10006068:	900d883a 	mov	r6,r18
1000606c:	9809883a 	mov	r4,r19
10006070:	103ee83a 	callr	r2
10006074:	88a3c83a 	sub	r17,r17,r2
10006078:	00bff616 	blt	zero,r2,10006054 <__alt_data_end+0xf8006054>
1000607c:	80c0030b 	ldhu	r3,12(r16)
10006080:	00bfffc4 	movi	r2,-1
10006084:	18c01014 	ori	r3,r3,64
10006088:	80c0030d 	sth	r3,12(r16)
1000608c:	003fdf06 	br	1000600c <__alt_data_end+0xf800600c>
10006090:	00064d40 	call	100064d4 <__sinit>
10006094:	003fab06 	br	10005f44 <__alt_data_end+0xf8005f44>
10006098:	80800517 	ldw	r2,20(r16)
1000609c:	003fea06 	br	10006048 <__alt_data_end+0xf8006048>
100060a0:	81400717 	ldw	r5,28(r16)
100060a4:	000d883a 	mov	r6,zero
100060a8:	9809883a 	mov	r4,r19
100060ac:	01c00044 	movi	r7,1
100060b0:	403ee83a 	callr	r8
100060b4:	100d883a 	mov	r6,r2
100060b8:	00bfffc4 	movi	r2,-1
100060bc:	30801326 	beq	r6,r2,1000610c <_fflush_r+0x1f4>
100060c0:	8080030b 	ldhu	r2,12(r16)
100060c4:	82000a17 	ldw	r8,40(r16)
100060c8:	003fb006 	br	10005f8c <__alt_data_end+0xf8005f8c>
100060cc:	80c00f17 	ldw	r3,60(r16)
100060d0:	00ffa716 	blt	zero,r3,10005f70 <__alt_data_end+0xf8005f70>
100060d4:	003fcc06 	br	10006008 <__alt_data_end+0xf8006008>
100060d8:	98c00017 	ldw	r3,0(r19)
100060dc:	183fb926 	beq	r3,zero,10005fc4 <__alt_data_end+0xf8005fc4>
100060e0:	01000744 	movi	r4,29
100060e4:	19000226 	beq	r3,r4,100060f0 <_fflush_r+0x1d8>
100060e8:	01000584 	movi	r4,22
100060ec:	1900101e 	bne	r3,r4,10006130 <_fflush_r+0x218>
100060f0:	8080030b 	ldhu	r2,12(r16)
100060f4:	80c00417 	ldw	r3,16(r16)
100060f8:	80000115 	stw	zero,4(r16)
100060fc:	10bdffcc 	andi	r2,r2,63487
10006100:	8080030d 	sth	r2,12(r16)
10006104:	80c00015 	stw	r3,0(r16)
10006108:	003fb706 	br	10005fe8 <__alt_data_end+0xf8005fe8>
1000610c:	98800017 	ldw	r2,0(r19)
10006110:	103feb26 	beq	r2,zero,100060c0 <__alt_data_end+0xf80060c0>
10006114:	00c00744 	movi	r3,29
10006118:	10c00226 	beq	r2,r3,10006124 <_fflush_r+0x20c>
1000611c:	00c00584 	movi	r3,22
10006120:	10ffd61e 	bne	r2,r3,1000607c <__alt_data_end+0xf800607c>
10006124:	9c400015 	stw	r17,0(r19)
10006128:	0005883a 	mov	r2,zero
1000612c:	003fb706 	br	1000600c <__alt_data_end+0xf800600c>
10006130:	80c0030b 	ldhu	r3,12(r16)
10006134:	18c01014 	ori	r3,r3,64
10006138:	80c0030d 	sth	r3,12(r16)
1000613c:	003fb306 	br	1000600c <__alt_data_end+0xf800600c>

10006140 <fflush>:
10006140:	20000526 	beq	r4,zero,10006158 <fflush+0x18>
10006144:	00840074 	movhi	r2,4097
10006148:	108e1f04 	addi	r2,r2,14460
1000614c:	200b883a 	mov	r5,r4
10006150:	11000017 	ldw	r4,0(r2)
10006154:	0005f181 	jmpi	10005f18 <_fflush_r>
10006158:	00840074 	movhi	r2,4097
1000615c:	108e1e04 	addi	r2,r2,14456
10006160:	11000017 	ldw	r4,0(r2)
10006164:	01440034 	movhi	r5,4096
10006168:	2957c604 	addi	r5,r5,24344
1000616c:	0006e941 	jmpi	10006e94 <_fwalk_reent>

10006170 <__fp_lock>:
10006170:	0005883a 	mov	r2,zero
10006174:	f800283a 	ret

10006178 <__fp_unlock>:
10006178:	0005883a 	mov	r2,zero
1000617c:	f800283a 	ret

10006180 <_cleanup_r>:
10006180:	01440074 	movhi	r5,4097
10006184:	296ba804 	addi	r5,r5,-20832
10006188:	0006ddc1 	jmpi	10006ddc <_fwalk>

1000618c <__sinit.part.1>:
1000618c:	defff604 	addi	sp,sp,-40
10006190:	00c40034 	movhi	r3,4096
10006194:	dfc00915 	stw	ra,36(sp)
10006198:	df000815 	stw	fp,32(sp)
1000619c:	ddc00715 	stw	r23,28(sp)
100061a0:	dd800615 	stw	r22,24(sp)
100061a4:	dd400515 	stw	r21,20(sp)
100061a8:	dd000415 	stw	r20,16(sp)
100061ac:	dcc00315 	stw	r19,12(sp)
100061b0:	dc800215 	stw	r18,8(sp)
100061b4:	dc400115 	stw	r17,4(sp)
100061b8:	dc000015 	stw	r16,0(sp)
100061bc:	18d86004 	addi	r3,r3,24960
100061c0:	24000117 	ldw	r16,4(r4)
100061c4:	20c00f15 	stw	r3,60(r4)
100061c8:	07000044 	movi	fp,1
100061cc:	00c000c4 	movi	r3,3
100061d0:	2080bb04 	addi	r2,r4,748
100061d4:	20c0b915 	stw	r3,740(r4)
100061d8:	27000e15 	stw	fp,56(r4)
100061dc:	2080ba15 	stw	r2,744(r4)
100061e0:	2000b815 	stw	zero,736(r4)
100061e4:	05c00204 	movi	r23,8
100061e8:	00800104 	movi	r2,4
100061ec:	2025883a 	mov	r18,r4
100061f0:	b80d883a 	mov	r6,r23
100061f4:	81001704 	addi	r4,r16,92
100061f8:	000b883a 	mov	r5,zero
100061fc:	80000015 	stw	zero,0(r16)
10006200:	80000115 	stw	zero,4(r16)
10006204:	80000215 	stw	zero,8(r16)
10006208:	8080030d 	sth	r2,12(r16)
1000620c:	80001915 	stw	zero,100(r16)
10006210:	8000038d 	sth	zero,14(r16)
10006214:	80000415 	stw	zero,16(r16)
10006218:	80000515 	stw	zero,20(r16)
1000621c:	80000615 	stw	zero,24(r16)
10006220:	0007d080 	call	10007d08 <memset>
10006224:	05840074 	movhi	r22,4097
10006228:	94400217 	ldw	r17,8(r18)
1000622c:	05440074 	movhi	r21,4097
10006230:	05040074 	movhi	r20,4097
10006234:	04c40074 	movhi	r19,4097
10006238:	b5a53704 	addi	r22,r22,-27428
1000623c:	ad654e04 	addi	r21,r21,-27336
10006240:	a5256d04 	addi	r20,r20,-27212
10006244:	9ce58404 	addi	r19,r19,-27120
10006248:	85800815 	stw	r22,32(r16)
1000624c:	85400915 	stw	r21,36(r16)
10006250:	85000a15 	stw	r20,40(r16)
10006254:	84c00b15 	stw	r19,44(r16)
10006258:	84000715 	stw	r16,28(r16)
1000625c:	00800284 	movi	r2,10
10006260:	89001704 	addi	r4,r17,92
10006264:	b80d883a 	mov	r6,r23
10006268:	000b883a 	mov	r5,zero
1000626c:	88000015 	stw	zero,0(r17)
10006270:	88000115 	stw	zero,4(r17)
10006274:	88000215 	stw	zero,8(r17)
10006278:	8880030d 	sth	r2,12(r17)
1000627c:	88001915 	stw	zero,100(r17)
10006280:	8f00038d 	sth	fp,14(r17)
10006284:	88000415 	stw	zero,16(r17)
10006288:	88000515 	stw	zero,20(r17)
1000628c:	88000615 	stw	zero,24(r17)
10006290:	0007d080 	call	10007d08 <memset>
10006294:	94000317 	ldw	r16,12(r18)
10006298:	00800484 	movi	r2,18
1000629c:	8c400715 	stw	r17,28(r17)
100062a0:	8d800815 	stw	r22,32(r17)
100062a4:	8d400915 	stw	r21,36(r17)
100062a8:	8d000a15 	stw	r20,40(r17)
100062ac:	8cc00b15 	stw	r19,44(r17)
100062b0:	8080030d 	sth	r2,12(r16)
100062b4:	00800084 	movi	r2,2
100062b8:	80000015 	stw	zero,0(r16)
100062bc:	80000115 	stw	zero,4(r16)
100062c0:	80000215 	stw	zero,8(r16)
100062c4:	80001915 	stw	zero,100(r16)
100062c8:	8080038d 	sth	r2,14(r16)
100062cc:	80000415 	stw	zero,16(r16)
100062d0:	80000515 	stw	zero,20(r16)
100062d4:	80000615 	stw	zero,24(r16)
100062d8:	81001704 	addi	r4,r16,92
100062dc:	000b883a 	mov	r5,zero
100062e0:	b80d883a 	mov	r6,r23
100062e4:	0007d080 	call	10007d08 <memset>
100062e8:	84000715 	stw	r16,28(r16)
100062ec:	85800815 	stw	r22,32(r16)
100062f0:	85400915 	stw	r21,36(r16)
100062f4:	85000a15 	stw	r20,40(r16)
100062f8:	84c00b15 	stw	r19,44(r16)
100062fc:	dfc00917 	ldw	ra,36(sp)
10006300:	df000817 	ldw	fp,32(sp)
10006304:	ddc00717 	ldw	r23,28(sp)
10006308:	dd800617 	ldw	r22,24(sp)
1000630c:	dd400517 	ldw	r21,20(sp)
10006310:	dd000417 	ldw	r20,16(sp)
10006314:	dcc00317 	ldw	r19,12(sp)
10006318:	dc800217 	ldw	r18,8(sp)
1000631c:	dc400117 	ldw	r17,4(sp)
10006320:	dc000017 	ldw	r16,0(sp)
10006324:	dec00a04 	addi	sp,sp,40
10006328:	f800283a 	ret

1000632c <__sfmoreglue>:
1000632c:	defffc04 	addi	sp,sp,-16
10006330:	dc800215 	stw	r18,8(sp)
10006334:	2825883a 	mov	r18,r5
10006338:	dc000015 	stw	r16,0(sp)
1000633c:	01401a04 	movi	r5,104
10006340:	2021883a 	mov	r16,r4
10006344:	9009883a 	mov	r4,r18
10006348:	dfc00315 	stw	ra,12(sp)
1000634c:	dc400115 	stw	r17,4(sp)
10006350:	000c2ec0 	call	1000c2ec <__mulsi3>
10006354:	8009883a 	mov	r4,r16
10006358:	11400304 	addi	r5,r2,12
1000635c:	1023883a 	mov	r17,r2
10006360:	00071e40 	call	100071e4 <_malloc_r>
10006364:	1021883a 	mov	r16,r2
10006368:	10000726 	beq	r2,zero,10006388 <__sfmoreglue+0x5c>
1000636c:	11000304 	addi	r4,r2,12
10006370:	10000015 	stw	zero,0(r2)
10006374:	14800115 	stw	r18,4(r2)
10006378:	11000215 	stw	r4,8(r2)
1000637c:	000b883a 	mov	r5,zero
10006380:	880d883a 	mov	r6,r17
10006384:	0007d080 	call	10007d08 <memset>
10006388:	8005883a 	mov	r2,r16
1000638c:	dfc00317 	ldw	ra,12(sp)
10006390:	dc800217 	ldw	r18,8(sp)
10006394:	dc400117 	ldw	r17,4(sp)
10006398:	dc000017 	ldw	r16,0(sp)
1000639c:	dec00404 	addi	sp,sp,16
100063a0:	f800283a 	ret

100063a4 <__sfp>:
100063a4:	00840074 	movhi	r2,4097
100063a8:	defffb04 	addi	sp,sp,-20
100063ac:	108e1e04 	addi	r2,r2,14456
100063b0:	dc800215 	stw	r18,8(sp)
100063b4:	14800017 	ldw	r18,0(r2)
100063b8:	dcc00315 	stw	r19,12(sp)
100063bc:	dfc00415 	stw	ra,16(sp)
100063c0:	90800e17 	ldw	r2,56(r18)
100063c4:	dc400115 	stw	r17,4(sp)
100063c8:	dc000015 	stw	r16,0(sp)
100063cc:	2027883a 	mov	r19,r4
100063d0:	1000021e 	bne	r2,zero,100063dc <__sfp+0x38>
100063d4:	9009883a 	mov	r4,r18
100063d8:	000618c0 	call	1000618c <__sinit.part.1>
100063dc:	9480b804 	addi	r18,r18,736
100063e0:	047fffc4 	movi	r17,-1
100063e4:	91400117 	ldw	r5,4(r18)
100063e8:	94000217 	ldw	r16,8(r18)
100063ec:	297fffc4 	addi	r5,r5,-1
100063f0:	28000a16 	blt	r5,zero,1000641c <__sfp+0x78>
100063f4:	8080030f 	ldh	r2,12(r16)
100063f8:	10000c26 	beq	r2,zero,1000642c <__sfp+0x88>
100063fc:	80c01d04 	addi	r3,r16,116
10006400:	00000206 	br	1000640c <__sfp+0x68>
10006404:	18bfe60f 	ldh	r2,-104(r3)
10006408:	10000826 	beq	r2,zero,1000642c <__sfp+0x88>
1000640c:	297fffc4 	addi	r5,r5,-1
10006410:	1c3ffd04 	addi	r16,r3,-12
10006414:	18c01a04 	addi	r3,r3,104
10006418:	2c7ffa1e 	bne	r5,r17,10006404 <__alt_data_end+0xf8006404>
1000641c:	90800017 	ldw	r2,0(r18)
10006420:	10001d26 	beq	r2,zero,10006498 <__sfp+0xf4>
10006424:	1025883a 	mov	r18,r2
10006428:	003fee06 	br	100063e4 <__alt_data_end+0xf80063e4>
1000642c:	00bfffc4 	movi	r2,-1
10006430:	8080038d 	sth	r2,14(r16)
10006434:	00800044 	movi	r2,1
10006438:	8080030d 	sth	r2,12(r16)
1000643c:	80001915 	stw	zero,100(r16)
10006440:	80000015 	stw	zero,0(r16)
10006444:	80000215 	stw	zero,8(r16)
10006448:	80000115 	stw	zero,4(r16)
1000644c:	80000415 	stw	zero,16(r16)
10006450:	80000515 	stw	zero,20(r16)
10006454:	80000615 	stw	zero,24(r16)
10006458:	81001704 	addi	r4,r16,92
1000645c:	000b883a 	mov	r5,zero
10006460:	01800204 	movi	r6,8
10006464:	0007d080 	call	10007d08 <memset>
10006468:	8005883a 	mov	r2,r16
1000646c:	80000c15 	stw	zero,48(r16)
10006470:	80000d15 	stw	zero,52(r16)
10006474:	80001115 	stw	zero,68(r16)
10006478:	80001215 	stw	zero,72(r16)
1000647c:	dfc00417 	ldw	ra,16(sp)
10006480:	dcc00317 	ldw	r19,12(sp)
10006484:	dc800217 	ldw	r18,8(sp)
10006488:	dc400117 	ldw	r17,4(sp)
1000648c:	dc000017 	ldw	r16,0(sp)
10006490:	dec00504 	addi	sp,sp,20
10006494:	f800283a 	ret
10006498:	9809883a 	mov	r4,r19
1000649c:	01400104 	movi	r5,4
100064a0:	000632c0 	call	1000632c <__sfmoreglue>
100064a4:	90800015 	stw	r2,0(r18)
100064a8:	103fde1e 	bne	r2,zero,10006424 <__alt_data_end+0xf8006424>
100064ac:	00800304 	movi	r2,12
100064b0:	98800015 	stw	r2,0(r19)
100064b4:	0005883a 	mov	r2,zero
100064b8:	003ff006 	br	1000647c <__alt_data_end+0xf800647c>

100064bc <_cleanup>:
100064bc:	00840074 	movhi	r2,4097
100064c0:	108e1e04 	addi	r2,r2,14456
100064c4:	11000017 	ldw	r4,0(r2)
100064c8:	01440074 	movhi	r5,4097
100064cc:	296ba804 	addi	r5,r5,-20832
100064d0:	0006ddc1 	jmpi	10006ddc <_fwalk>

100064d4 <__sinit>:
100064d4:	20800e17 	ldw	r2,56(r4)
100064d8:	10000126 	beq	r2,zero,100064e0 <__sinit+0xc>
100064dc:	f800283a 	ret
100064e0:	000618c1 	jmpi	1000618c <__sinit.part.1>

100064e4 <__sfp_lock_acquire>:
100064e4:	f800283a 	ret

100064e8 <__sfp_lock_release>:
100064e8:	f800283a 	ret

100064ec <__sinit_lock_acquire>:
100064ec:	f800283a 	ret

100064f0 <__sinit_lock_release>:
100064f0:	f800283a 	ret

100064f4 <__fp_lock_all>:
100064f4:	00840074 	movhi	r2,4097
100064f8:	108e1f04 	addi	r2,r2,14460
100064fc:	11000017 	ldw	r4,0(r2)
10006500:	01440034 	movhi	r5,4096
10006504:	29585c04 	addi	r5,r5,24944
10006508:	0006ddc1 	jmpi	10006ddc <_fwalk>

1000650c <__fp_unlock_all>:
1000650c:	00840074 	movhi	r2,4097
10006510:	108e1f04 	addi	r2,r2,14460
10006514:	11000017 	ldw	r4,0(r2)
10006518:	01440034 	movhi	r5,4096
1000651c:	29585e04 	addi	r5,r5,24952
10006520:	0006ddc1 	jmpi	10006ddc <_fwalk>

10006524 <_malloc_trim_r>:
10006524:	defffb04 	addi	sp,sp,-20
10006528:	dcc00315 	stw	r19,12(sp)
1000652c:	04c40074 	movhi	r19,4097
10006530:	dc800215 	stw	r18,8(sp)
10006534:	dc400115 	stw	r17,4(sp)
10006538:	dc000015 	stw	r16,0(sp)
1000653c:	dfc00415 	stw	ra,16(sp)
10006540:	2821883a 	mov	r16,r5
10006544:	9cc89a04 	addi	r19,r19,8808
10006548:	2025883a 	mov	r18,r4
1000654c:	000f0f00 	call	1000f0f0 <__malloc_lock>
10006550:	98800217 	ldw	r2,8(r19)
10006554:	14400117 	ldw	r17,4(r2)
10006558:	00bfff04 	movi	r2,-4
1000655c:	88a2703a 	and	r17,r17,r2
10006560:	8c21c83a 	sub	r16,r17,r16
10006564:	8403fbc4 	addi	r16,r16,4079
10006568:	8020d33a 	srli	r16,r16,12
1000656c:	0083ffc4 	movi	r2,4095
10006570:	843fffc4 	addi	r16,r16,-1
10006574:	8020933a 	slli	r16,r16,12
10006578:	1400060e 	bge	r2,r16,10006594 <_malloc_trim_r+0x70>
1000657c:	9009883a 	mov	r4,r18
10006580:	000b883a 	mov	r5,zero
10006584:	00094880 	call	10009488 <_sbrk_r>
10006588:	98c00217 	ldw	r3,8(r19)
1000658c:	1c47883a 	add	r3,r3,r17
10006590:	10c00a26 	beq	r2,r3,100065bc <_malloc_trim_r+0x98>
10006594:	9009883a 	mov	r4,r18
10006598:	000f1100 	call	1000f110 <__malloc_unlock>
1000659c:	0005883a 	mov	r2,zero
100065a0:	dfc00417 	ldw	ra,16(sp)
100065a4:	dcc00317 	ldw	r19,12(sp)
100065a8:	dc800217 	ldw	r18,8(sp)
100065ac:	dc400117 	ldw	r17,4(sp)
100065b0:	dc000017 	ldw	r16,0(sp)
100065b4:	dec00504 	addi	sp,sp,20
100065b8:	f800283a 	ret
100065bc:	9009883a 	mov	r4,r18
100065c0:	040bc83a 	sub	r5,zero,r16
100065c4:	00094880 	call	10009488 <_sbrk_r>
100065c8:	00ffffc4 	movi	r3,-1
100065cc:	10c00d26 	beq	r2,r3,10006604 <_malloc_trim_r+0xe0>
100065d0:	00c40074 	movhi	r3,4097
100065d4:	18d4f704 	addi	r3,r3,21468
100065d8:	18800017 	ldw	r2,0(r3)
100065dc:	99000217 	ldw	r4,8(r19)
100065e0:	8c23c83a 	sub	r17,r17,r16
100065e4:	8c400054 	ori	r17,r17,1
100065e8:	1421c83a 	sub	r16,r2,r16
100065ec:	24400115 	stw	r17,4(r4)
100065f0:	9009883a 	mov	r4,r18
100065f4:	1c000015 	stw	r16,0(r3)
100065f8:	000f1100 	call	1000f110 <__malloc_unlock>
100065fc:	00800044 	movi	r2,1
10006600:	003fe706 	br	100065a0 <__alt_data_end+0xf80065a0>
10006604:	9009883a 	mov	r4,r18
10006608:	000b883a 	mov	r5,zero
1000660c:	00094880 	call	10009488 <_sbrk_r>
10006610:	99000217 	ldw	r4,8(r19)
10006614:	014003c4 	movi	r5,15
10006618:	1107c83a 	sub	r3,r2,r4
1000661c:	28ffdd0e 	bge	r5,r3,10006594 <__alt_data_end+0xf8006594>
10006620:	01440074 	movhi	r5,4097
10006624:	294e2104 	addi	r5,r5,14468
10006628:	29400017 	ldw	r5,0(r5)
1000662c:	18c00054 	ori	r3,r3,1
10006630:	20c00115 	stw	r3,4(r4)
10006634:	00c40074 	movhi	r3,4097
10006638:	1145c83a 	sub	r2,r2,r5
1000663c:	18d4f704 	addi	r3,r3,21468
10006640:	18800015 	stw	r2,0(r3)
10006644:	003fd306 	br	10006594 <__alt_data_end+0xf8006594>

10006648 <_free_r>:
10006648:	28004c26 	beq	r5,zero,1000677c <_free_r+0x134>
1000664c:	defffd04 	addi	sp,sp,-12
10006650:	dc400115 	stw	r17,4(sp)
10006654:	dc000015 	stw	r16,0(sp)
10006658:	2023883a 	mov	r17,r4
1000665c:	2821883a 	mov	r16,r5
10006660:	dfc00215 	stw	ra,8(sp)
10006664:	000f0f00 	call	1000f0f0 <__malloc_lock>
10006668:	813fff17 	ldw	r4,-4(r16)
1000666c:	00bfff84 	movi	r2,-2
10006670:	02440074 	movhi	r9,4097
10006674:	81bffe04 	addi	r6,r16,-8
10006678:	2084703a 	and	r2,r4,r2
1000667c:	4a489a04 	addi	r9,r9,8808
10006680:	308b883a 	add	r5,r6,r2
10006684:	2a000117 	ldw	r8,4(r5)
10006688:	49c00217 	ldw	r7,8(r9)
1000668c:	00ffff04 	movi	r3,-4
10006690:	40c6703a 	and	r3,r8,r3
10006694:	39405326 	beq	r7,r5,100067e4 <_free_r+0x19c>
10006698:	28c00115 	stw	r3,4(r5)
1000669c:	2100004c 	andi	r4,r4,1
100066a0:	2000091e 	bne	r4,zero,100066c8 <_free_r+0x80>
100066a4:	81fffe17 	ldw	r7,-8(r16)
100066a8:	4a000204 	addi	r8,r9,8
100066ac:	31cdc83a 	sub	r6,r6,r7
100066b0:	31000217 	ldw	r4,8(r6)
100066b4:	11c5883a 	add	r2,r2,r7
100066b8:	22006126 	beq	r4,r8,10006840 <_free_r+0x1f8>
100066bc:	31c00317 	ldw	r7,12(r6)
100066c0:	21c00315 	stw	r7,12(r4)
100066c4:	39000215 	stw	r4,8(r7)
100066c8:	28c9883a 	add	r4,r5,r3
100066cc:	21c00117 	ldw	r7,4(r4)
100066d0:	39c0004c 	andi	r7,r7,1
100066d4:	38000d1e 	bne	r7,zero,1000670c <_free_r+0xc4>
100066d8:	29000217 	ldw	r4,8(r5)
100066dc:	10c5883a 	add	r2,r2,r3
100066e0:	00c40074 	movhi	r3,4097
100066e4:	18c89c04 	addi	r3,r3,8816
100066e8:	20c07526 	beq	r4,r3,100068c0 <_free_r+0x278>
100066ec:	29c00317 	ldw	r7,12(r5)
100066f0:	11400054 	ori	r5,r2,1
100066f4:	3087883a 	add	r3,r6,r2
100066f8:	21c00315 	stw	r7,12(r4)
100066fc:	39000215 	stw	r4,8(r7)
10006700:	31400115 	stw	r5,4(r6)
10006704:	18800015 	stw	r2,0(r3)
10006708:	00000406 	br	1000671c <_free_r+0xd4>
1000670c:	10c00054 	ori	r3,r2,1
10006710:	30c00115 	stw	r3,4(r6)
10006714:	3087883a 	add	r3,r6,r2
10006718:	18800015 	stw	r2,0(r3)
1000671c:	00c07fc4 	movi	r3,511
10006720:	18801736 	bltu	r3,r2,10006780 <_free_r+0x138>
10006724:	1004d0fa 	srli	r2,r2,3
10006728:	01400044 	movi	r5,1
1000672c:	49000117 	ldw	r4,4(r9)
10006730:	1087883a 	add	r3,r2,r2
10006734:	18c7883a 	add	r3,r3,r3
10006738:	1005d0ba 	srai	r2,r2,2
1000673c:	18c7883a 	add	r3,r3,r3
10006740:	1a47883a 	add	r3,r3,r9
10006744:	19c00217 	ldw	r7,8(r3)
10006748:	2884983a 	sll	r2,r5,r2
1000674c:	30c00315 	stw	r3,12(r6)
10006750:	31c00215 	stw	r7,8(r6)
10006754:	1104b03a 	or	r2,r2,r4
10006758:	19800215 	stw	r6,8(r3)
1000675c:	48800115 	stw	r2,4(r9)
10006760:	39800315 	stw	r6,12(r7)
10006764:	8809883a 	mov	r4,r17
10006768:	dfc00217 	ldw	ra,8(sp)
1000676c:	dc400117 	ldw	r17,4(sp)
10006770:	dc000017 	ldw	r16,0(sp)
10006774:	dec00304 	addi	sp,sp,12
10006778:	000f1101 	jmpi	1000f110 <__malloc_unlock>
1000677c:	f800283a 	ret
10006780:	1006d27a 	srli	r3,r2,9
10006784:	01000104 	movi	r4,4
10006788:	20c04036 	bltu	r4,r3,1000688c <_free_r+0x244>
1000678c:	1006d1ba 	srli	r3,r2,6
10006790:	19400e04 	addi	r5,r3,56
10006794:	2947883a 	add	r3,r5,r5
10006798:	18c7883a 	add	r3,r3,r3
1000679c:	18c7883a 	add	r3,r3,r3
100067a0:	1a49883a 	add	r4,r3,r9
100067a4:	20c00217 	ldw	r3,8(r4)
100067a8:	01c40074 	movhi	r7,4097
100067ac:	39c89a04 	addi	r7,r7,8808
100067b0:	19003b26 	beq	r3,r4,100068a0 <_free_r+0x258>
100067b4:	01ffff04 	movi	r7,-4
100067b8:	19400117 	ldw	r5,4(r3)
100067bc:	29ca703a 	and	r5,r5,r7
100067c0:	1140022e 	bgeu	r2,r5,100067cc <_free_r+0x184>
100067c4:	18c00217 	ldw	r3,8(r3)
100067c8:	20fffb1e 	bne	r4,r3,100067b8 <__alt_data_end+0xf80067b8>
100067cc:	18800317 	ldw	r2,12(r3)
100067d0:	30800315 	stw	r2,12(r6)
100067d4:	30c00215 	stw	r3,8(r6)
100067d8:	11800215 	stw	r6,8(r2)
100067dc:	19800315 	stw	r6,12(r3)
100067e0:	003fe006 	br	10006764 <__alt_data_end+0xf8006764>
100067e4:	2100004c 	andi	r4,r4,1
100067e8:	1885883a 	add	r2,r3,r2
100067ec:	2000071e 	bne	r4,zero,1000680c <_free_r+0x1c4>
100067f0:	817ffe17 	ldw	r5,-8(r16)
100067f4:	314dc83a 	sub	r6,r6,r5
100067f8:	30c00317 	ldw	r3,12(r6)
100067fc:	31000217 	ldw	r4,8(r6)
10006800:	1145883a 	add	r2,r2,r5
10006804:	20c00315 	stw	r3,12(r4)
10006808:	19000215 	stw	r4,8(r3)
1000680c:	10c00054 	ori	r3,r2,1
10006810:	30c00115 	stw	r3,4(r6)
10006814:	00c40074 	movhi	r3,4097
10006818:	18ce2204 	addi	r3,r3,14472
1000681c:	18c00017 	ldw	r3,0(r3)
10006820:	49800215 	stw	r6,8(r9)
10006824:	10ffcf36 	bltu	r2,r3,10006764 <__alt_data_end+0xf8006764>
10006828:	00840074 	movhi	r2,4097
1000682c:	1094ef04 	addi	r2,r2,21436
10006830:	11400017 	ldw	r5,0(r2)
10006834:	8809883a 	mov	r4,r17
10006838:	00065240 	call	10006524 <_malloc_trim_r>
1000683c:	003fc906 	br	10006764 <__alt_data_end+0xf8006764>
10006840:	28c9883a 	add	r4,r5,r3
10006844:	21000117 	ldw	r4,4(r4)
10006848:	2100004c 	andi	r4,r4,1
1000684c:	20000a1e 	bne	r4,zero,10006878 <_free_r+0x230>
10006850:	29000317 	ldw	r4,12(r5)
10006854:	29400217 	ldw	r5,8(r5)
10006858:	10c5883a 	add	r2,r2,r3
1000685c:	10c00054 	ori	r3,r2,1
10006860:	29000315 	stw	r4,12(r5)
10006864:	21400215 	stw	r5,8(r4)
10006868:	30c00115 	stw	r3,4(r6)
1000686c:	308d883a 	add	r6,r6,r2
10006870:	30800015 	stw	r2,0(r6)
10006874:	003fbb06 	br	10006764 <__alt_data_end+0xf8006764>
10006878:	10c00054 	ori	r3,r2,1
1000687c:	30c00115 	stw	r3,4(r6)
10006880:	308d883a 	add	r6,r6,r2
10006884:	30800015 	stw	r2,0(r6)
10006888:	003fb606 	br	10006764 <__alt_data_end+0xf8006764>
1000688c:	01000504 	movi	r4,20
10006890:	20c01436 	bltu	r4,r3,100068e4 <_free_r+0x29c>
10006894:	194016c4 	addi	r5,r3,91
10006898:	2947883a 	add	r3,r5,r5
1000689c:	003fbe06 	br	10006798 <__alt_data_end+0xf8006798>
100068a0:	280bd0ba 	srai	r5,r5,2
100068a4:	00800044 	movi	r2,1
100068a8:	39000117 	ldw	r4,4(r7)
100068ac:	114a983a 	sll	r5,r2,r5
100068b0:	1805883a 	mov	r2,r3
100068b4:	2908b03a 	or	r4,r5,r4
100068b8:	39000115 	stw	r4,4(r7)
100068bc:	003fc406 	br	100067d0 <__alt_data_end+0xf80067d0>
100068c0:	49800515 	stw	r6,20(r9)
100068c4:	49800415 	stw	r6,16(r9)
100068c8:	10c00054 	ori	r3,r2,1
100068cc:	31000315 	stw	r4,12(r6)
100068d0:	31000215 	stw	r4,8(r6)
100068d4:	30c00115 	stw	r3,4(r6)
100068d8:	308d883a 	add	r6,r6,r2
100068dc:	30800015 	stw	r2,0(r6)
100068e0:	003fa006 	br	10006764 <__alt_data_end+0xf8006764>
100068e4:	01001504 	movi	r4,84
100068e8:	20c00436 	bltu	r4,r3,100068fc <_free_r+0x2b4>
100068ec:	1006d33a 	srli	r3,r2,12
100068f0:	19401b84 	addi	r5,r3,110
100068f4:	2947883a 	add	r3,r5,r5
100068f8:	003fa706 	br	10006798 <__alt_data_end+0xf8006798>
100068fc:	01005504 	movi	r4,340
10006900:	20c00436 	bltu	r4,r3,10006914 <_free_r+0x2cc>
10006904:	1006d3fa 	srli	r3,r2,15
10006908:	19401dc4 	addi	r5,r3,119
1000690c:	2947883a 	add	r3,r5,r5
10006910:	003fa106 	br	10006798 <__alt_data_end+0xf8006798>
10006914:	01015504 	movi	r4,1364
10006918:	20c00436 	bltu	r4,r3,1000692c <_free_r+0x2e4>
1000691c:	1006d4ba 	srli	r3,r2,18
10006920:	19401f04 	addi	r5,r3,124
10006924:	2947883a 	add	r3,r5,r5
10006928:	003f9b06 	br	10006798 <__alt_data_end+0xf8006798>
1000692c:	00c03f04 	movi	r3,252
10006930:	01401f84 	movi	r5,126
10006934:	003f9806 	br	10006798 <__alt_data_end+0xf8006798>

10006938 <__sfvwrite_r>:
10006938:	30800217 	ldw	r2,8(r6)
1000693c:	10004526 	beq	r2,zero,10006a54 <__sfvwrite_r+0x11c>
10006940:	28c0030b 	ldhu	r3,12(r5)
10006944:	defff404 	addi	sp,sp,-48
10006948:	dd400715 	stw	r21,28(sp)
1000694c:	dcc00515 	stw	r19,20(sp)
10006950:	dc000215 	stw	r16,8(sp)
10006954:	dfc00b15 	stw	ra,44(sp)
10006958:	df000a15 	stw	fp,40(sp)
1000695c:	ddc00915 	stw	r23,36(sp)
10006960:	dd800815 	stw	r22,32(sp)
10006964:	dd000615 	stw	r20,24(sp)
10006968:	dc800415 	stw	r18,16(sp)
1000696c:	dc400315 	stw	r17,12(sp)
10006970:	1880020c 	andi	r2,r3,8
10006974:	2821883a 	mov	r16,r5
10006978:	202b883a 	mov	r21,r4
1000697c:	3027883a 	mov	r19,r6
10006980:	10002526 	beq	r2,zero,10006a18 <__sfvwrite_r+0xe0>
10006984:	28800417 	ldw	r2,16(r5)
10006988:	10002326 	beq	r2,zero,10006a18 <__sfvwrite_r+0xe0>
1000698c:	1880008c 	andi	r2,r3,2
10006990:	9c400017 	ldw	r17,0(r19)
10006994:	10003126 	beq	r2,zero,10006a5c <__sfvwrite_r+0x124>
10006998:	0029883a 	mov	r20,zero
1000699c:	0025883a 	mov	r18,zero
100069a0:	05810004 	movi	r22,1024
100069a4:	a00d883a 	mov	r6,r20
100069a8:	a809883a 	mov	r4,r21
100069ac:	90002526 	beq	r18,zero,10006a44 <__sfvwrite_r+0x10c>
100069b0:	900f883a 	mov	r7,r18
100069b4:	81400717 	ldw	r5,28(r16)
100069b8:	b480012e 	bgeu	r22,r18,100069c0 <__sfvwrite_r+0x88>
100069bc:	01c10004 	movi	r7,1024
100069c0:	80800917 	ldw	r2,36(r16)
100069c4:	103ee83a 	callr	r2
100069c8:	0080510e 	bge	zero,r2,10006b10 <__sfvwrite_r+0x1d8>
100069cc:	98c00217 	ldw	r3,8(r19)
100069d0:	a0a9883a 	add	r20,r20,r2
100069d4:	90a5c83a 	sub	r18,r18,r2
100069d8:	1885c83a 	sub	r2,r3,r2
100069dc:	98800215 	stw	r2,8(r19)
100069e0:	103ff01e 	bne	r2,zero,100069a4 <__alt_data_end+0xf80069a4>
100069e4:	0005883a 	mov	r2,zero
100069e8:	dfc00b17 	ldw	ra,44(sp)
100069ec:	df000a17 	ldw	fp,40(sp)
100069f0:	ddc00917 	ldw	r23,36(sp)
100069f4:	dd800817 	ldw	r22,32(sp)
100069f8:	dd400717 	ldw	r21,28(sp)
100069fc:	dd000617 	ldw	r20,24(sp)
10006a00:	dcc00517 	ldw	r19,20(sp)
10006a04:	dc800417 	ldw	r18,16(sp)
10006a08:	dc400317 	ldw	r17,12(sp)
10006a0c:	dc000217 	ldw	r16,8(sp)
10006a10:	dec00c04 	addi	sp,sp,48
10006a14:	f800283a 	ret
10006a18:	a809883a 	mov	r4,r21
10006a1c:	800b883a 	mov	r5,r16
10006a20:	00044980 	call	10004498 <__swsetup_r>
10006a24:	80c0030b 	ldhu	r3,12(r16)
10006a28:	103fd826 	beq	r2,zero,1000698c <__alt_data_end+0xf800698c>
10006a2c:	18c01014 	ori	r3,r3,64
10006a30:	80c0030d 	sth	r3,12(r16)
10006a34:	00c00244 	movi	r3,9
10006a38:	00bfffc4 	movi	r2,-1
10006a3c:	a8c00015 	stw	r3,0(r21)
10006a40:	003fe906 	br	100069e8 <__alt_data_end+0xf80069e8>
10006a44:	8d000017 	ldw	r20,0(r17)
10006a48:	8c800117 	ldw	r18,4(r17)
10006a4c:	8c400204 	addi	r17,r17,8
10006a50:	003fd406 	br	100069a4 <__alt_data_end+0xf80069a4>
10006a54:	0005883a 	mov	r2,zero
10006a58:	f800283a 	ret
10006a5c:	1880004c 	andi	r2,r3,1
10006a60:	1000301e 	bne	r2,zero,10006b24 <__sfvwrite_r+0x1ec>
10006a64:	002f883a 	mov	r23,zero
10006a68:	0025883a 	mov	r18,zero
10006a6c:	90001c26 	beq	r18,zero,10006ae0 <__sfvwrite_r+0x1a8>
10006a70:	1880800c 	andi	r2,r3,512
10006a74:	85000217 	ldw	r20,8(r16)
10006a78:	10006c26 	beq	r2,zero,10006c2c <__sfvwrite_r+0x2f4>
10006a7c:	a02d883a 	mov	r22,r20
10006a80:	95008536 	bltu	r18,r20,10006c98 <__sfvwrite_r+0x360>
10006a84:	1881200c 	andi	r2,r3,1152
10006a88:	10009d1e 	bne	r2,zero,10006d00 <__sfvwrite_r+0x3c8>
10006a8c:	81000017 	ldw	r4,0(r16)
10006a90:	a039883a 	mov	fp,r20
10006a94:	9029883a 	mov	r20,r18
10006a98:	b80b883a 	mov	r5,r23
10006a9c:	b00d883a 	mov	r6,r22
10006aa0:	0007bac0 	call	10007bac <memmove>
10006aa4:	80c00217 	ldw	r3,8(r16)
10006aa8:	81000017 	ldw	r4,0(r16)
10006aac:	9005883a 	mov	r2,r18
10006ab0:	1f39c83a 	sub	fp,r3,fp
10006ab4:	258f883a 	add	r7,r4,r22
10006ab8:	87000215 	stw	fp,8(r16)
10006abc:	81c00015 	stw	r7,0(r16)
10006ac0:	98c00217 	ldw	r3,8(r19)
10006ac4:	b8af883a 	add	r23,r23,r2
10006ac8:	90a5c83a 	sub	r18,r18,r2
10006acc:	1d05c83a 	sub	r2,r3,r20
10006ad0:	98800215 	stw	r2,8(r19)
10006ad4:	103fc326 	beq	r2,zero,100069e4 <__alt_data_end+0xf80069e4>
10006ad8:	80c0030b 	ldhu	r3,12(r16)
10006adc:	903fe41e 	bne	r18,zero,10006a70 <__alt_data_end+0xf8006a70>
10006ae0:	8dc00017 	ldw	r23,0(r17)
10006ae4:	8c800117 	ldw	r18,4(r17)
10006ae8:	8c400204 	addi	r17,r17,8
10006aec:	003fdf06 	br	10006a6c <__alt_data_end+0xf8006a6c>
10006af0:	0008e740 	call	10008e74 <_realloc_r>
10006af4:	102d883a 	mov	r22,r2
10006af8:	1000a01e 	bne	r2,zero,10006d7c <__sfvwrite_r+0x444>
10006afc:	81400417 	ldw	r5,16(r16)
10006b00:	a809883a 	mov	r4,r21
10006b04:	00066480 	call	10006648 <_free_r>
10006b08:	00800304 	movi	r2,12
10006b0c:	a8800015 	stw	r2,0(r21)
10006b10:	80c0030b 	ldhu	r3,12(r16)
10006b14:	00bfffc4 	movi	r2,-1
10006b18:	18c01014 	ori	r3,r3,64
10006b1c:	80c0030d 	sth	r3,12(r16)
10006b20:	003fb106 	br	100069e8 <__alt_data_end+0xf80069e8>
10006b24:	0029883a 	mov	r20,zero
10006b28:	0011883a 	mov	r8,zero
10006b2c:	0039883a 	mov	fp,zero
10006b30:	0025883a 	mov	r18,zero
10006b34:	90001f26 	beq	r18,zero,10006bb4 <__sfvwrite_r+0x27c>
10006b38:	40006826 	beq	r8,zero,10006cdc <__sfvwrite_r+0x3a4>
10006b3c:	a02f883a 	mov	r23,r20
10006b40:	9500012e 	bgeu	r18,r20,10006b48 <__sfvwrite_r+0x210>
10006b44:	902f883a 	mov	r23,r18
10006b48:	81000017 	ldw	r4,0(r16)
10006b4c:	80800417 	ldw	r2,16(r16)
10006b50:	b82d883a 	mov	r22,r23
10006b54:	81800217 	ldw	r6,8(r16)
10006b58:	81c00517 	ldw	r7,20(r16)
10006b5c:	1100022e 	bgeu	r2,r4,10006b68 <__sfvwrite_r+0x230>
10006b60:	31c7883a 	add	r3,r6,r7
10006b64:	1dc01816 	blt	r3,r23,10006bc8 <__sfvwrite_r+0x290>
10006b68:	b9c03f16 	blt	r23,r7,10006c68 <__sfvwrite_r+0x330>
10006b6c:	80800917 	ldw	r2,36(r16)
10006b70:	81400717 	ldw	r5,28(r16)
10006b74:	a809883a 	mov	r4,r21
10006b78:	da000115 	stw	r8,4(sp)
10006b7c:	e00d883a 	mov	r6,fp
10006b80:	103ee83a 	callr	r2
10006b84:	102d883a 	mov	r22,r2
10006b88:	da000117 	ldw	r8,4(sp)
10006b8c:	00bfe00e 	bge	zero,r2,10006b10 <__alt_data_end+0xf8006b10>
10006b90:	a5a9c83a 	sub	r20,r20,r22
10006b94:	a0001f26 	beq	r20,zero,10006c14 <__sfvwrite_r+0x2dc>
10006b98:	98800217 	ldw	r2,8(r19)
10006b9c:	e5b9883a 	add	fp,fp,r22
10006ba0:	95a5c83a 	sub	r18,r18,r22
10006ba4:	15adc83a 	sub	r22,r2,r22
10006ba8:	9d800215 	stw	r22,8(r19)
10006bac:	b03f8d26 	beq	r22,zero,100069e4 <__alt_data_end+0xf80069e4>
10006bb0:	903fe11e 	bne	r18,zero,10006b38 <__alt_data_end+0xf8006b38>
10006bb4:	8f000017 	ldw	fp,0(r17)
10006bb8:	8c800117 	ldw	r18,4(r17)
10006bbc:	0011883a 	mov	r8,zero
10006bc0:	8c400204 	addi	r17,r17,8
10006bc4:	003fdb06 	br	10006b34 <__alt_data_end+0xf8006b34>
10006bc8:	180d883a 	mov	r6,r3
10006bcc:	e00b883a 	mov	r5,fp
10006bd0:	da000115 	stw	r8,4(sp)
10006bd4:	d8c00015 	stw	r3,0(sp)
10006bd8:	0007bac0 	call	10007bac <memmove>
10006bdc:	d8c00017 	ldw	r3,0(sp)
10006be0:	80800017 	ldw	r2,0(r16)
10006be4:	a809883a 	mov	r4,r21
10006be8:	800b883a 	mov	r5,r16
10006bec:	10c5883a 	add	r2,r2,r3
10006bf0:	80800015 	stw	r2,0(r16)
10006bf4:	d8c00015 	stw	r3,0(sp)
10006bf8:	0005f180 	call	10005f18 <_fflush_r>
10006bfc:	d8c00017 	ldw	r3,0(sp)
10006c00:	da000117 	ldw	r8,4(sp)
10006c04:	103fc21e 	bne	r2,zero,10006b10 <__alt_data_end+0xf8006b10>
10006c08:	182d883a 	mov	r22,r3
10006c0c:	a5a9c83a 	sub	r20,r20,r22
10006c10:	a03fe11e 	bne	r20,zero,10006b98 <__alt_data_end+0xf8006b98>
10006c14:	a809883a 	mov	r4,r21
10006c18:	800b883a 	mov	r5,r16
10006c1c:	0005f180 	call	10005f18 <_fflush_r>
10006c20:	103fbb1e 	bne	r2,zero,10006b10 <__alt_data_end+0xf8006b10>
10006c24:	0011883a 	mov	r8,zero
10006c28:	003fdb06 	br	10006b98 <__alt_data_end+0xf8006b98>
10006c2c:	81000017 	ldw	r4,0(r16)
10006c30:	80800417 	ldw	r2,16(r16)
10006c34:	1100012e 	bgeu	r2,r4,10006c3c <__sfvwrite_r+0x304>
10006c38:	a4805a36 	bltu	r20,r18,10006da4 <__sfvwrite_r+0x46c>
10006c3c:	81c00517 	ldw	r7,20(r16)
10006c40:	91c01a36 	bltu	r18,r7,10006cac <__sfvwrite_r+0x374>
10006c44:	80800917 	ldw	r2,36(r16)
10006c48:	81400717 	ldw	r5,28(r16)
10006c4c:	a809883a 	mov	r4,r21
10006c50:	b80d883a 	mov	r6,r23
10006c54:	103ee83a 	callr	r2
10006c58:	1029883a 	mov	r20,r2
10006c5c:	00bfac0e 	bge	zero,r2,10006b10 <__alt_data_end+0xf8006b10>
10006c60:	a005883a 	mov	r2,r20
10006c64:	003f9606 	br	10006ac0 <__alt_data_end+0xf8006ac0>
10006c68:	b80d883a 	mov	r6,r23
10006c6c:	e00b883a 	mov	r5,fp
10006c70:	da000115 	stw	r8,4(sp)
10006c74:	0007bac0 	call	10007bac <memmove>
10006c78:	80800217 	ldw	r2,8(r16)
10006c7c:	80c00017 	ldw	r3,0(r16)
10006c80:	da000117 	ldw	r8,4(sp)
10006c84:	15c5c83a 	sub	r2,r2,r23
10006c88:	1def883a 	add	r23,r3,r23
10006c8c:	80800215 	stw	r2,8(r16)
10006c90:	85c00015 	stw	r23,0(r16)
10006c94:	003fbe06 	br	10006b90 <__alt_data_end+0xf8006b90>
10006c98:	81000017 	ldw	r4,0(r16)
10006c9c:	9039883a 	mov	fp,r18
10006ca0:	9029883a 	mov	r20,r18
10006ca4:	902d883a 	mov	r22,r18
10006ca8:	003f7b06 	br	10006a98 <__alt_data_end+0xf8006a98>
10006cac:	b80b883a 	mov	r5,r23
10006cb0:	900d883a 	mov	r6,r18
10006cb4:	0007bac0 	call	10007bac <memmove>
10006cb8:	80c00217 	ldw	r3,8(r16)
10006cbc:	80800017 	ldw	r2,0(r16)
10006cc0:	9029883a 	mov	r20,r18
10006cc4:	1c87c83a 	sub	r3,r3,r18
10006cc8:	1485883a 	add	r2,r2,r18
10006ccc:	80800015 	stw	r2,0(r16)
10006cd0:	80c00215 	stw	r3,8(r16)
10006cd4:	9005883a 	mov	r2,r18
10006cd8:	003f7906 	br	10006ac0 <__alt_data_end+0xf8006ac0>
10006cdc:	e009883a 	mov	r4,fp
10006ce0:	01400284 	movi	r5,10
10006ce4:	900d883a 	mov	r6,r18
10006ce8:	000798c0 	call	1000798c <memchr>
10006cec:	10003826 	beq	r2,zero,10006dd0 <__sfvwrite_r+0x498>
10006cf0:	10800044 	addi	r2,r2,1
10006cf4:	1729c83a 	sub	r20,r2,fp
10006cf8:	02000044 	movi	r8,1
10006cfc:	003f8f06 	br	10006b3c <__alt_data_end+0xf8006b3c>
10006d00:	80800517 	ldw	r2,20(r16)
10006d04:	81400417 	ldw	r5,16(r16)
10006d08:	87000017 	ldw	fp,0(r16)
10006d0c:	10a9883a 	add	r20,r2,r2
10006d10:	a085883a 	add	r2,r20,r2
10006d14:	1028d7fa 	srli	r20,r2,31
10006d18:	e179c83a 	sub	fp,fp,r5
10006d1c:	e1000044 	addi	r4,fp,1
10006d20:	a085883a 	add	r2,r20,r2
10006d24:	1029d07a 	srai	r20,r2,1
10006d28:	2485883a 	add	r2,r4,r18
10006d2c:	a00d883a 	mov	r6,r20
10006d30:	a080022e 	bgeu	r20,r2,10006d3c <__sfvwrite_r+0x404>
10006d34:	1029883a 	mov	r20,r2
10006d38:	100d883a 	mov	r6,r2
10006d3c:	18c1000c 	andi	r3,r3,1024
10006d40:	a809883a 	mov	r4,r21
10006d44:	183f6a26 	beq	r3,zero,10006af0 <__alt_data_end+0xf8006af0>
10006d48:	300b883a 	mov	r5,r6
10006d4c:	00071e40 	call	100071e4 <_malloc_r>
10006d50:	102d883a 	mov	r22,r2
10006d54:	103f6c26 	beq	r2,zero,10006b08 <__alt_data_end+0xf8006b08>
10006d58:	81400417 	ldw	r5,16(r16)
10006d5c:	1009883a 	mov	r4,r2
10006d60:	e00d883a 	mov	r6,fp
10006d64:	0007a740 	call	10007a74 <memcpy>
10006d68:	8080030b 	ldhu	r2,12(r16)
10006d6c:	00fedfc4 	movi	r3,-1153
10006d70:	10c4703a 	and	r2,r2,r3
10006d74:	10802014 	ori	r2,r2,128
10006d78:	8080030d 	sth	r2,12(r16)
10006d7c:	b709883a 	add	r4,r22,fp
10006d80:	a707c83a 	sub	r3,r20,fp
10006d84:	85800415 	stw	r22,16(r16)
10006d88:	85000515 	stw	r20,20(r16)
10006d8c:	81000015 	stw	r4,0(r16)
10006d90:	9039883a 	mov	fp,r18
10006d94:	80c00215 	stw	r3,8(r16)
10006d98:	9029883a 	mov	r20,r18
10006d9c:	902d883a 	mov	r22,r18
10006da0:	003f3d06 	br	10006a98 <__alt_data_end+0xf8006a98>
10006da4:	b80b883a 	mov	r5,r23
10006da8:	a00d883a 	mov	r6,r20
10006dac:	0007bac0 	call	10007bac <memmove>
10006db0:	80800017 	ldw	r2,0(r16)
10006db4:	a809883a 	mov	r4,r21
10006db8:	800b883a 	mov	r5,r16
10006dbc:	1505883a 	add	r2,r2,r20
10006dc0:	80800015 	stw	r2,0(r16)
10006dc4:	0005f180 	call	10005f18 <_fflush_r>
10006dc8:	103fa526 	beq	r2,zero,10006c60 <__alt_data_end+0xf8006c60>
10006dcc:	003f5006 	br	10006b10 <__alt_data_end+0xf8006b10>
10006dd0:	95000044 	addi	r20,r18,1
10006dd4:	02000044 	movi	r8,1
10006dd8:	003f5806 	br	10006b3c <__alt_data_end+0xf8006b3c>

10006ddc <_fwalk>:
10006ddc:	defff804 	addi	sp,sp,-32
10006de0:	dd400515 	stw	r21,20(sp)
10006de4:	2540b804 	addi	r21,r4,736
10006de8:	dd800615 	stw	r22,24(sp)
10006dec:	dd000415 	stw	r20,16(sp)
10006df0:	dfc00715 	stw	ra,28(sp)
10006df4:	dcc00315 	stw	r19,12(sp)
10006df8:	dc800215 	stw	r18,8(sp)
10006dfc:	dc400115 	stw	r17,4(sp)
10006e00:	dc000015 	stw	r16,0(sp)
10006e04:	2829883a 	mov	r20,r5
10006e08:	002d883a 	mov	r22,zero
10006e0c:	00064e40 	call	100064e4 <__sfp_lock_acquire>
10006e10:	a8001426 	beq	r21,zero,10006e64 <_fwalk+0x88>
10006e14:	04ffffc4 	movi	r19,-1
10006e18:	ac400117 	ldw	r17,4(r21)
10006e1c:	ac800217 	ldw	r18,8(r21)
10006e20:	8c7fffc4 	addi	r17,r17,-1
10006e24:	88000d16 	blt	r17,zero,10006e5c <_fwalk+0x80>
10006e28:	94000304 	addi	r16,r18,12
10006e2c:	94800384 	addi	r18,r18,14
10006e30:	80c0000f 	ldh	r3,0(r16)
10006e34:	8c7fffc4 	addi	r17,r17,-1
10006e38:	813ffd04 	addi	r4,r16,-12
10006e3c:	18000426 	beq	r3,zero,10006e50 <_fwalk+0x74>
10006e40:	90c0000f 	ldh	r3,0(r18)
10006e44:	1cc00226 	beq	r3,r19,10006e50 <_fwalk+0x74>
10006e48:	a03ee83a 	callr	r20
10006e4c:	b0acb03a 	or	r22,r22,r2
10006e50:	84001a04 	addi	r16,r16,104
10006e54:	94801a04 	addi	r18,r18,104
10006e58:	8cfff51e 	bne	r17,r19,10006e30 <__alt_data_end+0xf8006e30>
10006e5c:	ad400017 	ldw	r21,0(r21)
10006e60:	a83fed1e 	bne	r21,zero,10006e18 <__alt_data_end+0xf8006e18>
10006e64:	00064e80 	call	100064e8 <__sfp_lock_release>
10006e68:	b005883a 	mov	r2,r22
10006e6c:	dfc00717 	ldw	ra,28(sp)
10006e70:	dd800617 	ldw	r22,24(sp)
10006e74:	dd400517 	ldw	r21,20(sp)
10006e78:	dd000417 	ldw	r20,16(sp)
10006e7c:	dcc00317 	ldw	r19,12(sp)
10006e80:	dc800217 	ldw	r18,8(sp)
10006e84:	dc400117 	ldw	r17,4(sp)
10006e88:	dc000017 	ldw	r16,0(sp)
10006e8c:	dec00804 	addi	sp,sp,32
10006e90:	f800283a 	ret

10006e94 <_fwalk_reent>:
10006e94:	defff804 	addi	sp,sp,-32
10006e98:	dd400515 	stw	r21,20(sp)
10006e9c:	2540b804 	addi	r21,r4,736
10006ea0:	dd800615 	stw	r22,24(sp)
10006ea4:	dd000415 	stw	r20,16(sp)
10006ea8:	dcc00315 	stw	r19,12(sp)
10006eac:	dfc00715 	stw	ra,28(sp)
10006eb0:	dc800215 	stw	r18,8(sp)
10006eb4:	dc400115 	stw	r17,4(sp)
10006eb8:	dc000015 	stw	r16,0(sp)
10006ebc:	2027883a 	mov	r19,r4
10006ec0:	2829883a 	mov	r20,r5
10006ec4:	002d883a 	mov	r22,zero
10006ec8:	00064e40 	call	100064e4 <__sfp_lock_acquire>
10006ecc:	a8001326 	beq	r21,zero,10006f1c <_fwalk_reent+0x88>
10006ed0:	04bfffc4 	movi	r18,-1
10006ed4:	ac400117 	ldw	r17,4(r21)
10006ed8:	ac000217 	ldw	r16,8(r21)
10006edc:	8c7fffc4 	addi	r17,r17,-1
10006ee0:	88000c16 	blt	r17,zero,10006f14 <_fwalk_reent+0x80>
10006ee4:	84000304 	addi	r16,r16,12
10006ee8:	80c0000f 	ldh	r3,0(r16)
10006eec:	8c7fffc4 	addi	r17,r17,-1
10006ef0:	817ffd04 	addi	r5,r16,-12
10006ef4:	18000526 	beq	r3,zero,10006f0c <_fwalk_reent+0x78>
10006ef8:	80c0008f 	ldh	r3,2(r16)
10006efc:	9809883a 	mov	r4,r19
10006f00:	1c800226 	beq	r3,r18,10006f0c <_fwalk_reent+0x78>
10006f04:	a03ee83a 	callr	r20
10006f08:	b0acb03a 	or	r22,r22,r2
10006f0c:	84001a04 	addi	r16,r16,104
10006f10:	8cbff51e 	bne	r17,r18,10006ee8 <__alt_data_end+0xf8006ee8>
10006f14:	ad400017 	ldw	r21,0(r21)
10006f18:	a83fee1e 	bne	r21,zero,10006ed4 <__alt_data_end+0xf8006ed4>
10006f1c:	00064e80 	call	100064e8 <__sfp_lock_release>
10006f20:	b005883a 	mov	r2,r22
10006f24:	dfc00717 	ldw	ra,28(sp)
10006f28:	dd800617 	ldw	r22,24(sp)
10006f2c:	dd400517 	ldw	r21,20(sp)
10006f30:	dd000417 	ldw	r20,16(sp)
10006f34:	dcc00317 	ldw	r19,12(sp)
10006f38:	dc800217 	ldw	r18,8(sp)
10006f3c:	dc400117 	ldw	r17,4(sp)
10006f40:	dc000017 	ldw	r16,0(sp)
10006f44:	dec00804 	addi	sp,sp,32
10006f48:	f800283a 	ret

10006f4c <_setlocale_r>:
10006f4c:	30001b26 	beq	r6,zero,10006fbc <_setlocale_r+0x70>
10006f50:	01440074 	movhi	r5,4097
10006f54:	defffe04 	addi	sp,sp,-8
10006f58:	2946d204 	addi	r5,r5,6984
10006f5c:	3009883a 	mov	r4,r6
10006f60:	dc000015 	stw	r16,0(sp)
10006f64:	dfc00115 	stw	ra,4(sp)
10006f68:	3021883a 	mov	r16,r6
10006f6c:	00096180 	call	10009618 <strcmp>
10006f70:	1000061e 	bne	r2,zero,10006f8c <_setlocale_r+0x40>
10006f74:	00840074 	movhi	r2,4097
10006f78:	1086d104 	addi	r2,r2,6980
10006f7c:	dfc00117 	ldw	ra,4(sp)
10006f80:	dc000017 	ldw	r16,0(sp)
10006f84:	dec00204 	addi	sp,sp,8
10006f88:	f800283a 	ret
10006f8c:	01440074 	movhi	r5,4097
10006f90:	2946d104 	addi	r5,r5,6980
10006f94:	8009883a 	mov	r4,r16
10006f98:	00096180 	call	10009618 <strcmp>
10006f9c:	103ff526 	beq	r2,zero,10006f74 <__alt_data_end+0xf8006f74>
10006fa0:	01440074 	movhi	r5,4097
10006fa4:	2946bc04 	addi	r5,r5,6896
10006fa8:	8009883a 	mov	r4,r16
10006fac:	00096180 	call	10009618 <strcmp>
10006fb0:	103ff026 	beq	r2,zero,10006f74 <__alt_data_end+0xf8006f74>
10006fb4:	0005883a 	mov	r2,zero
10006fb8:	003ff006 	br	10006f7c <__alt_data_end+0xf8006f7c>
10006fbc:	00840074 	movhi	r2,4097
10006fc0:	1086d104 	addi	r2,r2,6980
10006fc4:	f800283a 	ret

10006fc8 <__locale_charset>:
10006fc8:	00840074 	movhi	r2,4097
10006fcc:	10888404 	addi	r2,r2,8720
10006fd0:	f800283a 	ret

10006fd4 <__locale_mb_cur_max>:
10006fd4:	00840074 	movhi	r2,4097
10006fd8:	108e2004 	addi	r2,r2,14464
10006fdc:	10800017 	ldw	r2,0(r2)
10006fe0:	f800283a 	ret

10006fe4 <__locale_msgcharset>:
10006fe4:	00840074 	movhi	r2,4097
10006fe8:	10887c04 	addi	r2,r2,8688
10006fec:	f800283a 	ret

10006ff0 <__locale_cjk_lang>:
10006ff0:	0005883a 	mov	r2,zero
10006ff4:	f800283a 	ret

10006ff8 <_localeconv_r>:
10006ff8:	00840074 	movhi	r2,4097
10006ffc:	10888c04 	addi	r2,r2,8752
10007000:	f800283a 	ret

10007004 <setlocale>:
10007004:	00c40074 	movhi	r3,4097
10007008:	18ce1f04 	addi	r3,r3,14460
1000700c:	2005883a 	mov	r2,r4
10007010:	19000017 	ldw	r4,0(r3)
10007014:	280d883a 	mov	r6,r5
10007018:	100b883a 	mov	r5,r2
1000701c:	0006f4c1 	jmpi	10006f4c <_setlocale_r>

10007020 <localeconv>:
10007020:	00840074 	movhi	r2,4097
10007024:	10888c04 	addi	r2,r2,8752
10007028:	f800283a 	ret

1000702c <__smakebuf_r>:
1000702c:	2880030b 	ldhu	r2,12(r5)
10007030:	10c0008c 	andi	r3,r2,2
10007034:	1800401e 	bne	r3,zero,10007138 <__smakebuf_r+0x10c>
10007038:	deffec04 	addi	sp,sp,-80
1000703c:	dc000f15 	stw	r16,60(sp)
10007040:	2821883a 	mov	r16,r5
10007044:	2940038f 	ldh	r5,14(r5)
10007048:	dc401015 	stw	r17,64(sp)
1000704c:	dfc01315 	stw	ra,76(sp)
10007050:	dcc01215 	stw	r19,72(sp)
10007054:	dc801115 	stw	r18,68(sp)
10007058:	2023883a 	mov	r17,r4
1000705c:	28001b16 	blt	r5,zero,100070cc <__smakebuf_r+0xa0>
10007060:	d80d883a 	mov	r6,sp
10007064:	000b0900 	call	1000b090 <_fstat_r>
10007068:	10001716 	blt	r2,zero,100070c8 <__smakebuf_r+0x9c>
1000706c:	d8800117 	ldw	r2,4(sp)
10007070:	00e00014 	movui	r3,32768
10007074:	10bc000c 	andi	r2,r2,61440
10007078:	10c03726 	beq	r2,r3,10007158 <__smakebuf_r+0x12c>
1000707c:	80c0030b 	ldhu	r3,12(r16)
10007080:	18c20014 	ori	r3,r3,2048
10007084:	80c0030d 	sth	r3,12(r16)
10007088:	00c80004 	movi	r3,8192
1000708c:	10c03c1e 	bne	r2,r3,10007180 <__smakebuf_r+0x154>
10007090:	8140038f 	ldh	r5,14(r16)
10007094:	8809883a 	mov	r4,r17
10007098:	000b0e80 	call	1000b0e8 <_isatty_r>
1000709c:	10004e26 	beq	r2,zero,100071d8 <__smakebuf_r+0x1ac>
100070a0:	8080030b 	ldhu	r2,12(r16)
100070a4:	04c00044 	movi	r19,1
100070a8:	80c010c4 	addi	r3,r16,67
100070ac:	14c4b03a 	or	r2,r2,r19
100070b0:	8080030d 	sth	r2,12(r16)
100070b4:	80c00015 	stw	r3,0(r16)
100070b8:	80c00415 	stw	r3,16(r16)
100070bc:	84c00515 	stw	r19,20(r16)
100070c0:	04810004 	movi	r18,1024
100070c4:	00000706 	br	100070e4 <__smakebuf_r+0xb8>
100070c8:	8080030b 	ldhu	r2,12(r16)
100070cc:	10c0200c 	andi	r3,r2,128
100070d0:	18001f1e 	bne	r3,zero,10007150 <__smakebuf_r+0x124>
100070d4:	04810004 	movi	r18,1024
100070d8:	10820014 	ori	r2,r2,2048
100070dc:	8080030d 	sth	r2,12(r16)
100070e0:	0027883a 	mov	r19,zero
100070e4:	8809883a 	mov	r4,r17
100070e8:	900b883a 	mov	r5,r18
100070ec:	00071e40 	call	100071e4 <_malloc_r>
100070f0:	10002e26 	beq	r2,zero,100071ac <__smakebuf_r+0x180>
100070f4:	80c0030b 	ldhu	r3,12(r16)
100070f8:	01040034 	movhi	r4,4096
100070fc:	21186004 	addi	r4,r4,24960
10007100:	89000f15 	stw	r4,60(r17)
10007104:	18c02014 	ori	r3,r3,128
10007108:	80c0030d 	sth	r3,12(r16)
1000710c:	80800015 	stw	r2,0(r16)
10007110:	80800415 	stw	r2,16(r16)
10007114:	84800515 	stw	r18,20(r16)
10007118:	98001c1e 	bne	r19,zero,1000718c <__smakebuf_r+0x160>
1000711c:	dfc01317 	ldw	ra,76(sp)
10007120:	dcc01217 	ldw	r19,72(sp)
10007124:	dc801117 	ldw	r18,68(sp)
10007128:	dc401017 	ldw	r17,64(sp)
1000712c:	dc000f17 	ldw	r16,60(sp)
10007130:	dec01404 	addi	sp,sp,80
10007134:	f800283a 	ret
10007138:	288010c4 	addi	r2,r5,67
1000713c:	28800015 	stw	r2,0(r5)
10007140:	28800415 	stw	r2,16(r5)
10007144:	00800044 	movi	r2,1
10007148:	28800515 	stw	r2,20(r5)
1000714c:	f800283a 	ret
10007150:	04801004 	movi	r18,64
10007154:	003fe006 	br	100070d8 <__alt_data_end+0xf80070d8>
10007158:	81000a17 	ldw	r4,40(r16)
1000715c:	00c40074 	movhi	r3,4097
10007160:	18e56d04 	addi	r3,r3,-27212
10007164:	20ffc51e 	bne	r4,r3,1000707c <__alt_data_end+0xf800707c>
10007168:	80c0030b 	ldhu	r3,12(r16)
1000716c:	01010004 	movi	r4,1024
10007170:	81001315 	stw	r4,76(r16)
10007174:	1906b03a 	or	r3,r3,r4
10007178:	80c0030d 	sth	r3,12(r16)
1000717c:	003fc206 	br	10007088 <__alt_data_end+0xf8007088>
10007180:	0027883a 	mov	r19,zero
10007184:	04810004 	movi	r18,1024
10007188:	003fd606 	br	100070e4 <__alt_data_end+0xf80070e4>
1000718c:	8140038f 	ldh	r5,14(r16)
10007190:	8809883a 	mov	r4,r17
10007194:	000b0e80 	call	1000b0e8 <_isatty_r>
10007198:	103fe026 	beq	r2,zero,1000711c <__alt_data_end+0xf800711c>
1000719c:	8080030b 	ldhu	r2,12(r16)
100071a0:	10800054 	ori	r2,r2,1
100071a4:	8080030d 	sth	r2,12(r16)
100071a8:	003fdc06 	br	1000711c <__alt_data_end+0xf800711c>
100071ac:	8080030b 	ldhu	r2,12(r16)
100071b0:	10c0800c 	andi	r3,r2,512
100071b4:	183fd91e 	bne	r3,zero,1000711c <__alt_data_end+0xf800711c>
100071b8:	10800094 	ori	r2,r2,2
100071bc:	80c010c4 	addi	r3,r16,67
100071c0:	8080030d 	sth	r2,12(r16)
100071c4:	00800044 	movi	r2,1
100071c8:	80c00015 	stw	r3,0(r16)
100071cc:	80c00415 	stw	r3,16(r16)
100071d0:	80800515 	stw	r2,20(r16)
100071d4:	003fd106 	br	1000711c <__alt_data_end+0xf800711c>
100071d8:	04c00044 	movi	r19,1
100071dc:	04810004 	movi	r18,1024
100071e0:	003fc006 	br	100070e4 <__alt_data_end+0xf80070e4>

100071e4 <_malloc_r>:
100071e4:	defff504 	addi	sp,sp,-44
100071e8:	dc800315 	stw	r18,12(sp)
100071ec:	dfc00a15 	stw	ra,40(sp)
100071f0:	df000915 	stw	fp,36(sp)
100071f4:	ddc00815 	stw	r23,32(sp)
100071f8:	dd800715 	stw	r22,28(sp)
100071fc:	dd400615 	stw	r21,24(sp)
10007200:	dd000515 	stw	r20,20(sp)
10007204:	dcc00415 	stw	r19,16(sp)
10007208:	dc400215 	stw	r17,8(sp)
1000720c:	dc000115 	stw	r16,4(sp)
10007210:	288002c4 	addi	r2,r5,11
10007214:	00c00584 	movi	r3,22
10007218:	2025883a 	mov	r18,r4
1000721c:	18802a2e 	bgeu	r3,r2,100072c8 <_malloc_r+0xe4>
10007220:	047ffe04 	movi	r17,-8
10007224:	1462703a 	and	r17,r2,r17
10007228:	88009e16 	blt	r17,zero,100074a4 <_malloc_r+0x2c0>
1000722c:	89409d36 	bltu	r17,r5,100074a4 <_malloc_r+0x2c0>
10007230:	000f0f00 	call	1000f0f0 <__malloc_lock>
10007234:	00807dc4 	movi	r2,503
10007238:	14402736 	bltu	r2,r17,100072d8 <_malloc_r+0xf4>
1000723c:	8806d0fa 	srli	r3,r17,3
10007240:	04c40074 	movhi	r19,4097
10007244:	9cc89a04 	addi	r19,r19,8808
10007248:	18c5883a 	add	r2,r3,r3
1000724c:	1085883a 	add	r2,r2,r2
10007250:	1085883a 	add	r2,r2,r2
10007254:	9885883a 	add	r2,r19,r2
10007258:	14000317 	ldw	r16,12(r2)
1000725c:	80814a26 	beq	r16,r2,10007788 <_malloc_r+0x5a4>
10007260:	80c00117 	ldw	r3,4(r16)
10007264:	81000317 	ldw	r4,12(r16)
10007268:	00bfff04 	movi	r2,-4
1000726c:	1884703a 	and	r2,r3,r2
10007270:	81400217 	ldw	r5,8(r16)
10007274:	8085883a 	add	r2,r16,r2
10007278:	10c00117 	ldw	r3,4(r2)
1000727c:	29000315 	stw	r4,12(r5)
10007280:	21400215 	stw	r5,8(r4)
10007284:	18c00054 	ori	r3,r3,1
10007288:	10c00115 	stw	r3,4(r2)
1000728c:	9009883a 	mov	r4,r18
10007290:	000f1100 	call	1000f110 <__malloc_unlock>
10007294:	80800204 	addi	r2,r16,8
10007298:	dfc00a17 	ldw	ra,40(sp)
1000729c:	df000917 	ldw	fp,36(sp)
100072a0:	ddc00817 	ldw	r23,32(sp)
100072a4:	dd800717 	ldw	r22,28(sp)
100072a8:	dd400617 	ldw	r21,24(sp)
100072ac:	dd000517 	ldw	r20,20(sp)
100072b0:	dcc00417 	ldw	r19,16(sp)
100072b4:	dc800317 	ldw	r18,12(sp)
100072b8:	dc400217 	ldw	r17,8(sp)
100072bc:	dc000117 	ldw	r16,4(sp)
100072c0:	dec00b04 	addi	sp,sp,44
100072c4:	f800283a 	ret
100072c8:	04400404 	movi	r17,16
100072cc:	89407536 	bltu	r17,r5,100074a4 <_malloc_r+0x2c0>
100072d0:	000f0f00 	call	1000f0f0 <__malloc_lock>
100072d4:	003fd906 	br	1000723c <__alt_data_end+0xf800723c>
100072d8:	8806d27a 	srli	r3,r17,9
100072dc:	18007526 	beq	r3,zero,100074b4 <_malloc_r+0x2d0>
100072e0:	00800104 	movi	r2,4
100072e4:	10c0ef36 	bltu	r2,r3,100076a4 <_malloc_r+0x4c0>
100072e8:	8806d1ba 	srli	r3,r17,6
100072ec:	19c00e04 	addi	r7,r3,56
100072f0:	39cb883a 	add	r5,r7,r7
100072f4:	04c40074 	movhi	r19,4097
100072f8:	294b883a 	add	r5,r5,r5
100072fc:	9cc89a04 	addi	r19,r19,8808
10007300:	294b883a 	add	r5,r5,r5
10007304:	994b883a 	add	r5,r19,r5
10007308:	2c000317 	ldw	r16,12(r5)
1000730c:	2c000e26 	beq	r5,r16,10007348 <_malloc_r+0x164>
10007310:	80800117 	ldw	r2,4(r16)
10007314:	01bfff04 	movi	r6,-4
10007318:	010003c4 	movi	r4,15
1000731c:	1184703a 	and	r2,r2,r6
10007320:	1447c83a 	sub	r3,r2,r17
10007324:	20c00716 	blt	r4,r3,10007344 <_malloc_r+0x160>
10007328:	1800650e 	bge	r3,zero,100074c0 <_malloc_r+0x2dc>
1000732c:	84000317 	ldw	r16,12(r16)
10007330:	2c000526 	beq	r5,r16,10007348 <_malloc_r+0x164>
10007334:	80800117 	ldw	r2,4(r16)
10007338:	1184703a 	and	r2,r2,r6
1000733c:	1447c83a 	sub	r3,r2,r17
10007340:	20fff90e 	bge	r4,r3,10007328 <__alt_data_end+0xf8007328>
10007344:	39ffffc4 	addi	r7,r7,-1
10007348:	38c00044 	addi	r3,r7,1
1000734c:	01840074 	movhi	r6,4097
10007350:	9c000417 	ldw	r16,16(r19)
10007354:	31889a04 	addi	r6,r6,8808
10007358:	32400204 	addi	r9,r6,8
1000735c:	82410326 	beq	r16,r9,1000776c <_malloc_r+0x588>
10007360:	81000117 	ldw	r4,4(r16)
10007364:	00bfff04 	movi	r2,-4
10007368:	208e703a 	and	r7,r4,r2
1000736c:	3c45c83a 	sub	r2,r7,r17
10007370:	010003c4 	movi	r4,15
10007374:	2080ee16 	blt	r4,r2,10007730 <_malloc_r+0x54c>
10007378:	32400515 	stw	r9,20(r6)
1000737c:	32400415 	stw	r9,16(r6)
10007380:	1000510e 	bge	r2,zero,100074c8 <_malloc_r+0x2e4>
10007384:	00807fc4 	movi	r2,511
10007388:	11c0ce36 	bltu	r2,r7,100076c4 <_malloc_r+0x4e0>
1000738c:	3808d0fa 	srli	r4,r7,3
10007390:	01c00044 	movi	r7,1
10007394:	30800117 	ldw	r2,4(r6)
10007398:	210b883a 	add	r5,r4,r4
1000739c:	294b883a 	add	r5,r5,r5
100073a0:	2009d0ba 	srai	r4,r4,2
100073a4:	294b883a 	add	r5,r5,r5
100073a8:	298b883a 	add	r5,r5,r6
100073ac:	2a000217 	ldw	r8,8(r5)
100073b0:	3908983a 	sll	r4,r7,r4
100073b4:	81400315 	stw	r5,12(r16)
100073b8:	82000215 	stw	r8,8(r16)
100073bc:	2088b03a 	or	r4,r4,r2
100073c0:	2c000215 	stw	r16,8(r5)
100073c4:	31000115 	stw	r4,4(r6)
100073c8:	44000315 	stw	r16,12(r8)
100073cc:	1805d0ba 	srai	r2,r3,2
100073d0:	01400044 	movi	r5,1
100073d4:	288a983a 	sll	r5,r5,r2
100073d8:	21404336 	bltu	r4,r5,100074e8 <_malloc_r+0x304>
100073dc:	2144703a 	and	r2,r4,r5
100073e0:	10000a1e 	bne	r2,zero,1000740c <_malloc_r+0x228>
100073e4:	00bfff04 	movi	r2,-4
100073e8:	294b883a 	add	r5,r5,r5
100073ec:	1886703a 	and	r3,r3,r2
100073f0:	2144703a 	and	r2,r4,r5
100073f4:	18c00104 	addi	r3,r3,4
100073f8:	1000041e 	bne	r2,zero,1000740c <_malloc_r+0x228>
100073fc:	294b883a 	add	r5,r5,r5
10007400:	2144703a 	and	r2,r4,r5
10007404:	18c00104 	addi	r3,r3,4
10007408:	103ffc26 	beq	r2,zero,100073fc <__alt_data_end+0xf80073fc>
1000740c:	023fff04 	movi	r8,-4
10007410:	01c003c4 	movi	r7,15
10007414:	18c5883a 	add	r2,r3,r3
10007418:	1085883a 	add	r2,r2,r2
1000741c:	1085883a 	add	r2,r2,r2
10007420:	9895883a 	add	r10,r19,r2
10007424:	52c00304 	addi	r11,r10,12
10007428:	1819883a 	mov	r12,r3
1000742c:	5c000017 	ldw	r16,0(r11)
10007430:	59bffd04 	addi	r6,r11,-12
10007434:	8180041e 	bne	r16,r6,10007448 <_malloc_r+0x264>
10007438:	0000ce06 	br	10007774 <_malloc_r+0x590>
1000743c:	2000d70e 	bge	r4,zero,1000779c <_malloc_r+0x5b8>
10007440:	84000317 	ldw	r16,12(r16)
10007444:	8180cb26 	beq	r16,r6,10007774 <_malloc_r+0x590>
10007448:	80800117 	ldw	r2,4(r16)
1000744c:	1204703a 	and	r2,r2,r8
10007450:	1449c83a 	sub	r4,r2,r17
10007454:	393ff90e 	bge	r7,r4,1000743c <__alt_data_end+0xf800743c>
10007458:	80800317 	ldw	r2,12(r16)
1000745c:	80c00217 	ldw	r3,8(r16)
10007460:	89400054 	ori	r5,r17,1
10007464:	81400115 	stw	r5,4(r16)
10007468:	18800315 	stw	r2,12(r3)
1000746c:	10c00215 	stw	r3,8(r2)
10007470:	8463883a 	add	r17,r16,r17
10007474:	9c400515 	stw	r17,20(r19)
10007478:	9c400415 	stw	r17,16(r19)
1000747c:	20800054 	ori	r2,r4,1
10007480:	88800115 	stw	r2,4(r17)
10007484:	8a400315 	stw	r9,12(r17)
10007488:	8a400215 	stw	r9,8(r17)
1000748c:	8923883a 	add	r17,r17,r4
10007490:	89000015 	stw	r4,0(r17)
10007494:	9009883a 	mov	r4,r18
10007498:	000f1100 	call	1000f110 <__malloc_unlock>
1000749c:	80800204 	addi	r2,r16,8
100074a0:	003f7d06 	br	10007298 <__alt_data_end+0xf8007298>
100074a4:	00800304 	movi	r2,12
100074a8:	90800015 	stw	r2,0(r18)
100074ac:	0005883a 	mov	r2,zero
100074b0:	003f7906 	br	10007298 <__alt_data_end+0xf8007298>
100074b4:	01401f84 	movi	r5,126
100074b8:	01c00fc4 	movi	r7,63
100074bc:	003f8d06 	br	100072f4 <__alt_data_end+0xf80072f4>
100074c0:	81000317 	ldw	r4,12(r16)
100074c4:	003f6a06 	br	10007270 <__alt_data_end+0xf8007270>
100074c8:	81c5883a 	add	r2,r16,r7
100074cc:	10c00117 	ldw	r3,4(r2)
100074d0:	9009883a 	mov	r4,r18
100074d4:	18c00054 	ori	r3,r3,1
100074d8:	10c00115 	stw	r3,4(r2)
100074dc:	000f1100 	call	1000f110 <__malloc_unlock>
100074e0:	80800204 	addi	r2,r16,8
100074e4:	003f6c06 	br	10007298 <__alt_data_end+0xf8007298>
100074e8:	9c000217 	ldw	r16,8(r19)
100074ec:	00bfff04 	movi	r2,-4
100074f0:	85800117 	ldw	r22,4(r16)
100074f4:	b0ac703a 	and	r22,r22,r2
100074f8:	b4400336 	bltu	r22,r17,10007508 <_malloc_r+0x324>
100074fc:	b445c83a 	sub	r2,r22,r17
10007500:	00c003c4 	movi	r3,15
10007504:	18805d16 	blt	r3,r2,1000767c <_malloc_r+0x498>
10007508:	05c40074 	movhi	r23,4097
1000750c:	00840074 	movhi	r2,4097
10007510:	bdce2104 	addi	r23,r23,14468
10007514:	1094ef04 	addi	r2,r2,21436
10007518:	15400017 	ldw	r21,0(r2)
1000751c:	b9000017 	ldw	r4,0(r23)
10007520:	00ffffc4 	movi	r3,-1
10007524:	858d883a 	add	r6,r16,r22
10007528:	8d6b883a 	add	r21,r17,r21
1000752c:	20c0e426 	beq	r4,r3,100078c0 <_malloc_r+0x6dc>
10007530:	ad4403c4 	addi	r21,r21,4111
10007534:	00fc0004 	movi	r3,-4096
10007538:	a8ea703a 	and	r21,r21,r3
1000753c:	9009883a 	mov	r4,r18
10007540:	a80b883a 	mov	r5,r21
10007544:	d9800015 	stw	r6,0(sp)
10007548:	00094880 	call	10009488 <_sbrk_r>
1000754c:	00ffffc4 	movi	r3,-1
10007550:	1029883a 	mov	r20,r2
10007554:	d9800017 	ldw	r6,0(sp)
10007558:	10c0a426 	beq	r2,r3,100077ec <_malloc_r+0x608>
1000755c:	1180a236 	bltu	r2,r6,100077e8 <_malloc_r+0x604>
10007560:	07040074 	movhi	fp,4097
10007564:	e714f704 	addi	fp,fp,21468
10007568:	e0c00017 	ldw	r3,0(fp)
1000756c:	a8c7883a 	add	r3,r21,r3
10007570:	e0c00015 	stw	r3,0(fp)
10007574:	3500da26 	beq	r6,r20,100078e0 <_malloc_r+0x6fc>
10007578:	b9000017 	ldw	r4,0(r23)
1000757c:	00bfffc4 	movi	r2,-1
10007580:	2080e426 	beq	r4,r2,10007914 <_malloc_r+0x730>
10007584:	a185c83a 	sub	r2,r20,r6
10007588:	1885883a 	add	r2,r3,r2
1000758c:	e0800015 	stw	r2,0(fp)
10007590:	a0c001cc 	andi	r3,r20,7
10007594:	1800b526 	beq	r3,zero,1000786c <_malloc_r+0x688>
10007598:	a0e9c83a 	sub	r20,r20,r3
1000759c:	00840204 	movi	r2,4104
100075a0:	a5000204 	addi	r20,r20,8
100075a4:	10c7c83a 	sub	r3,r2,r3
100075a8:	a545883a 	add	r2,r20,r21
100075ac:	1083ffcc 	andi	r2,r2,4095
100075b0:	18abc83a 	sub	r21,r3,r2
100075b4:	9009883a 	mov	r4,r18
100075b8:	a80b883a 	mov	r5,r21
100075bc:	00094880 	call	10009488 <_sbrk_r>
100075c0:	00ffffc4 	movi	r3,-1
100075c4:	10c0d026 	beq	r2,r3,10007908 <_malloc_r+0x724>
100075c8:	1507c83a 	sub	r3,r2,r20
100075cc:	a8c7883a 	add	r3,r21,r3
100075d0:	18c00054 	ori	r3,r3,1
100075d4:	e0800017 	ldw	r2,0(fp)
100075d8:	9d000215 	stw	r20,8(r19)
100075dc:	a0c00115 	stw	r3,4(r20)
100075e0:	a887883a 	add	r3,r21,r2
100075e4:	e0c00015 	stw	r3,0(fp)
100075e8:	84c00e26 	beq	r16,r19,10007624 <_malloc_r+0x440>
100075ec:	018003c4 	movi	r6,15
100075f0:	3580a02e 	bgeu	r6,r22,10007874 <_malloc_r+0x690>
100075f4:	81400117 	ldw	r5,4(r16)
100075f8:	013ffe04 	movi	r4,-8
100075fc:	b0bffd04 	addi	r2,r22,-12
10007600:	1104703a 	and	r2,r2,r4
10007604:	2900004c 	andi	r4,r5,1
10007608:	1108b03a 	or	r4,r2,r4
1000760c:	81000115 	stw	r4,4(r16)
10007610:	01400144 	movi	r5,5
10007614:	8089883a 	add	r4,r16,r2
10007618:	21400115 	stw	r5,4(r4)
1000761c:	21400215 	stw	r5,8(r4)
10007620:	3080c036 	bltu	r6,r2,10007924 <_malloc_r+0x740>
10007624:	00840074 	movhi	r2,4097
10007628:	1094ee04 	addi	r2,r2,21432
1000762c:	11000017 	ldw	r4,0(r2)
10007630:	20c0012e 	bgeu	r4,r3,10007638 <_malloc_r+0x454>
10007634:	10c00015 	stw	r3,0(r2)
10007638:	00840074 	movhi	r2,4097
1000763c:	1094ed04 	addi	r2,r2,21428
10007640:	11000017 	ldw	r4,0(r2)
10007644:	9c000217 	ldw	r16,8(r19)
10007648:	20c0012e 	bgeu	r4,r3,10007650 <_malloc_r+0x46c>
1000764c:	10c00015 	stw	r3,0(r2)
10007650:	80c00117 	ldw	r3,4(r16)
10007654:	00bfff04 	movi	r2,-4
10007658:	1886703a 	and	r3,r3,r2
1000765c:	1c45c83a 	sub	r2,r3,r17
10007660:	1c400236 	bltu	r3,r17,1000766c <_malloc_r+0x488>
10007664:	00c003c4 	movi	r3,15
10007668:	18800416 	blt	r3,r2,1000767c <_malloc_r+0x498>
1000766c:	9009883a 	mov	r4,r18
10007670:	000f1100 	call	1000f110 <__malloc_unlock>
10007674:	0005883a 	mov	r2,zero
10007678:	003f0706 	br	10007298 <__alt_data_end+0xf8007298>
1000767c:	88c00054 	ori	r3,r17,1
10007680:	80c00115 	stw	r3,4(r16)
10007684:	8463883a 	add	r17,r16,r17
10007688:	10800054 	ori	r2,r2,1
1000768c:	9c400215 	stw	r17,8(r19)
10007690:	88800115 	stw	r2,4(r17)
10007694:	9009883a 	mov	r4,r18
10007698:	000f1100 	call	1000f110 <__malloc_unlock>
1000769c:	80800204 	addi	r2,r16,8
100076a0:	003efd06 	br	10007298 <__alt_data_end+0xf8007298>
100076a4:	00800504 	movi	r2,20
100076a8:	10c0482e 	bgeu	r2,r3,100077cc <_malloc_r+0x5e8>
100076ac:	00801504 	movi	r2,84
100076b0:	10c06836 	bltu	r2,r3,10007854 <_malloc_r+0x670>
100076b4:	8806d33a 	srli	r3,r17,12
100076b8:	19c01b84 	addi	r7,r3,110
100076bc:	39cb883a 	add	r5,r7,r7
100076c0:	003f0c06 	br	100072f4 <__alt_data_end+0xf80072f4>
100076c4:	3804d27a 	srli	r2,r7,9
100076c8:	01000104 	movi	r4,4
100076cc:	2080422e 	bgeu	r4,r2,100077d8 <_malloc_r+0x5f4>
100076d0:	01000504 	movi	r4,20
100076d4:	20807c36 	bltu	r4,r2,100078c8 <_malloc_r+0x6e4>
100076d8:	110016c4 	addi	r4,r2,91
100076dc:	210b883a 	add	r5,r4,r4
100076e0:	294b883a 	add	r5,r5,r5
100076e4:	294b883a 	add	r5,r5,r5
100076e8:	994b883a 	add	r5,r19,r5
100076ec:	28800217 	ldw	r2,8(r5)
100076f0:	02040074 	movhi	r8,4097
100076f4:	42089a04 	addi	r8,r8,8808
100076f8:	11406326 	beq	r2,r5,10007888 <_malloc_r+0x6a4>
100076fc:	01bfff04 	movi	r6,-4
10007700:	11000117 	ldw	r4,4(r2)
10007704:	2188703a 	and	r4,r4,r6
10007708:	3900022e 	bgeu	r7,r4,10007714 <_malloc_r+0x530>
1000770c:	10800217 	ldw	r2,8(r2)
10007710:	28bffb1e 	bne	r5,r2,10007700 <__alt_data_end+0xf8007700>
10007714:	11800317 	ldw	r6,12(r2)
10007718:	99000117 	ldw	r4,4(r19)
1000771c:	81800315 	stw	r6,12(r16)
10007720:	80800215 	stw	r2,8(r16)
10007724:	34000215 	stw	r16,8(r6)
10007728:	14000315 	stw	r16,12(r2)
1000772c:	003f2706 	br	100073cc <__alt_data_end+0xf80073cc>
10007730:	88c00054 	ori	r3,r17,1
10007734:	80c00115 	stw	r3,4(r16)
10007738:	8463883a 	add	r17,r16,r17
1000773c:	34400515 	stw	r17,20(r6)
10007740:	34400415 	stw	r17,16(r6)
10007744:	10c00054 	ori	r3,r2,1
10007748:	8a400315 	stw	r9,12(r17)
1000774c:	8a400215 	stw	r9,8(r17)
10007750:	88c00115 	stw	r3,4(r17)
10007754:	88a3883a 	add	r17,r17,r2
10007758:	88800015 	stw	r2,0(r17)
1000775c:	9009883a 	mov	r4,r18
10007760:	000f1100 	call	1000f110 <__malloc_unlock>
10007764:	80800204 	addi	r2,r16,8
10007768:	003ecb06 	br	10007298 <__alt_data_end+0xf8007298>
1000776c:	31000117 	ldw	r4,4(r6)
10007770:	003f1606 	br	100073cc <__alt_data_end+0xf80073cc>
10007774:	63000044 	addi	r12,r12,1
10007778:	608000cc 	andi	r2,r12,3
1000777c:	5ac00204 	addi	r11,r11,8
10007780:	103f2a1e 	bne	r2,zero,1000742c <__alt_data_end+0xf800742c>
10007784:	00002106 	br	1000780c <_malloc_r+0x628>
10007788:	80800204 	addi	r2,r16,8
1000778c:	84000517 	ldw	r16,20(r16)
10007790:	143eb31e 	bne	r2,r16,10007260 <__alt_data_end+0xf8007260>
10007794:	18c00084 	addi	r3,r3,2
10007798:	003eec06 	br	1000734c <__alt_data_end+0xf800734c>
1000779c:	8085883a 	add	r2,r16,r2
100077a0:	10c00117 	ldw	r3,4(r2)
100077a4:	81000317 	ldw	r4,12(r16)
100077a8:	81400217 	ldw	r5,8(r16)
100077ac:	18c00054 	ori	r3,r3,1
100077b0:	10c00115 	stw	r3,4(r2)
100077b4:	29000315 	stw	r4,12(r5)
100077b8:	21400215 	stw	r5,8(r4)
100077bc:	9009883a 	mov	r4,r18
100077c0:	000f1100 	call	1000f110 <__malloc_unlock>
100077c4:	80800204 	addi	r2,r16,8
100077c8:	003eb306 	br	10007298 <__alt_data_end+0xf8007298>
100077cc:	19c016c4 	addi	r7,r3,91
100077d0:	39cb883a 	add	r5,r7,r7
100077d4:	003ec706 	br	100072f4 <__alt_data_end+0xf80072f4>
100077d8:	3804d1ba 	srli	r2,r7,6
100077dc:	11000e04 	addi	r4,r2,56
100077e0:	210b883a 	add	r5,r4,r4
100077e4:	003fbe06 	br	100076e0 <__alt_data_end+0xf80076e0>
100077e8:	84ff5d26 	beq	r16,r19,10007560 <__alt_data_end+0xf8007560>
100077ec:	9c000217 	ldw	r16,8(r19)
100077f0:	00bfff04 	movi	r2,-4
100077f4:	80c00117 	ldw	r3,4(r16)
100077f8:	1886703a 	and	r3,r3,r2
100077fc:	003f9706 	br	1000765c <__alt_data_end+0xf800765c>
10007800:	52800017 	ldw	r10,0(r10)
10007804:	18ffffc4 	addi	r3,r3,-1
10007808:	50805c1e 	bne	r10,r2,1000797c <_malloc_r+0x798>
1000780c:	190000cc 	andi	r4,r3,3
10007810:	50bffe04 	addi	r2,r10,-8
10007814:	203ffa1e 	bne	r4,zero,10007800 <__alt_data_end+0xf8007800>
10007818:	98800117 	ldw	r2,4(r19)
1000781c:	0146303a 	nor	r3,zero,r5
10007820:	1884703a 	and	r2,r3,r2
10007824:	98800115 	stw	r2,4(r19)
10007828:	294b883a 	add	r5,r5,r5
1000782c:	117f2e36 	bltu	r2,r5,100074e8 <__alt_data_end+0xf80074e8>
10007830:	283f2d26 	beq	r5,zero,100074e8 <__alt_data_end+0xf80074e8>
10007834:	1146703a 	and	r3,r2,r5
10007838:	1800521e 	bne	r3,zero,10007984 <_malloc_r+0x7a0>
1000783c:	6007883a 	mov	r3,r12
10007840:	294b883a 	add	r5,r5,r5
10007844:	1148703a 	and	r4,r2,r5
10007848:	18c00104 	addi	r3,r3,4
1000784c:	203ffc26 	beq	r4,zero,10007840 <__alt_data_end+0xf8007840>
10007850:	003ef006 	br	10007414 <__alt_data_end+0xf8007414>
10007854:	00805504 	movi	r2,340
10007858:	10c01336 	bltu	r2,r3,100078a8 <_malloc_r+0x6c4>
1000785c:	8806d3fa 	srli	r3,r17,15
10007860:	19c01dc4 	addi	r7,r3,119
10007864:	39cb883a 	add	r5,r7,r7
10007868:	003ea206 	br	100072f4 <__alt_data_end+0xf80072f4>
1000786c:	00c40004 	movi	r3,4096
10007870:	003f4d06 	br	100075a8 <__alt_data_end+0xf80075a8>
10007874:	00800044 	movi	r2,1
10007878:	a0800115 	stw	r2,4(r20)
1000787c:	a021883a 	mov	r16,r20
10007880:	0007883a 	mov	r3,zero
10007884:	003f7506 	br	1000765c <__alt_data_end+0xf800765c>
10007888:	200bd0ba 	srai	r5,r4,2
1000788c:	01800044 	movi	r6,1
10007890:	41000117 	ldw	r4,4(r8)
10007894:	314a983a 	sll	r5,r6,r5
10007898:	100d883a 	mov	r6,r2
1000789c:	2908b03a 	or	r4,r5,r4
100078a0:	41000115 	stw	r4,4(r8)
100078a4:	003f9d06 	br	1000771c <__alt_data_end+0xf800771c>
100078a8:	00815504 	movi	r2,1364
100078ac:	10c01336 	bltu	r2,r3,100078fc <_malloc_r+0x718>
100078b0:	8806d4ba 	srli	r3,r17,18
100078b4:	19c01f04 	addi	r7,r3,124
100078b8:	39cb883a 	add	r5,r7,r7
100078bc:	003e8d06 	br	100072f4 <__alt_data_end+0xf80072f4>
100078c0:	ad400404 	addi	r21,r21,16
100078c4:	003f1d06 	br	1000753c <__alt_data_end+0xf800753c>
100078c8:	01001504 	movi	r4,84
100078cc:	20801c36 	bltu	r4,r2,10007940 <_malloc_r+0x75c>
100078d0:	3804d33a 	srli	r2,r7,12
100078d4:	11001b84 	addi	r4,r2,110
100078d8:	210b883a 	add	r5,r4,r4
100078dc:	003f8006 	br	100076e0 <__alt_data_end+0xf80076e0>
100078e0:	3083ffcc 	andi	r2,r6,4095
100078e4:	103f241e 	bne	r2,zero,10007578 <__alt_data_end+0xf8007578>
100078e8:	99000217 	ldw	r4,8(r19)
100078ec:	ad85883a 	add	r2,r21,r22
100078f0:	10800054 	ori	r2,r2,1
100078f4:	20800115 	stw	r2,4(r4)
100078f8:	003f4a06 	br	10007624 <__alt_data_end+0xf8007624>
100078fc:	01403f04 	movi	r5,252
10007900:	01c01f84 	movi	r7,126
10007904:	003e7b06 	br	100072f4 <__alt_data_end+0xf80072f4>
10007908:	00c00044 	movi	r3,1
1000790c:	002b883a 	mov	r21,zero
10007910:	003f3006 	br	100075d4 <__alt_data_end+0xf80075d4>
10007914:	00840074 	movhi	r2,4097
10007918:	108e2104 	addi	r2,r2,14468
1000791c:	15000015 	stw	r20,0(r2)
10007920:	003f1b06 	br	10007590 <__alt_data_end+0xf8007590>
10007924:	9009883a 	mov	r4,r18
10007928:	81400204 	addi	r5,r16,8
1000792c:	00066480 	call	10006648 <_free_r>
10007930:	00840074 	movhi	r2,4097
10007934:	1094f704 	addi	r2,r2,21468
10007938:	10c00017 	ldw	r3,0(r2)
1000793c:	003f3906 	br	10007624 <__alt_data_end+0xf8007624>
10007940:	01005504 	movi	r4,340
10007944:	20800436 	bltu	r4,r2,10007958 <_malloc_r+0x774>
10007948:	3804d3fa 	srli	r2,r7,15
1000794c:	11001dc4 	addi	r4,r2,119
10007950:	210b883a 	add	r5,r4,r4
10007954:	003f6206 	br	100076e0 <__alt_data_end+0xf80076e0>
10007958:	01015504 	movi	r4,1364
1000795c:	20800436 	bltu	r4,r2,10007970 <_malloc_r+0x78c>
10007960:	3804d4ba 	srli	r2,r7,18
10007964:	11001f04 	addi	r4,r2,124
10007968:	210b883a 	add	r5,r4,r4
1000796c:	003f5c06 	br	100076e0 <__alt_data_end+0xf80076e0>
10007970:	01403f04 	movi	r5,252
10007974:	01001f84 	movi	r4,126
10007978:	003f5906 	br	100076e0 <__alt_data_end+0xf80076e0>
1000797c:	98800117 	ldw	r2,4(r19)
10007980:	003fa906 	br	10007828 <__alt_data_end+0xf8007828>
10007984:	6007883a 	mov	r3,r12
10007988:	003ea206 	br	10007414 <__alt_data_end+0xf8007414>

1000798c <memchr>:
1000798c:	208000cc 	andi	r2,r4,3
10007990:	280f883a 	mov	r7,r5
10007994:	10003526 	beq	r2,zero,10007a6c <memchr+0xe0>
10007998:	30bfffc4 	addi	r2,r6,-1
1000799c:	30001b26 	beq	r6,zero,10007a0c <memchr+0x80>
100079a0:	21800003 	ldbu	r6,0(r4)
100079a4:	28c03fcc 	andi	r3,r5,255
100079a8:	30c01a26 	beq	r6,r3,10007a14 <memchr+0x88>
100079ac:	180d883a 	mov	r6,r3
100079b0:	00000406 	br	100079c4 <memchr+0x38>
100079b4:	10001526 	beq	r2,zero,10007a0c <memchr+0x80>
100079b8:	20c00003 	ldbu	r3,0(r4)
100079bc:	10bfffc4 	addi	r2,r2,-1
100079c0:	19801426 	beq	r3,r6,10007a14 <memchr+0x88>
100079c4:	21000044 	addi	r4,r4,1
100079c8:	20c000cc 	andi	r3,r4,3
100079cc:	183ff91e 	bne	r3,zero,100079b4 <__alt_data_end+0xf80079b4>
100079d0:	024000c4 	movi	r9,3
100079d4:	48801136 	bltu	r9,r2,10007a1c <memchr+0x90>
100079d8:	10000c26 	beq	r2,zero,10007a0c <memchr+0x80>
100079dc:	20c00003 	ldbu	r3,0(r4)
100079e0:	29403fcc 	andi	r5,r5,255
100079e4:	19400b26 	beq	r3,r5,10007a14 <memchr+0x88>
100079e8:	20c00044 	addi	r3,r4,1
100079ec:	2085883a 	add	r2,r4,r2
100079f0:	39803fcc 	andi	r6,r7,255
100079f4:	00000306 	br	10007a04 <memchr+0x78>
100079f8:	18c00044 	addi	r3,r3,1
100079fc:	197fffc3 	ldbu	r5,-1(r3)
10007a00:	29800426 	beq	r5,r6,10007a14 <memchr+0x88>
10007a04:	1809883a 	mov	r4,r3
10007a08:	18bffb1e 	bne	r3,r2,100079f8 <__alt_data_end+0xf80079f8>
10007a0c:	0005883a 	mov	r2,zero
10007a10:	f800283a 	ret
10007a14:	2005883a 	mov	r2,r4
10007a18:	f800283a 	ret
10007a1c:	28c03fcc 	andi	r3,r5,255
10007a20:	1810923a 	slli	r8,r3,8
10007a24:	02ffbff4 	movhi	r11,65279
10007a28:	02a02074 	movhi	r10,32897
10007a2c:	40c6b03a 	or	r3,r8,r3
10007a30:	1810943a 	slli	r8,r3,16
10007a34:	5affbfc4 	addi	r11,r11,-257
10007a38:	52a02004 	addi	r10,r10,-32640
10007a3c:	40d0b03a 	or	r8,r8,r3
10007a40:	20c00017 	ldw	r3,0(r4)
10007a44:	40c6f03a 	xor	r3,r8,r3
10007a48:	1acd883a 	add	r6,r3,r11
10007a4c:	00c6303a 	nor	r3,zero,r3
10007a50:	30c6703a 	and	r3,r6,r3
10007a54:	1a86703a 	and	r3,r3,r10
10007a58:	183fdf1e 	bne	r3,zero,100079d8 <__alt_data_end+0xf80079d8>
10007a5c:	10bfff04 	addi	r2,r2,-4
10007a60:	21000104 	addi	r4,r4,4
10007a64:	48bff636 	bltu	r9,r2,10007a40 <__alt_data_end+0xf8007a40>
10007a68:	003fdb06 	br	100079d8 <__alt_data_end+0xf80079d8>
10007a6c:	3005883a 	mov	r2,r6
10007a70:	003fd706 	br	100079d0 <__alt_data_end+0xf80079d0>

10007a74 <memcpy>:
10007a74:	deffff04 	addi	sp,sp,-4
10007a78:	dc000015 	stw	r16,0(sp)
10007a7c:	00c003c4 	movi	r3,15
10007a80:	2005883a 	mov	r2,r4
10007a84:	1980432e 	bgeu	r3,r6,10007b94 <memcpy+0x120>
10007a88:	2146b03a 	or	r3,r4,r5
10007a8c:	18c000cc 	andi	r3,r3,3
10007a90:	1800421e 	bne	r3,zero,10007b9c <memcpy+0x128>
10007a94:	343ffc04 	addi	r16,r6,-16
10007a98:	8020d13a 	srli	r16,r16,4
10007a9c:	28c00104 	addi	r3,r5,4
10007aa0:	23400104 	addi	r13,r4,4
10007aa4:	801e913a 	slli	r15,r16,4
10007aa8:	2b000204 	addi	r12,r5,8
10007aac:	22c00204 	addi	r11,r4,8
10007ab0:	7bc00504 	addi	r15,r15,20
10007ab4:	2a800304 	addi	r10,r5,12
10007ab8:	22400304 	addi	r9,r4,12
10007abc:	2bdf883a 	add	r15,r5,r15
10007ac0:	2811883a 	mov	r8,r5
10007ac4:	200f883a 	mov	r7,r4
10007ac8:	41000017 	ldw	r4,0(r8)
10007acc:	39c00404 	addi	r7,r7,16
10007ad0:	18c00404 	addi	r3,r3,16
10007ad4:	393ffc15 	stw	r4,-16(r7)
10007ad8:	1bbffc17 	ldw	r14,-16(r3)
10007adc:	6b400404 	addi	r13,r13,16
10007ae0:	5ac00404 	addi	r11,r11,16
10007ae4:	6bbffc15 	stw	r14,-16(r13)
10007ae8:	63800017 	ldw	r14,0(r12)
10007aec:	4a400404 	addi	r9,r9,16
10007af0:	42000404 	addi	r8,r8,16
10007af4:	5bbffc15 	stw	r14,-16(r11)
10007af8:	53800017 	ldw	r14,0(r10)
10007afc:	63000404 	addi	r12,r12,16
10007b00:	52800404 	addi	r10,r10,16
10007b04:	4bbffc15 	stw	r14,-16(r9)
10007b08:	1bffef1e 	bne	r3,r15,10007ac8 <__alt_data_end+0xf8007ac8>
10007b0c:	81c00044 	addi	r7,r16,1
10007b10:	380e913a 	slli	r7,r7,4
10007b14:	310003cc 	andi	r4,r6,15
10007b18:	02c000c4 	movi	r11,3
10007b1c:	11c7883a 	add	r3,r2,r7
10007b20:	29cb883a 	add	r5,r5,r7
10007b24:	59001f2e 	bgeu	r11,r4,10007ba4 <memcpy+0x130>
10007b28:	1813883a 	mov	r9,r3
10007b2c:	2811883a 	mov	r8,r5
10007b30:	200f883a 	mov	r7,r4
10007b34:	42800017 	ldw	r10,0(r8)
10007b38:	4a400104 	addi	r9,r9,4
10007b3c:	39ffff04 	addi	r7,r7,-4
10007b40:	4abfff15 	stw	r10,-4(r9)
10007b44:	42000104 	addi	r8,r8,4
10007b48:	59fffa36 	bltu	r11,r7,10007b34 <__alt_data_end+0xf8007b34>
10007b4c:	213fff04 	addi	r4,r4,-4
10007b50:	2008d0ba 	srli	r4,r4,2
10007b54:	318000cc 	andi	r6,r6,3
10007b58:	21000044 	addi	r4,r4,1
10007b5c:	2109883a 	add	r4,r4,r4
10007b60:	2109883a 	add	r4,r4,r4
10007b64:	1907883a 	add	r3,r3,r4
10007b68:	290b883a 	add	r5,r5,r4
10007b6c:	30000626 	beq	r6,zero,10007b88 <memcpy+0x114>
10007b70:	198d883a 	add	r6,r3,r6
10007b74:	29c00003 	ldbu	r7,0(r5)
10007b78:	18c00044 	addi	r3,r3,1
10007b7c:	29400044 	addi	r5,r5,1
10007b80:	19ffffc5 	stb	r7,-1(r3)
10007b84:	19bffb1e 	bne	r3,r6,10007b74 <__alt_data_end+0xf8007b74>
10007b88:	dc000017 	ldw	r16,0(sp)
10007b8c:	dec00104 	addi	sp,sp,4
10007b90:	f800283a 	ret
10007b94:	2007883a 	mov	r3,r4
10007b98:	003ff406 	br	10007b6c <__alt_data_end+0xf8007b6c>
10007b9c:	2007883a 	mov	r3,r4
10007ba0:	003ff306 	br	10007b70 <__alt_data_end+0xf8007b70>
10007ba4:	200d883a 	mov	r6,r4
10007ba8:	003ff006 	br	10007b6c <__alt_data_end+0xf8007b6c>

10007bac <memmove>:
10007bac:	2005883a 	mov	r2,r4
10007bb0:	29000b2e 	bgeu	r5,r4,10007be0 <memmove+0x34>
10007bb4:	298f883a 	add	r7,r5,r6
10007bb8:	21c0092e 	bgeu	r4,r7,10007be0 <memmove+0x34>
10007bbc:	2187883a 	add	r3,r4,r6
10007bc0:	198bc83a 	sub	r5,r3,r6
10007bc4:	30004b26 	beq	r6,zero,10007cf4 <memmove+0x148>
10007bc8:	39ffffc4 	addi	r7,r7,-1
10007bcc:	39000003 	ldbu	r4,0(r7)
10007bd0:	18ffffc4 	addi	r3,r3,-1
10007bd4:	19000005 	stb	r4,0(r3)
10007bd8:	197ffb1e 	bne	r3,r5,10007bc8 <__alt_data_end+0xf8007bc8>
10007bdc:	f800283a 	ret
10007be0:	00c003c4 	movi	r3,15
10007be4:	1980412e 	bgeu	r3,r6,10007cec <memmove+0x140>
10007be8:	1146b03a 	or	r3,r2,r5
10007bec:	18c000cc 	andi	r3,r3,3
10007bf0:	1800411e 	bne	r3,zero,10007cf8 <memmove+0x14c>
10007bf4:	33fffc04 	addi	r15,r6,-16
10007bf8:	781ed13a 	srli	r15,r15,4
10007bfc:	28c00104 	addi	r3,r5,4
10007c00:	13400104 	addi	r13,r2,4
10007c04:	781c913a 	slli	r14,r15,4
10007c08:	2b000204 	addi	r12,r5,8
10007c0c:	12c00204 	addi	r11,r2,8
10007c10:	73800504 	addi	r14,r14,20
10007c14:	2a800304 	addi	r10,r5,12
10007c18:	12400304 	addi	r9,r2,12
10007c1c:	2b9d883a 	add	r14,r5,r14
10007c20:	2811883a 	mov	r8,r5
10007c24:	100f883a 	mov	r7,r2
10007c28:	41000017 	ldw	r4,0(r8)
10007c2c:	39c00404 	addi	r7,r7,16
10007c30:	18c00404 	addi	r3,r3,16
10007c34:	393ffc15 	stw	r4,-16(r7)
10007c38:	193ffc17 	ldw	r4,-16(r3)
10007c3c:	6b400404 	addi	r13,r13,16
10007c40:	5ac00404 	addi	r11,r11,16
10007c44:	693ffc15 	stw	r4,-16(r13)
10007c48:	61000017 	ldw	r4,0(r12)
10007c4c:	4a400404 	addi	r9,r9,16
10007c50:	42000404 	addi	r8,r8,16
10007c54:	593ffc15 	stw	r4,-16(r11)
10007c58:	51000017 	ldw	r4,0(r10)
10007c5c:	63000404 	addi	r12,r12,16
10007c60:	52800404 	addi	r10,r10,16
10007c64:	493ffc15 	stw	r4,-16(r9)
10007c68:	1bbfef1e 	bne	r3,r14,10007c28 <__alt_data_end+0xf8007c28>
10007c6c:	79000044 	addi	r4,r15,1
10007c70:	2008913a 	slli	r4,r4,4
10007c74:	328003cc 	andi	r10,r6,15
10007c78:	02c000c4 	movi	r11,3
10007c7c:	1107883a 	add	r3,r2,r4
10007c80:	290b883a 	add	r5,r5,r4
10007c84:	5a801e2e 	bgeu	r11,r10,10007d00 <memmove+0x154>
10007c88:	1813883a 	mov	r9,r3
10007c8c:	2811883a 	mov	r8,r5
10007c90:	500f883a 	mov	r7,r10
10007c94:	41000017 	ldw	r4,0(r8)
10007c98:	4a400104 	addi	r9,r9,4
10007c9c:	39ffff04 	addi	r7,r7,-4
10007ca0:	493fff15 	stw	r4,-4(r9)
10007ca4:	42000104 	addi	r8,r8,4
10007ca8:	59fffa36 	bltu	r11,r7,10007c94 <__alt_data_end+0xf8007c94>
10007cac:	513fff04 	addi	r4,r10,-4
10007cb0:	2008d0ba 	srli	r4,r4,2
10007cb4:	318000cc 	andi	r6,r6,3
10007cb8:	21000044 	addi	r4,r4,1
10007cbc:	2109883a 	add	r4,r4,r4
10007cc0:	2109883a 	add	r4,r4,r4
10007cc4:	1907883a 	add	r3,r3,r4
10007cc8:	290b883a 	add	r5,r5,r4
10007ccc:	30000926 	beq	r6,zero,10007cf4 <memmove+0x148>
10007cd0:	198d883a 	add	r6,r3,r6
10007cd4:	29c00003 	ldbu	r7,0(r5)
10007cd8:	18c00044 	addi	r3,r3,1
10007cdc:	29400044 	addi	r5,r5,1
10007ce0:	19ffffc5 	stb	r7,-1(r3)
10007ce4:	19bffb1e 	bne	r3,r6,10007cd4 <__alt_data_end+0xf8007cd4>
10007ce8:	f800283a 	ret
10007cec:	1007883a 	mov	r3,r2
10007cf0:	003ff606 	br	10007ccc <__alt_data_end+0xf8007ccc>
10007cf4:	f800283a 	ret
10007cf8:	1007883a 	mov	r3,r2
10007cfc:	003ff406 	br	10007cd0 <__alt_data_end+0xf8007cd0>
10007d00:	500d883a 	mov	r6,r10
10007d04:	003ff106 	br	10007ccc <__alt_data_end+0xf8007ccc>

10007d08 <memset>:
10007d08:	20c000cc 	andi	r3,r4,3
10007d0c:	2005883a 	mov	r2,r4
10007d10:	18004326 	beq	r3,zero,10007e20 <memset+0x118>
10007d14:	31ffffc4 	addi	r7,r6,-1
10007d18:	30004026 	beq	r6,zero,10007e1c <memset+0x114>
10007d1c:	2813883a 	mov	r9,r5
10007d20:	200d883a 	mov	r6,r4
10007d24:	2007883a 	mov	r3,r4
10007d28:	00000406 	br	10007d3c <memset+0x34>
10007d2c:	3a3fffc4 	addi	r8,r7,-1
10007d30:	31800044 	addi	r6,r6,1
10007d34:	38003926 	beq	r7,zero,10007e1c <memset+0x114>
10007d38:	400f883a 	mov	r7,r8
10007d3c:	18c00044 	addi	r3,r3,1
10007d40:	32400005 	stb	r9,0(r6)
10007d44:	1a0000cc 	andi	r8,r3,3
10007d48:	403ff81e 	bne	r8,zero,10007d2c <__alt_data_end+0xf8007d2c>
10007d4c:	010000c4 	movi	r4,3
10007d50:	21c02d2e 	bgeu	r4,r7,10007e08 <memset+0x100>
10007d54:	29803fcc 	andi	r6,r5,255
10007d58:	3008923a 	slli	r4,r6,8
10007d5c:	218cb03a 	or	r6,r4,r6
10007d60:	3008943a 	slli	r4,r6,16
10007d64:	218cb03a 	or	r6,r4,r6
10007d68:	010003c4 	movi	r4,15
10007d6c:	21c0182e 	bgeu	r4,r7,10007dd0 <memset+0xc8>
10007d70:	3b3ffc04 	addi	r12,r7,-16
10007d74:	6018d13a 	srli	r12,r12,4
10007d78:	1a000104 	addi	r8,r3,4
10007d7c:	1ac00204 	addi	r11,r3,8
10007d80:	6008913a 	slli	r4,r12,4
10007d84:	1a800304 	addi	r10,r3,12
10007d88:	1813883a 	mov	r9,r3
10007d8c:	21000504 	addi	r4,r4,20
10007d90:	1909883a 	add	r4,r3,r4
10007d94:	49800015 	stw	r6,0(r9)
10007d98:	41800015 	stw	r6,0(r8)
10007d9c:	59800015 	stw	r6,0(r11)
10007da0:	51800015 	stw	r6,0(r10)
10007da4:	42000404 	addi	r8,r8,16
10007da8:	4a400404 	addi	r9,r9,16
10007dac:	5ac00404 	addi	r11,r11,16
10007db0:	52800404 	addi	r10,r10,16
10007db4:	413ff71e 	bne	r8,r4,10007d94 <__alt_data_end+0xf8007d94>
10007db8:	63000044 	addi	r12,r12,1
10007dbc:	6018913a 	slli	r12,r12,4
10007dc0:	39c003cc 	andi	r7,r7,15
10007dc4:	010000c4 	movi	r4,3
10007dc8:	1b07883a 	add	r3,r3,r12
10007dcc:	21c00e2e 	bgeu	r4,r7,10007e08 <memset+0x100>
10007dd0:	1813883a 	mov	r9,r3
10007dd4:	3811883a 	mov	r8,r7
10007dd8:	010000c4 	movi	r4,3
10007ddc:	49800015 	stw	r6,0(r9)
10007de0:	423fff04 	addi	r8,r8,-4
10007de4:	4a400104 	addi	r9,r9,4
10007de8:	223ffc36 	bltu	r4,r8,10007ddc <__alt_data_end+0xf8007ddc>
10007dec:	393fff04 	addi	r4,r7,-4
10007df0:	2008d0ba 	srli	r4,r4,2
10007df4:	39c000cc 	andi	r7,r7,3
10007df8:	21000044 	addi	r4,r4,1
10007dfc:	2109883a 	add	r4,r4,r4
10007e00:	2109883a 	add	r4,r4,r4
10007e04:	1907883a 	add	r3,r3,r4
10007e08:	38000426 	beq	r7,zero,10007e1c <memset+0x114>
10007e0c:	19cf883a 	add	r7,r3,r7
10007e10:	19400005 	stb	r5,0(r3)
10007e14:	18c00044 	addi	r3,r3,1
10007e18:	19fffd1e 	bne	r3,r7,10007e10 <__alt_data_end+0xf8007e10>
10007e1c:	f800283a 	ret
10007e20:	2007883a 	mov	r3,r4
10007e24:	300f883a 	mov	r7,r6
10007e28:	003fc806 	br	10007d4c <__alt_data_end+0xf8007d4c>

10007e2c <_Balloc>:
10007e2c:	20801317 	ldw	r2,76(r4)
10007e30:	defffc04 	addi	sp,sp,-16
10007e34:	dc400115 	stw	r17,4(sp)
10007e38:	dc000015 	stw	r16,0(sp)
10007e3c:	dfc00315 	stw	ra,12(sp)
10007e40:	dc800215 	stw	r18,8(sp)
10007e44:	2023883a 	mov	r17,r4
10007e48:	2821883a 	mov	r16,r5
10007e4c:	10000f26 	beq	r2,zero,10007e8c <_Balloc+0x60>
10007e50:	8407883a 	add	r3,r16,r16
10007e54:	18c7883a 	add	r3,r3,r3
10007e58:	10c7883a 	add	r3,r2,r3
10007e5c:	18800017 	ldw	r2,0(r3)
10007e60:	10001126 	beq	r2,zero,10007ea8 <_Balloc+0x7c>
10007e64:	11000017 	ldw	r4,0(r2)
10007e68:	19000015 	stw	r4,0(r3)
10007e6c:	10000415 	stw	zero,16(r2)
10007e70:	10000315 	stw	zero,12(r2)
10007e74:	dfc00317 	ldw	ra,12(sp)
10007e78:	dc800217 	ldw	r18,8(sp)
10007e7c:	dc400117 	ldw	r17,4(sp)
10007e80:	dc000017 	ldw	r16,0(sp)
10007e84:	dec00404 	addi	sp,sp,16
10007e88:	f800283a 	ret
10007e8c:	01400104 	movi	r5,4
10007e90:	01800844 	movi	r6,33
10007e94:	000acc80 	call	1000acc8 <_calloc_r>
10007e98:	88801315 	stw	r2,76(r17)
10007e9c:	103fec1e 	bne	r2,zero,10007e50 <__alt_data_end+0xf8007e50>
10007ea0:	0005883a 	mov	r2,zero
10007ea4:	003ff306 	br	10007e74 <__alt_data_end+0xf8007e74>
10007ea8:	01400044 	movi	r5,1
10007eac:	2c24983a 	sll	r18,r5,r16
10007eb0:	8809883a 	mov	r4,r17
10007eb4:	91800144 	addi	r6,r18,5
10007eb8:	318d883a 	add	r6,r6,r6
10007ebc:	318d883a 	add	r6,r6,r6
10007ec0:	000acc80 	call	1000acc8 <_calloc_r>
10007ec4:	103ff626 	beq	r2,zero,10007ea0 <__alt_data_end+0xf8007ea0>
10007ec8:	14000115 	stw	r16,4(r2)
10007ecc:	14800215 	stw	r18,8(r2)
10007ed0:	003fe606 	br	10007e6c <__alt_data_end+0xf8007e6c>

10007ed4 <_Bfree>:
10007ed4:	28000826 	beq	r5,zero,10007ef8 <_Bfree+0x24>
10007ed8:	28c00117 	ldw	r3,4(r5)
10007edc:	20801317 	ldw	r2,76(r4)
10007ee0:	18c7883a 	add	r3,r3,r3
10007ee4:	18c7883a 	add	r3,r3,r3
10007ee8:	10c5883a 	add	r2,r2,r3
10007eec:	10c00017 	ldw	r3,0(r2)
10007ef0:	28c00015 	stw	r3,0(r5)
10007ef4:	11400015 	stw	r5,0(r2)
10007ef8:	f800283a 	ret

10007efc <__multadd>:
10007efc:	defff704 	addi	sp,sp,-36
10007f00:	dc800215 	stw	r18,8(sp)
10007f04:	2c800417 	ldw	r18,16(r5)
10007f08:	ddc00715 	stw	r23,28(sp)
10007f0c:	dd800615 	stw	r22,24(sp)
10007f10:	dd000415 	stw	r20,16(sp)
10007f14:	dcc00315 	stw	r19,12(sp)
10007f18:	dc400115 	stw	r17,4(sp)
10007f1c:	dc000015 	stw	r16,0(sp)
10007f20:	dfc00815 	stw	ra,32(sp)
10007f24:	dd400515 	stw	r21,20(sp)
10007f28:	2827883a 	mov	r19,r5
10007f2c:	2029883a 	mov	r20,r4
10007f30:	3023883a 	mov	r17,r6
10007f34:	3821883a 	mov	r16,r7
10007f38:	2d800504 	addi	r22,r5,20
10007f3c:	002f883a 	mov	r23,zero
10007f40:	b5400017 	ldw	r21,0(r22)
10007f44:	880b883a 	mov	r5,r17
10007f48:	bdc00044 	addi	r23,r23,1
10007f4c:	a93fffcc 	andi	r4,r21,65535
10007f50:	000c2ec0 	call	1000c2ec <__mulsi3>
10007f54:	1421883a 	add	r16,r2,r16
10007f58:	a808d43a 	srli	r4,r21,16
10007f5c:	802ad43a 	srli	r21,r16,16
10007f60:	880b883a 	mov	r5,r17
10007f64:	000c2ec0 	call	1000c2ec <__mulsi3>
10007f68:	a88f883a 	add	r7,r21,r2
10007f6c:	3804943a 	slli	r2,r7,16
10007f70:	80ffffcc 	andi	r3,r16,65535
10007f74:	b5800104 	addi	r22,r22,4
10007f78:	10c7883a 	add	r3,r2,r3
10007f7c:	b0ffff15 	stw	r3,-4(r22)
10007f80:	3820d43a 	srli	r16,r7,16
10007f84:	bcbfee16 	blt	r23,r18,10007f40 <__alt_data_end+0xf8007f40>
10007f88:	80000926 	beq	r16,zero,10007fb0 <__multadd+0xb4>
10007f8c:	98800217 	ldw	r2,8(r19)
10007f90:	9080130e 	bge	r18,r2,10007fe0 <__multadd+0xe4>
10007f94:	90800144 	addi	r2,r18,5
10007f98:	1085883a 	add	r2,r2,r2
10007f9c:	1085883a 	add	r2,r2,r2
10007fa0:	9885883a 	add	r2,r19,r2
10007fa4:	14000015 	stw	r16,0(r2)
10007fa8:	94800044 	addi	r18,r18,1
10007fac:	9c800415 	stw	r18,16(r19)
10007fb0:	9805883a 	mov	r2,r19
10007fb4:	dfc00817 	ldw	ra,32(sp)
10007fb8:	ddc00717 	ldw	r23,28(sp)
10007fbc:	dd800617 	ldw	r22,24(sp)
10007fc0:	dd400517 	ldw	r21,20(sp)
10007fc4:	dd000417 	ldw	r20,16(sp)
10007fc8:	dcc00317 	ldw	r19,12(sp)
10007fcc:	dc800217 	ldw	r18,8(sp)
10007fd0:	dc400117 	ldw	r17,4(sp)
10007fd4:	dc000017 	ldw	r16,0(sp)
10007fd8:	dec00904 	addi	sp,sp,36
10007fdc:	f800283a 	ret
10007fe0:	99400117 	ldw	r5,4(r19)
10007fe4:	a009883a 	mov	r4,r20
10007fe8:	29400044 	addi	r5,r5,1
10007fec:	0007e2c0 	call	10007e2c <_Balloc>
10007ff0:	99800417 	ldw	r6,16(r19)
10007ff4:	99400304 	addi	r5,r19,12
10007ff8:	11000304 	addi	r4,r2,12
10007ffc:	31800084 	addi	r6,r6,2
10008000:	318d883a 	add	r6,r6,r6
10008004:	318d883a 	add	r6,r6,r6
10008008:	1023883a 	mov	r17,r2
1000800c:	0007a740 	call	10007a74 <memcpy>
10008010:	99000117 	ldw	r4,4(r19)
10008014:	a0c01317 	ldw	r3,76(r20)
10008018:	2109883a 	add	r4,r4,r4
1000801c:	2109883a 	add	r4,r4,r4
10008020:	1907883a 	add	r3,r3,r4
10008024:	18800017 	ldw	r2,0(r3)
10008028:	98800015 	stw	r2,0(r19)
1000802c:	1cc00015 	stw	r19,0(r3)
10008030:	8827883a 	mov	r19,r17
10008034:	003fd706 	br	10007f94 <__alt_data_end+0xf8007f94>

10008038 <__s2b>:
10008038:	defff904 	addi	sp,sp,-28
1000803c:	dc400115 	stw	r17,4(sp)
10008040:	dc000015 	stw	r16,0(sp)
10008044:	2023883a 	mov	r17,r4
10008048:	2821883a 	mov	r16,r5
1000804c:	39000204 	addi	r4,r7,8
10008050:	01400244 	movi	r5,9
10008054:	dcc00315 	stw	r19,12(sp)
10008058:	dc800215 	stw	r18,8(sp)
1000805c:	dfc00615 	stw	ra,24(sp)
10008060:	dd400515 	stw	r21,20(sp)
10008064:	dd000415 	stw	r20,16(sp)
10008068:	3825883a 	mov	r18,r7
1000806c:	3027883a 	mov	r19,r6
10008070:	000c22c0 	call	1000c22c <__divsi3>
10008074:	00c00044 	movi	r3,1
10008078:	000b883a 	mov	r5,zero
1000807c:	1880030e 	bge	r3,r2,1000808c <__s2b+0x54>
10008080:	18c7883a 	add	r3,r3,r3
10008084:	29400044 	addi	r5,r5,1
10008088:	18bffd16 	blt	r3,r2,10008080 <__alt_data_end+0xf8008080>
1000808c:	8809883a 	mov	r4,r17
10008090:	0007e2c0 	call	10007e2c <_Balloc>
10008094:	d8c00717 	ldw	r3,28(sp)
10008098:	10c00515 	stw	r3,20(r2)
1000809c:	00c00044 	movi	r3,1
100080a0:	10c00415 	stw	r3,16(r2)
100080a4:	00c00244 	movi	r3,9
100080a8:	1cc0210e 	bge	r3,r19,10008130 <__s2b+0xf8>
100080ac:	80eb883a 	add	r21,r16,r3
100080b0:	a829883a 	mov	r20,r21
100080b4:	84e1883a 	add	r16,r16,r19
100080b8:	a1c00007 	ldb	r7,0(r20)
100080bc:	8809883a 	mov	r4,r17
100080c0:	a5000044 	addi	r20,r20,1
100080c4:	100b883a 	mov	r5,r2
100080c8:	01800284 	movi	r6,10
100080cc:	39fff404 	addi	r7,r7,-48
100080d0:	0007efc0 	call	10007efc <__multadd>
100080d4:	a43ff81e 	bne	r20,r16,100080b8 <__alt_data_end+0xf80080b8>
100080d8:	ace1883a 	add	r16,r21,r19
100080dc:	843ffe04 	addi	r16,r16,-8
100080e0:	9c800a0e 	bge	r19,r18,1000810c <__s2b+0xd4>
100080e4:	94e5c83a 	sub	r18,r18,r19
100080e8:	84a5883a 	add	r18,r16,r18
100080ec:	81c00007 	ldb	r7,0(r16)
100080f0:	8809883a 	mov	r4,r17
100080f4:	84000044 	addi	r16,r16,1
100080f8:	100b883a 	mov	r5,r2
100080fc:	01800284 	movi	r6,10
10008100:	39fff404 	addi	r7,r7,-48
10008104:	0007efc0 	call	10007efc <__multadd>
10008108:	84bff81e 	bne	r16,r18,100080ec <__alt_data_end+0xf80080ec>
1000810c:	dfc00617 	ldw	ra,24(sp)
10008110:	dd400517 	ldw	r21,20(sp)
10008114:	dd000417 	ldw	r20,16(sp)
10008118:	dcc00317 	ldw	r19,12(sp)
1000811c:	dc800217 	ldw	r18,8(sp)
10008120:	dc400117 	ldw	r17,4(sp)
10008124:	dc000017 	ldw	r16,0(sp)
10008128:	dec00704 	addi	sp,sp,28
1000812c:	f800283a 	ret
10008130:	84000284 	addi	r16,r16,10
10008134:	1827883a 	mov	r19,r3
10008138:	003fe906 	br	100080e0 <__alt_data_end+0xf80080e0>

1000813c <__hi0bits>:
1000813c:	20bfffec 	andhi	r2,r4,65535
10008140:	1000141e 	bne	r2,zero,10008194 <__hi0bits+0x58>
10008144:	2008943a 	slli	r4,r4,16
10008148:	00800404 	movi	r2,16
1000814c:	20ffc02c 	andhi	r3,r4,65280
10008150:	1800021e 	bne	r3,zero,1000815c <__hi0bits+0x20>
10008154:	2008923a 	slli	r4,r4,8
10008158:	10800204 	addi	r2,r2,8
1000815c:	20fc002c 	andhi	r3,r4,61440
10008160:	1800021e 	bne	r3,zero,1000816c <__hi0bits+0x30>
10008164:	2008913a 	slli	r4,r4,4
10008168:	10800104 	addi	r2,r2,4
1000816c:	20f0002c 	andhi	r3,r4,49152
10008170:	1800031e 	bne	r3,zero,10008180 <__hi0bits+0x44>
10008174:	2109883a 	add	r4,r4,r4
10008178:	10800084 	addi	r2,r2,2
1000817c:	2109883a 	add	r4,r4,r4
10008180:	20000316 	blt	r4,zero,10008190 <__hi0bits+0x54>
10008184:	2110002c 	andhi	r4,r4,16384
10008188:	2000041e 	bne	r4,zero,1000819c <__hi0bits+0x60>
1000818c:	00800804 	movi	r2,32
10008190:	f800283a 	ret
10008194:	0005883a 	mov	r2,zero
10008198:	003fec06 	br	1000814c <__alt_data_end+0xf800814c>
1000819c:	10800044 	addi	r2,r2,1
100081a0:	f800283a 	ret

100081a4 <__lo0bits>:
100081a4:	20c00017 	ldw	r3,0(r4)
100081a8:	188001cc 	andi	r2,r3,7
100081ac:	10000826 	beq	r2,zero,100081d0 <__lo0bits+0x2c>
100081b0:	1880004c 	andi	r2,r3,1
100081b4:	1000211e 	bne	r2,zero,1000823c <__lo0bits+0x98>
100081b8:	1880008c 	andi	r2,r3,2
100081bc:	1000211e 	bne	r2,zero,10008244 <__lo0bits+0xa0>
100081c0:	1806d0ba 	srli	r3,r3,2
100081c4:	00800084 	movi	r2,2
100081c8:	20c00015 	stw	r3,0(r4)
100081cc:	f800283a 	ret
100081d0:	18bfffcc 	andi	r2,r3,65535
100081d4:	10001326 	beq	r2,zero,10008224 <__lo0bits+0x80>
100081d8:	0005883a 	mov	r2,zero
100081dc:	19403fcc 	andi	r5,r3,255
100081e0:	2800021e 	bne	r5,zero,100081ec <__lo0bits+0x48>
100081e4:	1806d23a 	srli	r3,r3,8
100081e8:	10800204 	addi	r2,r2,8
100081ec:	194003cc 	andi	r5,r3,15
100081f0:	2800021e 	bne	r5,zero,100081fc <__lo0bits+0x58>
100081f4:	1806d13a 	srli	r3,r3,4
100081f8:	10800104 	addi	r2,r2,4
100081fc:	194000cc 	andi	r5,r3,3
10008200:	2800021e 	bne	r5,zero,1000820c <__lo0bits+0x68>
10008204:	1806d0ba 	srli	r3,r3,2
10008208:	10800084 	addi	r2,r2,2
1000820c:	1940004c 	andi	r5,r3,1
10008210:	2800081e 	bne	r5,zero,10008234 <__lo0bits+0x90>
10008214:	1806d07a 	srli	r3,r3,1
10008218:	1800051e 	bne	r3,zero,10008230 <__lo0bits+0x8c>
1000821c:	00800804 	movi	r2,32
10008220:	f800283a 	ret
10008224:	1806d43a 	srli	r3,r3,16
10008228:	00800404 	movi	r2,16
1000822c:	003feb06 	br	100081dc <__alt_data_end+0xf80081dc>
10008230:	10800044 	addi	r2,r2,1
10008234:	20c00015 	stw	r3,0(r4)
10008238:	f800283a 	ret
1000823c:	0005883a 	mov	r2,zero
10008240:	f800283a 	ret
10008244:	1806d07a 	srli	r3,r3,1
10008248:	00800044 	movi	r2,1
1000824c:	20c00015 	stw	r3,0(r4)
10008250:	f800283a 	ret

10008254 <__i2b>:
10008254:	defffd04 	addi	sp,sp,-12
10008258:	dc000015 	stw	r16,0(sp)
1000825c:	04000044 	movi	r16,1
10008260:	dc400115 	stw	r17,4(sp)
10008264:	2823883a 	mov	r17,r5
10008268:	800b883a 	mov	r5,r16
1000826c:	dfc00215 	stw	ra,8(sp)
10008270:	0007e2c0 	call	10007e2c <_Balloc>
10008274:	14400515 	stw	r17,20(r2)
10008278:	14000415 	stw	r16,16(r2)
1000827c:	dfc00217 	ldw	ra,8(sp)
10008280:	dc400117 	ldw	r17,4(sp)
10008284:	dc000017 	ldw	r16,0(sp)
10008288:	dec00304 	addi	sp,sp,12
1000828c:	f800283a 	ret

10008290 <__multiply>:
10008290:	deffef04 	addi	sp,sp,-68
10008294:	dc400815 	stw	r17,32(sp)
10008298:	dc000715 	stw	r16,28(sp)
1000829c:	2c400417 	ldw	r17,16(r5)
100082a0:	34000417 	ldw	r16,16(r6)
100082a4:	dd800d15 	stw	r22,52(sp)
100082a8:	dc800915 	stw	r18,36(sp)
100082ac:	dfc01015 	stw	ra,64(sp)
100082b0:	df000f15 	stw	fp,60(sp)
100082b4:	ddc00e15 	stw	r23,56(sp)
100082b8:	dd400c15 	stw	r21,48(sp)
100082bc:	dd000b15 	stw	r20,44(sp)
100082c0:	dcc00a15 	stw	r19,40(sp)
100082c4:	2825883a 	mov	r18,r5
100082c8:	302d883a 	mov	r22,r6
100082cc:	8c009116 	blt	r17,r16,10008514 <__multiply+0x284>
100082d0:	8005883a 	mov	r2,r16
100082d4:	8821883a 	mov	r16,r17
100082d8:	1023883a 	mov	r17,r2
100082dc:	90800217 	ldw	r2,8(r18)
100082e0:	8447883a 	add	r3,r16,r17
100082e4:	d8c00215 	stw	r3,8(sp)
100082e8:	91400117 	ldw	r5,4(r18)
100082ec:	10c0010e 	bge	r2,r3,100082f4 <__multiply+0x64>
100082f0:	29400044 	addi	r5,r5,1
100082f4:	0007e2c0 	call	10007e2c <_Balloc>
100082f8:	d8c00217 	ldw	r3,8(sp)
100082fc:	d8800615 	stw	r2,24(sp)
10008300:	18eb883a 	add	r21,r3,r3
10008304:	ad6b883a 	add	r21,r21,r21
10008308:	10c00504 	addi	r3,r2,20
1000830c:	1d6b883a 	add	r21,r3,r21
10008310:	d8c00115 	stw	r3,4(sp)
10008314:	dd400315 	stw	r21,12(sp)
10008318:	1805883a 	mov	r2,r3
1000831c:	1d40042e 	bgeu	r3,r21,10008330 <__multiply+0xa0>
10008320:	d8c00317 	ldw	r3,12(sp)
10008324:	10000015 	stw	zero,0(r2)
10008328:	10800104 	addi	r2,r2,4
1000832c:	10fffc36 	bltu	r2,r3,10008320 <__alt_data_end+0xf8008320>
10008330:	8c63883a 	add	r17,r17,r17
10008334:	b5800504 	addi	r22,r22,20
10008338:	8c63883a 	add	r17,r17,r17
1000833c:	94800504 	addi	r18,r18,20
10008340:	8421883a 	add	r16,r16,r16
10008344:	b463883a 	add	r17,r22,r17
10008348:	8421883a 	add	r16,r16,r16
1000834c:	dd800015 	stw	r22,0(sp)
10008350:	dc800415 	stw	r18,16(sp)
10008354:	dc400515 	stw	r17,20(sp)
10008358:	9429883a 	add	r20,r18,r16
1000835c:	b4404f2e 	bgeu	r22,r17,1000849c <__multiply+0x20c>
10008360:	d8c00017 	ldw	r3,0(sp)
10008364:	1c800017 	ldw	r18,0(r3)
10008368:	943fffcc 	andi	r16,r18,65535
1000836c:	80001e26 	beq	r16,zero,100083e8 <__multiply+0x158>
10008370:	dd800117 	ldw	r22,4(sp)
10008374:	dd400417 	ldw	r21,16(sp)
10008378:	0025883a 	mov	r18,zero
1000837c:	adc00017 	ldw	r23,0(r21)
10008380:	b4c00017 	ldw	r19,0(r22)
10008384:	800b883a 	mov	r5,r16
10008388:	b93fffcc 	andi	r4,r23,65535
1000838c:	000c2ec0 	call	1000c2ec <__mulsi3>
10008390:	9c7fffcc 	andi	r17,r19,65535
10008394:	8885883a 	add	r2,r17,r2
10008398:	b808d43a 	srli	r4,r23,16
1000839c:	14a3883a 	add	r17,r2,r18
100083a0:	9826d43a 	srli	r19,r19,16
100083a4:	8824d43a 	srli	r18,r17,16
100083a8:	800b883a 	mov	r5,r16
100083ac:	000c2ec0 	call	1000c2ec <__mulsi3>
100083b0:	9885883a 	add	r2,r19,r2
100083b4:	14a7883a 	add	r19,r2,r18
100083b8:	88ffffcc 	andi	r3,r17,65535
100083bc:	9822943a 	slli	r17,r19,16
100083c0:	ad400104 	addi	r21,r21,4
100083c4:	b005883a 	mov	r2,r22
100083c8:	88c6b03a 	or	r3,r17,r3
100083cc:	b0c00015 	stw	r3,0(r22)
100083d0:	9824d43a 	srli	r18,r19,16
100083d4:	b5800104 	addi	r22,r22,4
100083d8:	ad3fe836 	bltu	r21,r20,1000837c <__alt_data_end+0xf800837c>
100083dc:	d8c00017 	ldw	r3,0(sp)
100083e0:	14800115 	stw	r18,4(r2)
100083e4:	1c800017 	ldw	r18,0(r3)
100083e8:	9024d43a 	srli	r18,r18,16
100083ec:	90002226 	beq	r18,zero,10008478 <__multiply+0x1e8>
100083f0:	d8c00117 	ldw	r3,4(sp)
100083f4:	dd800417 	ldw	r22,16(sp)
100083f8:	002f883a 	mov	r23,zero
100083fc:	1f000017 	ldw	fp,0(r3)
10008400:	1823883a 	mov	r17,r3
10008404:	182b883a 	mov	r21,r3
10008408:	e021883a 	mov	r16,fp
1000840c:	00000106 	br	10008414 <__multiply+0x184>
10008410:	982b883a 	mov	r21,r19
10008414:	b100000b 	ldhu	r4,0(r22)
10008418:	8020d43a 	srli	r16,r16,16
1000841c:	900b883a 	mov	r5,r18
10008420:	000c2ec0 	call	1000c2ec <__mulsi3>
10008424:	1405883a 	add	r2,r2,r16
10008428:	15ef883a 	add	r23,r2,r23
1000842c:	b804943a 	slli	r2,r23,16
10008430:	e0ffffcc 	andi	r3,fp,65535
10008434:	8c400104 	addi	r17,r17,4
10008438:	10c6b03a 	or	r3,r2,r3
1000843c:	88ffff15 	stw	r3,-4(r17)
10008440:	b5800104 	addi	r22,r22,4
10008444:	b13fff17 	ldw	r4,-4(r22)
10008448:	acc00104 	addi	r19,r21,4
1000844c:	900b883a 	mov	r5,r18
10008450:	2008d43a 	srli	r4,r4,16
10008454:	9c000017 	ldw	r16,0(r19)
10008458:	000c2ec0 	call	1000c2ec <__mulsi3>
1000845c:	b806d43a 	srli	r3,r23,16
10008460:	813fffcc 	andi	r4,r16,65535
10008464:	1105883a 	add	r2,r2,r4
10008468:	10f9883a 	add	fp,r2,r3
1000846c:	e02ed43a 	srli	r23,fp,16
10008470:	b53fe736 	bltu	r22,r20,10008410 <__alt_data_end+0xf8008410>
10008474:	af000115 	stw	fp,4(r21)
10008478:	d8c00017 	ldw	r3,0(sp)
1000847c:	d9000517 	ldw	r4,20(sp)
10008480:	18c00104 	addi	r3,r3,4
10008484:	d8c00015 	stw	r3,0(sp)
10008488:	d8c00117 	ldw	r3,4(sp)
1000848c:	18c00104 	addi	r3,r3,4
10008490:	d8c00115 	stw	r3,4(sp)
10008494:	d8c00017 	ldw	r3,0(sp)
10008498:	193fb136 	bltu	r3,r4,10008360 <__alt_data_end+0xf8008360>
1000849c:	d8c00217 	ldw	r3,8(sp)
100084a0:	00c00c0e 	bge	zero,r3,100084d4 <__multiply+0x244>
100084a4:	d8c00317 	ldw	r3,12(sp)
100084a8:	18bfff17 	ldw	r2,-4(r3)
100084ac:	1d7fff04 	addi	r21,r3,-4
100084b0:	10000326 	beq	r2,zero,100084c0 <__multiply+0x230>
100084b4:	00000706 	br	100084d4 <__multiply+0x244>
100084b8:	a8800017 	ldw	r2,0(r21)
100084bc:	1000051e 	bne	r2,zero,100084d4 <__multiply+0x244>
100084c0:	d8c00217 	ldw	r3,8(sp)
100084c4:	ad7fff04 	addi	r21,r21,-4
100084c8:	18ffffc4 	addi	r3,r3,-1
100084cc:	d8c00215 	stw	r3,8(sp)
100084d0:	183ff91e 	bne	r3,zero,100084b8 <__alt_data_end+0xf80084b8>
100084d4:	d8c00617 	ldw	r3,24(sp)
100084d8:	d9000217 	ldw	r4,8(sp)
100084dc:	1805883a 	mov	r2,r3
100084e0:	19000415 	stw	r4,16(r3)
100084e4:	dfc01017 	ldw	ra,64(sp)
100084e8:	df000f17 	ldw	fp,60(sp)
100084ec:	ddc00e17 	ldw	r23,56(sp)
100084f0:	dd800d17 	ldw	r22,52(sp)
100084f4:	dd400c17 	ldw	r21,48(sp)
100084f8:	dd000b17 	ldw	r20,44(sp)
100084fc:	dcc00a17 	ldw	r19,40(sp)
10008500:	dc800917 	ldw	r18,36(sp)
10008504:	dc400817 	ldw	r17,32(sp)
10008508:	dc000717 	ldw	r16,28(sp)
1000850c:	dec01104 	addi	sp,sp,68
10008510:	f800283a 	ret
10008514:	3025883a 	mov	r18,r6
10008518:	282d883a 	mov	r22,r5
1000851c:	003f6f06 	br	100082dc <__alt_data_end+0xf80082dc>

10008520 <__pow5mult>:
10008520:	defffa04 	addi	sp,sp,-24
10008524:	dcc00315 	stw	r19,12(sp)
10008528:	dc800215 	stw	r18,8(sp)
1000852c:	dc000015 	stw	r16,0(sp)
10008530:	dfc00515 	stw	ra,20(sp)
10008534:	dd000415 	stw	r20,16(sp)
10008538:	dc400115 	stw	r17,4(sp)
1000853c:	308000cc 	andi	r2,r6,3
10008540:	3021883a 	mov	r16,r6
10008544:	2027883a 	mov	r19,r4
10008548:	2825883a 	mov	r18,r5
1000854c:	10002e1e 	bne	r2,zero,10008608 <__pow5mult+0xe8>
10008550:	8021d0ba 	srai	r16,r16,2
10008554:	80001a26 	beq	r16,zero,100085c0 <__pow5mult+0xa0>
10008558:	9c401217 	ldw	r17,72(r19)
1000855c:	8800061e 	bne	r17,zero,10008578 <__pow5mult+0x58>
10008560:	00003406 	br	10008634 <__pow5mult+0x114>
10008564:	8021d07a 	srai	r16,r16,1
10008568:	80001526 	beq	r16,zero,100085c0 <__pow5mult+0xa0>
1000856c:	88800017 	ldw	r2,0(r17)
10008570:	10001c26 	beq	r2,zero,100085e4 <__pow5mult+0xc4>
10008574:	1023883a 	mov	r17,r2
10008578:	80c0004c 	andi	r3,r16,1
1000857c:	183ff926 	beq	r3,zero,10008564 <__alt_data_end+0xf8008564>
10008580:	900b883a 	mov	r5,r18
10008584:	880d883a 	mov	r6,r17
10008588:	9809883a 	mov	r4,r19
1000858c:	00082900 	call	10008290 <__multiply>
10008590:	90001b26 	beq	r18,zero,10008600 <__pow5mult+0xe0>
10008594:	91c00117 	ldw	r7,4(r18)
10008598:	98c01317 	ldw	r3,76(r19)
1000859c:	8021d07a 	srai	r16,r16,1
100085a0:	39cf883a 	add	r7,r7,r7
100085a4:	39cf883a 	add	r7,r7,r7
100085a8:	19c7883a 	add	r3,r3,r7
100085ac:	19000017 	ldw	r4,0(r3)
100085b0:	91000015 	stw	r4,0(r18)
100085b4:	1c800015 	stw	r18,0(r3)
100085b8:	1025883a 	mov	r18,r2
100085bc:	803feb1e 	bne	r16,zero,1000856c <__alt_data_end+0xf800856c>
100085c0:	9005883a 	mov	r2,r18
100085c4:	dfc00517 	ldw	ra,20(sp)
100085c8:	dd000417 	ldw	r20,16(sp)
100085cc:	dcc00317 	ldw	r19,12(sp)
100085d0:	dc800217 	ldw	r18,8(sp)
100085d4:	dc400117 	ldw	r17,4(sp)
100085d8:	dc000017 	ldw	r16,0(sp)
100085dc:	dec00604 	addi	sp,sp,24
100085e0:	f800283a 	ret
100085e4:	9809883a 	mov	r4,r19
100085e8:	880b883a 	mov	r5,r17
100085ec:	880d883a 	mov	r6,r17
100085f0:	00082900 	call	10008290 <__multiply>
100085f4:	88800015 	stw	r2,0(r17)
100085f8:	10000015 	stw	zero,0(r2)
100085fc:	003fdd06 	br	10008574 <__alt_data_end+0xf8008574>
10008600:	1025883a 	mov	r18,r2
10008604:	003fd706 	br	10008564 <__alt_data_end+0xf8008564>
10008608:	10bfffc4 	addi	r2,r2,-1
1000860c:	1085883a 	add	r2,r2,r2
10008610:	00c40074 	movhi	r3,4097
10008614:	18c6d504 	addi	r3,r3,6996
10008618:	1085883a 	add	r2,r2,r2
1000861c:	1885883a 	add	r2,r3,r2
10008620:	11800017 	ldw	r6,0(r2)
10008624:	000f883a 	mov	r7,zero
10008628:	0007efc0 	call	10007efc <__multadd>
1000862c:	1025883a 	mov	r18,r2
10008630:	003fc706 	br	10008550 <__alt_data_end+0xf8008550>
10008634:	05000044 	movi	r20,1
10008638:	9809883a 	mov	r4,r19
1000863c:	a00b883a 	mov	r5,r20
10008640:	0007e2c0 	call	10007e2c <_Balloc>
10008644:	1023883a 	mov	r17,r2
10008648:	00809c44 	movi	r2,625
1000864c:	88800515 	stw	r2,20(r17)
10008650:	8d000415 	stw	r20,16(r17)
10008654:	9c401215 	stw	r17,72(r19)
10008658:	88000015 	stw	zero,0(r17)
1000865c:	003fc606 	br	10008578 <__alt_data_end+0xf8008578>

10008660 <__lshift>:
10008660:	defff904 	addi	sp,sp,-28
10008664:	dd000415 	stw	r20,16(sp)
10008668:	dcc00315 	stw	r19,12(sp)
1000866c:	3029d17a 	srai	r20,r6,5
10008670:	2cc00417 	ldw	r19,16(r5)
10008674:	28800217 	ldw	r2,8(r5)
10008678:	dd400515 	stw	r21,20(sp)
1000867c:	a4e7883a 	add	r19,r20,r19
10008680:	dc800215 	stw	r18,8(sp)
10008684:	dc400115 	stw	r17,4(sp)
10008688:	dc000015 	stw	r16,0(sp)
1000868c:	dfc00615 	stw	ra,24(sp)
10008690:	9c000044 	addi	r16,r19,1
10008694:	2823883a 	mov	r17,r5
10008698:	302b883a 	mov	r21,r6
1000869c:	2025883a 	mov	r18,r4
100086a0:	29400117 	ldw	r5,4(r5)
100086a4:	1400030e 	bge	r2,r16,100086b4 <__lshift+0x54>
100086a8:	1085883a 	add	r2,r2,r2
100086ac:	29400044 	addi	r5,r5,1
100086b0:	143ffd16 	blt	r2,r16,100086a8 <__alt_data_end+0xf80086a8>
100086b4:	9009883a 	mov	r4,r18
100086b8:	0007e2c0 	call	10007e2c <_Balloc>
100086bc:	11c00504 	addi	r7,r2,20
100086c0:	0500090e 	bge	zero,r20,100086e8 <__lshift+0x88>
100086c4:	3811883a 	mov	r8,r7
100086c8:	0007883a 	mov	r3,zero
100086cc:	40000015 	stw	zero,0(r8)
100086d0:	18c00044 	addi	r3,r3,1
100086d4:	42000104 	addi	r8,r8,4
100086d8:	1d3ffc1e 	bne	r3,r20,100086cc <__alt_data_end+0xf80086cc>
100086dc:	18c7883a 	add	r3,r3,r3
100086e0:	18c7883a 	add	r3,r3,r3
100086e4:	38cf883a 	add	r7,r7,r3
100086e8:	89000417 	ldw	r4,16(r17)
100086ec:	88c00504 	addi	r3,r17,20
100086f0:	a98007cc 	andi	r6,r21,31
100086f4:	2109883a 	add	r4,r4,r4
100086f8:	2109883a 	add	r4,r4,r4
100086fc:	1909883a 	add	r4,r3,r4
10008700:	30002326 	beq	r6,zero,10008790 <__lshift+0x130>
10008704:	01400804 	movi	r5,32
10008708:	298bc83a 	sub	r5,r5,r6
1000870c:	0013883a 	mov	r9,zero
10008710:	1a000017 	ldw	r8,0(r3)
10008714:	3815883a 	mov	r10,r7
10008718:	39c00104 	addi	r7,r7,4
1000871c:	4190983a 	sll	r8,r8,r6
10008720:	18c00104 	addi	r3,r3,4
10008724:	4a10b03a 	or	r8,r9,r8
10008728:	3a3fff15 	stw	r8,-4(r7)
1000872c:	1a3fff17 	ldw	r8,-4(r3)
10008730:	4152d83a 	srl	r9,r8,r5
10008734:	193ff636 	bltu	r3,r4,10008710 <__alt_data_end+0xf8008710>
10008738:	52400115 	stw	r9,4(r10)
1000873c:	48000126 	beq	r9,zero,10008744 <__lshift+0xe4>
10008740:	9c000084 	addi	r16,r19,2
10008744:	89000117 	ldw	r4,4(r17)
10008748:	90c01317 	ldw	r3,76(r18)
1000874c:	843fffc4 	addi	r16,r16,-1
10008750:	2109883a 	add	r4,r4,r4
10008754:	2109883a 	add	r4,r4,r4
10008758:	1907883a 	add	r3,r3,r4
1000875c:	19000017 	ldw	r4,0(r3)
10008760:	14000415 	stw	r16,16(r2)
10008764:	89000015 	stw	r4,0(r17)
10008768:	1c400015 	stw	r17,0(r3)
1000876c:	dfc00617 	ldw	ra,24(sp)
10008770:	dd400517 	ldw	r21,20(sp)
10008774:	dd000417 	ldw	r20,16(sp)
10008778:	dcc00317 	ldw	r19,12(sp)
1000877c:	dc800217 	ldw	r18,8(sp)
10008780:	dc400117 	ldw	r17,4(sp)
10008784:	dc000017 	ldw	r16,0(sp)
10008788:	dec00704 	addi	sp,sp,28
1000878c:	f800283a 	ret
10008790:	19400017 	ldw	r5,0(r3)
10008794:	39c00104 	addi	r7,r7,4
10008798:	18c00104 	addi	r3,r3,4
1000879c:	397fff15 	stw	r5,-4(r7)
100087a0:	193ffb36 	bltu	r3,r4,10008790 <__alt_data_end+0xf8008790>
100087a4:	003fe706 	br	10008744 <__alt_data_end+0xf8008744>

100087a8 <__mcmp>:
100087a8:	20800417 	ldw	r2,16(r4)
100087ac:	28c00417 	ldw	r3,16(r5)
100087b0:	10c5c83a 	sub	r2,r2,r3
100087b4:	1000111e 	bne	r2,zero,100087fc <__mcmp+0x54>
100087b8:	18c7883a 	add	r3,r3,r3
100087bc:	18c7883a 	add	r3,r3,r3
100087c0:	21000504 	addi	r4,r4,20
100087c4:	29400504 	addi	r5,r5,20
100087c8:	20c5883a 	add	r2,r4,r3
100087cc:	28cb883a 	add	r5,r5,r3
100087d0:	00000106 	br	100087d8 <__mcmp+0x30>
100087d4:	20800a2e 	bgeu	r4,r2,10008800 <__mcmp+0x58>
100087d8:	10bfff04 	addi	r2,r2,-4
100087dc:	297fff04 	addi	r5,r5,-4
100087e0:	11800017 	ldw	r6,0(r2)
100087e4:	28c00017 	ldw	r3,0(r5)
100087e8:	30fffa26 	beq	r6,r3,100087d4 <__alt_data_end+0xf80087d4>
100087ec:	30c00236 	bltu	r6,r3,100087f8 <__mcmp+0x50>
100087f0:	00800044 	movi	r2,1
100087f4:	f800283a 	ret
100087f8:	00bfffc4 	movi	r2,-1
100087fc:	f800283a 	ret
10008800:	0005883a 	mov	r2,zero
10008804:	f800283a 	ret

10008808 <__mdiff>:
10008808:	defffb04 	addi	sp,sp,-20
1000880c:	dc000015 	stw	r16,0(sp)
10008810:	2821883a 	mov	r16,r5
10008814:	dcc00315 	stw	r19,12(sp)
10008818:	300b883a 	mov	r5,r6
1000881c:	2027883a 	mov	r19,r4
10008820:	8009883a 	mov	r4,r16
10008824:	dc800215 	stw	r18,8(sp)
10008828:	dfc00415 	stw	ra,16(sp)
1000882c:	dc400115 	stw	r17,4(sp)
10008830:	3025883a 	mov	r18,r6
10008834:	00087a80 	call	100087a8 <__mcmp>
10008838:	10005226 	beq	r2,zero,10008984 <__mdiff+0x17c>
1000883c:	10004c16 	blt	r2,zero,10008970 <__mdiff+0x168>
10008840:	0023883a 	mov	r17,zero
10008844:	81400117 	ldw	r5,4(r16)
10008848:	9809883a 	mov	r4,r19
1000884c:	0007e2c0 	call	10007e2c <_Balloc>
10008850:	83400417 	ldw	r13,16(r16)
10008854:	93800417 	ldw	r14,16(r18)
10008858:	81000504 	addi	r4,r16,20
1000885c:	6b59883a 	add	r12,r13,r13
10008860:	739d883a 	add	r14,r14,r14
10008864:	6319883a 	add	r12,r12,r12
10008868:	91800504 	addi	r6,r18,20
1000886c:	739d883a 	add	r14,r14,r14
10008870:	14400315 	stw	r17,12(r2)
10008874:	2319883a 	add	r12,r4,r12
10008878:	339d883a 	add	r14,r6,r14
1000887c:	12400504 	addi	r9,r2,20
10008880:	0007883a 	mov	r3,zero
10008884:	22000017 	ldw	r8,0(r4)
10008888:	32800017 	ldw	r10,0(r6)
1000888c:	4ac00104 	addi	r11,r9,4
10008890:	41ffffcc 	andi	r7,r8,65535
10008894:	38c7883a 	add	r3,r7,r3
10008898:	51ffffcc 	andi	r7,r10,65535
1000889c:	19cfc83a 	sub	r7,r3,r7
100088a0:	4010d43a 	srli	r8,r8,16
100088a4:	5014d43a 	srli	r10,r10,16
100088a8:	3807d43a 	srai	r3,r7,16
100088ac:	39ffffcc 	andi	r7,r7,65535
100088b0:	4291c83a 	sub	r8,r8,r10
100088b4:	40c7883a 	add	r3,r8,r3
100088b8:	1810943a 	slli	r8,r3,16
100088bc:	31800104 	addi	r6,r6,4
100088c0:	21000104 	addi	r4,r4,4
100088c4:	41ceb03a 	or	r7,r8,r7
100088c8:	49c00015 	stw	r7,0(r9)
100088cc:	1807d43a 	srai	r3,r3,16
100088d0:	580b883a 	mov	r5,r11
100088d4:	5813883a 	mov	r9,r11
100088d8:	33bfea36 	bltu	r6,r14,10008884 <__alt_data_end+0xf8008884>
100088dc:	2011883a 	mov	r8,r4
100088e0:	2300152e 	bgeu	r4,r12,10008938 <__mdiff+0x130>
100088e4:	21400017 	ldw	r5,0(r4)
100088e8:	4a400104 	addi	r9,r9,4
100088ec:	21000104 	addi	r4,r4,4
100088f0:	29ffffcc 	andi	r7,r5,65535
100088f4:	38c7883a 	add	r3,r7,r3
100088f8:	280ad43a 	srli	r5,r5,16
100088fc:	180dd43a 	srai	r6,r3,16
10008900:	19ffffcc 	andi	r7,r3,65535
10008904:	3147883a 	add	r3,r6,r5
10008908:	180a943a 	slli	r5,r3,16
1000890c:	1807d43a 	srai	r3,r3,16
10008910:	29ceb03a 	or	r7,r5,r7
10008914:	49ffff15 	stw	r7,-4(r9)
10008918:	233ff236 	bltu	r4,r12,100088e4 <__alt_data_end+0xf80088e4>
1000891c:	0206303a 	nor	r3,zero,r8
10008920:	1b07883a 	add	r3,r3,r12
10008924:	1806d0ba 	srli	r3,r3,2
10008928:	18c00044 	addi	r3,r3,1
1000892c:	18c7883a 	add	r3,r3,r3
10008930:	18c7883a 	add	r3,r3,r3
10008934:	58cb883a 	add	r5,r11,r3
10008938:	28ffff04 	addi	r3,r5,-4
1000893c:	3800041e 	bne	r7,zero,10008950 <__mdiff+0x148>
10008940:	18ffff04 	addi	r3,r3,-4
10008944:	19000017 	ldw	r4,0(r3)
10008948:	6b7fffc4 	addi	r13,r13,-1
1000894c:	203ffc26 	beq	r4,zero,10008940 <__alt_data_end+0xf8008940>
10008950:	13400415 	stw	r13,16(r2)
10008954:	dfc00417 	ldw	ra,16(sp)
10008958:	dcc00317 	ldw	r19,12(sp)
1000895c:	dc800217 	ldw	r18,8(sp)
10008960:	dc400117 	ldw	r17,4(sp)
10008964:	dc000017 	ldw	r16,0(sp)
10008968:	dec00504 	addi	sp,sp,20
1000896c:	f800283a 	ret
10008970:	8005883a 	mov	r2,r16
10008974:	04400044 	movi	r17,1
10008978:	9021883a 	mov	r16,r18
1000897c:	1025883a 	mov	r18,r2
10008980:	003fb006 	br	10008844 <__alt_data_end+0xf8008844>
10008984:	9809883a 	mov	r4,r19
10008988:	000b883a 	mov	r5,zero
1000898c:	0007e2c0 	call	10007e2c <_Balloc>
10008990:	00c00044 	movi	r3,1
10008994:	10c00415 	stw	r3,16(r2)
10008998:	10000515 	stw	zero,20(r2)
1000899c:	003fed06 	br	10008954 <__alt_data_end+0xf8008954>

100089a0 <__ulp>:
100089a0:	295ffc2c 	andhi	r5,r5,32752
100089a4:	00bf3034 	movhi	r2,64704
100089a8:	2887883a 	add	r3,r5,r2
100089ac:	00c0020e 	bge	zero,r3,100089b8 <__ulp+0x18>
100089b0:	0005883a 	mov	r2,zero
100089b4:	f800283a 	ret
100089b8:	00c7c83a 	sub	r3,zero,r3
100089bc:	180bd53a 	srai	r5,r3,20
100089c0:	008004c4 	movi	r2,19
100089c4:	11400a0e 	bge	r2,r5,100089f0 <__ulp+0x50>
100089c8:	00800c84 	movi	r2,50
100089cc:	0007883a 	mov	r3,zero
100089d0:	11400516 	blt	r2,r5,100089e8 <__ulp+0x48>
100089d4:	00800cc4 	movi	r2,51
100089d8:	114bc83a 	sub	r5,r2,r5
100089dc:	00800044 	movi	r2,1
100089e0:	1144983a 	sll	r2,r2,r5
100089e4:	f800283a 	ret
100089e8:	00800044 	movi	r2,1
100089ec:	f800283a 	ret
100089f0:	00800234 	movhi	r2,8
100089f4:	1147d83a 	sra	r3,r2,r5
100089f8:	0005883a 	mov	r2,zero
100089fc:	f800283a 	ret

10008a00 <__b2d>:
10008a00:	defffa04 	addi	sp,sp,-24
10008a04:	dc000015 	stw	r16,0(sp)
10008a08:	24000417 	ldw	r16,16(r4)
10008a0c:	dc400115 	stw	r17,4(sp)
10008a10:	24400504 	addi	r17,r4,20
10008a14:	8421883a 	add	r16,r16,r16
10008a18:	8421883a 	add	r16,r16,r16
10008a1c:	8c21883a 	add	r16,r17,r16
10008a20:	dc800215 	stw	r18,8(sp)
10008a24:	84bfff17 	ldw	r18,-4(r16)
10008a28:	dd000415 	stw	r20,16(sp)
10008a2c:	dcc00315 	stw	r19,12(sp)
10008a30:	9009883a 	mov	r4,r18
10008a34:	2829883a 	mov	r20,r5
10008a38:	dfc00515 	stw	ra,20(sp)
10008a3c:	000813c0 	call	1000813c <__hi0bits>
10008a40:	00c00804 	movi	r3,32
10008a44:	1887c83a 	sub	r3,r3,r2
10008a48:	a0c00015 	stw	r3,0(r20)
10008a4c:	00c00284 	movi	r3,10
10008a50:	84ffff04 	addi	r19,r16,-4
10008a54:	18801216 	blt	r3,r2,10008aa0 <__b2d+0xa0>
10008a58:	014002c4 	movi	r5,11
10008a5c:	2889c83a 	sub	r4,r5,r2
10008a60:	9106d83a 	srl	r3,r18,r4
10008a64:	18cffc34 	orhi	r3,r3,16368
10008a68:	8cc0282e 	bgeu	r17,r19,10008b0c <__b2d+0x10c>
10008a6c:	817ffe17 	ldw	r5,-8(r16)
10008a70:	290ad83a 	srl	r5,r5,r4
10008a74:	10800544 	addi	r2,r2,21
10008a78:	9084983a 	sll	r2,r18,r2
10008a7c:	2884b03a 	or	r2,r5,r2
10008a80:	dfc00517 	ldw	ra,20(sp)
10008a84:	dd000417 	ldw	r20,16(sp)
10008a88:	dcc00317 	ldw	r19,12(sp)
10008a8c:	dc800217 	ldw	r18,8(sp)
10008a90:	dc400117 	ldw	r17,4(sp)
10008a94:	dc000017 	ldw	r16,0(sp)
10008a98:	dec00604 	addi	sp,sp,24
10008a9c:	f800283a 	ret
10008aa0:	113ffd44 	addi	r4,r2,-11
10008aa4:	8cc00f2e 	bgeu	r17,r19,10008ae4 <__b2d+0xe4>
10008aa8:	81bffe04 	addi	r6,r16,-8
10008aac:	817ffe17 	ldw	r5,-8(r16)
10008ab0:	20001326 	beq	r4,zero,10008b00 <__b2d+0x100>
10008ab4:	00c00ac4 	movi	r3,43
10008ab8:	1885c83a 	sub	r2,r3,r2
10008abc:	2886d83a 	srl	r3,r5,r2
10008ac0:	9124983a 	sll	r18,r18,r4
10008ac4:	90e4b03a 	or	r18,r18,r3
10008ac8:	90cffc34 	orhi	r3,r18,16368
10008acc:	8980112e 	bgeu	r17,r6,10008b14 <__b2d+0x114>
10008ad0:	81bffd17 	ldw	r6,-12(r16)
10008ad4:	308cd83a 	srl	r6,r6,r2
10008ad8:	2904983a 	sll	r2,r5,r4
10008adc:	1184b03a 	or	r2,r2,r6
10008ae0:	003fe706 	br	10008a80 <__alt_data_end+0xf8008a80>
10008ae4:	20000526 	beq	r4,zero,10008afc <__b2d+0xfc>
10008ae8:	9124983a 	sll	r18,r18,r4
10008aec:	000d883a 	mov	r6,zero
10008af0:	000b883a 	mov	r5,zero
10008af4:	90cffc34 	orhi	r3,r18,16368
10008af8:	003ff706 	br	10008ad8 <__alt_data_end+0xf8008ad8>
10008afc:	000b883a 	mov	r5,zero
10008b00:	90cffc34 	orhi	r3,r18,16368
10008b04:	2805883a 	mov	r2,r5
10008b08:	003fdd06 	br	10008a80 <__alt_data_end+0xf8008a80>
10008b0c:	000b883a 	mov	r5,zero
10008b10:	003fd806 	br	10008a74 <__alt_data_end+0xf8008a74>
10008b14:	000d883a 	mov	r6,zero
10008b18:	003fef06 	br	10008ad8 <__alt_data_end+0xf8008ad8>

10008b1c <__d2b>:
10008b1c:	defff704 	addi	sp,sp,-36
10008b20:	dc000215 	stw	r16,8(sp)
10008b24:	3021883a 	mov	r16,r6
10008b28:	dc400315 	stw	r17,12(sp)
10008b2c:	8022907a 	slli	r17,r16,1
10008b30:	dd400715 	stw	r21,28(sp)
10008b34:	282b883a 	mov	r21,r5
10008b38:	01400044 	movi	r5,1
10008b3c:	dd000615 	stw	r20,24(sp)
10008b40:	dcc00515 	stw	r19,20(sp)
10008b44:	dc800415 	stw	r18,16(sp)
10008b48:	dfc00815 	stw	ra,32(sp)
10008b4c:	3829883a 	mov	r20,r7
10008b50:	dc800917 	ldw	r18,36(sp)
10008b54:	8822d57a 	srli	r17,r17,21
10008b58:	0007e2c0 	call	10007e2c <_Balloc>
10008b5c:	1027883a 	mov	r19,r2
10008b60:	00800434 	movhi	r2,16
10008b64:	10bfffc4 	addi	r2,r2,-1
10008b68:	808c703a 	and	r6,r16,r2
10008b6c:	88000126 	beq	r17,zero,10008b74 <__d2b+0x58>
10008b70:	31800434 	orhi	r6,r6,16
10008b74:	d9800015 	stw	r6,0(sp)
10008b78:	a8001f26 	beq	r21,zero,10008bf8 <__d2b+0xdc>
10008b7c:	d9000104 	addi	r4,sp,4
10008b80:	dd400115 	stw	r21,4(sp)
10008b84:	00081a40 	call	100081a4 <__lo0bits>
10008b88:	d8c00017 	ldw	r3,0(sp)
10008b8c:	1000291e 	bne	r2,zero,10008c34 <__d2b+0x118>
10008b90:	d9000117 	ldw	r4,4(sp)
10008b94:	99000515 	stw	r4,20(r19)
10008b98:	1820c03a 	cmpne	r16,r3,zero
10008b9c:	84000044 	addi	r16,r16,1
10008ba0:	98c00615 	stw	r3,24(r19)
10008ba4:	9c000415 	stw	r16,16(r19)
10008ba8:	88001b1e 	bne	r17,zero,10008c18 <__d2b+0xfc>
10008bac:	800690ba 	slli	r3,r16,2
10008bb0:	10bef384 	addi	r2,r2,-1074
10008bb4:	a0800015 	stw	r2,0(r20)
10008bb8:	98c5883a 	add	r2,r19,r3
10008bbc:	11000417 	ldw	r4,16(r2)
10008bc0:	8020917a 	slli	r16,r16,5
10008bc4:	000813c0 	call	1000813c <__hi0bits>
10008bc8:	8085c83a 	sub	r2,r16,r2
10008bcc:	90800015 	stw	r2,0(r18)
10008bd0:	9805883a 	mov	r2,r19
10008bd4:	dfc00817 	ldw	ra,32(sp)
10008bd8:	dd400717 	ldw	r21,28(sp)
10008bdc:	dd000617 	ldw	r20,24(sp)
10008be0:	dcc00517 	ldw	r19,20(sp)
10008be4:	dc800417 	ldw	r18,16(sp)
10008be8:	dc400317 	ldw	r17,12(sp)
10008bec:	dc000217 	ldw	r16,8(sp)
10008bf0:	dec00904 	addi	sp,sp,36
10008bf4:	f800283a 	ret
10008bf8:	d809883a 	mov	r4,sp
10008bfc:	00081a40 	call	100081a4 <__lo0bits>
10008c00:	d8c00017 	ldw	r3,0(sp)
10008c04:	04000044 	movi	r16,1
10008c08:	9c000415 	stw	r16,16(r19)
10008c0c:	98c00515 	stw	r3,20(r19)
10008c10:	10800804 	addi	r2,r2,32
10008c14:	883fe526 	beq	r17,zero,10008bac <__alt_data_end+0xf8008bac>
10008c18:	8c7ef344 	addi	r17,r17,-1075
10008c1c:	88a3883a 	add	r17,r17,r2
10008c20:	00c00d44 	movi	r3,53
10008c24:	a4400015 	stw	r17,0(r20)
10008c28:	1885c83a 	sub	r2,r3,r2
10008c2c:	90800015 	stw	r2,0(r18)
10008c30:	003fe706 	br	10008bd0 <__alt_data_end+0xf8008bd0>
10008c34:	01000804 	movi	r4,32
10008c38:	2089c83a 	sub	r4,r4,r2
10008c3c:	1908983a 	sll	r4,r3,r4
10008c40:	d9400117 	ldw	r5,4(sp)
10008c44:	1886d83a 	srl	r3,r3,r2
10008c48:	2148b03a 	or	r4,r4,r5
10008c4c:	99000515 	stw	r4,20(r19)
10008c50:	d8c00015 	stw	r3,0(sp)
10008c54:	003fd006 	br	10008b98 <__alt_data_end+0xf8008b98>

10008c58 <__ratio>:
10008c58:	defff904 	addi	sp,sp,-28
10008c5c:	dc400315 	stw	r17,12(sp)
10008c60:	2823883a 	mov	r17,r5
10008c64:	d9400104 	addi	r5,sp,4
10008c68:	dfc00615 	stw	ra,24(sp)
10008c6c:	dcc00515 	stw	r19,20(sp)
10008c70:	dc800415 	stw	r18,16(sp)
10008c74:	2027883a 	mov	r19,r4
10008c78:	dc000215 	stw	r16,8(sp)
10008c7c:	0008a000 	call	10008a00 <__b2d>
10008c80:	8809883a 	mov	r4,r17
10008c84:	d80b883a 	mov	r5,sp
10008c88:	1025883a 	mov	r18,r2
10008c8c:	1821883a 	mov	r16,r3
10008c90:	0008a000 	call	10008a00 <__b2d>
10008c94:	8a400417 	ldw	r9,16(r17)
10008c98:	9a000417 	ldw	r8,16(r19)
10008c9c:	100d883a 	mov	r6,r2
10008ca0:	d8800017 	ldw	r2,0(sp)
10008ca4:	4251c83a 	sub	r8,r8,r9
10008ca8:	4012917a 	slli	r9,r8,5
10008cac:	da000117 	ldw	r8,4(sp)
10008cb0:	4091c83a 	sub	r8,r8,r2
10008cb4:	4251883a 	add	r8,r8,r9
10008cb8:	02000d0e 	bge	zero,r8,10008cf0 <__ratio+0x98>
10008cbc:	4010953a 	slli	r8,r8,20
10008cc0:	4421883a 	add	r16,r8,r16
10008cc4:	9009883a 	mov	r4,r18
10008cc8:	800b883a 	mov	r5,r16
10008ccc:	180f883a 	mov	r7,r3
10008cd0:	000cbb00 	call	1000cbb0 <__divdf3>
10008cd4:	dfc00617 	ldw	ra,24(sp)
10008cd8:	dcc00517 	ldw	r19,20(sp)
10008cdc:	dc800417 	ldw	r18,16(sp)
10008ce0:	dc400317 	ldw	r17,12(sp)
10008ce4:	dc000217 	ldw	r16,8(sp)
10008ce8:	dec00704 	addi	sp,sp,28
10008cec:	f800283a 	ret
10008cf0:	4010953a 	slli	r8,r8,20
10008cf4:	1a07c83a 	sub	r3,r3,r8
10008cf8:	003ff206 	br	10008cc4 <__alt_data_end+0xf8008cc4>

10008cfc <_mprec_log10>:
10008cfc:	defffe04 	addi	sp,sp,-8
10008d00:	dc000015 	stw	r16,0(sp)
10008d04:	dfc00115 	stw	ra,4(sp)
10008d08:	008005c4 	movi	r2,23
10008d0c:	2021883a 	mov	r16,r4
10008d10:	11000d0e 	bge	r2,r4,10008d48 <_mprec_log10+0x4c>
10008d14:	0005883a 	mov	r2,zero
10008d18:	00cffc34 	movhi	r3,16368
10008d1c:	843fffc4 	addi	r16,r16,-1
10008d20:	1009883a 	mov	r4,r2
10008d24:	180b883a 	mov	r5,r3
10008d28:	000d883a 	mov	r6,zero
10008d2c:	01d00934 	movhi	r7,16420
10008d30:	000d7740 	call	1000d774 <__muldf3>
10008d34:	803ff91e 	bne	r16,zero,10008d1c <__alt_data_end+0xf8008d1c>
10008d38:	dfc00117 	ldw	ra,4(sp)
10008d3c:	dc000017 	ldw	r16,0(sp)
10008d40:	dec00204 	addi	sp,sp,8
10008d44:	f800283a 	ret
10008d48:	202090fa 	slli	r16,r4,3
10008d4c:	00840074 	movhi	r2,4097
10008d50:	1086ec04 	addi	r2,r2,7088
10008d54:	1421883a 	add	r16,r2,r16
10008d58:	80800017 	ldw	r2,0(r16)
10008d5c:	80c00117 	ldw	r3,4(r16)
10008d60:	dfc00117 	ldw	ra,4(sp)
10008d64:	dc000017 	ldw	r16,0(sp)
10008d68:	dec00204 	addi	sp,sp,8
10008d6c:	f800283a 	ret

10008d70 <__copybits>:
10008d70:	297fffc4 	addi	r5,r5,-1
10008d74:	280fd17a 	srai	r7,r5,5
10008d78:	30c00417 	ldw	r3,16(r6)
10008d7c:	30800504 	addi	r2,r6,20
10008d80:	39c00044 	addi	r7,r7,1
10008d84:	18c7883a 	add	r3,r3,r3
10008d88:	39cf883a 	add	r7,r7,r7
10008d8c:	18c7883a 	add	r3,r3,r3
10008d90:	39cf883a 	add	r7,r7,r7
10008d94:	10c7883a 	add	r3,r2,r3
10008d98:	21cf883a 	add	r7,r4,r7
10008d9c:	10c00d2e 	bgeu	r2,r3,10008dd4 <__copybits+0x64>
10008da0:	200b883a 	mov	r5,r4
10008da4:	12000017 	ldw	r8,0(r2)
10008da8:	29400104 	addi	r5,r5,4
10008dac:	10800104 	addi	r2,r2,4
10008db0:	2a3fff15 	stw	r8,-4(r5)
10008db4:	10fffb36 	bltu	r2,r3,10008da4 <__alt_data_end+0xf8008da4>
10008db8:	1985c83a 	sub	r2,r3,r6
10008dbc:	10bffac4 	addi	r2,r2,-21
10008dc0:	1004d0ba 	srli	r2,r2,2
10008dc4:	10800044 	addi	r2,r2,1
10008dc8:	1085883a 	add	r2,r2,r2
10008dcc:	1085883a 	add	r2,r2,r2
10008dd0:	2089883a 	add	r4,r4,r2
10008dd4:	21c0032e 	bgeu	r4,r7,10008de4 <__copybits+0x74>
10008dd8:	20000015 	stw	zero,0(r4)
10008ddc:	21000104 	addi	r4,r4,4
10008de0:	21fffd36 	bltu	r4,r7,10008dd8 <__alt_data_end+0xf8008dd8>
10008de4:	f800283a 	ret

10008de8 <__any_on>:
10008de8:	20c00417 	ldw	r3,16(r4)
10008dec:	2805d17a 	srai	r2,r5,5
10008df0:	21000504 	addi	r4,r4,20
10008df4:	18800d0e 	bge	r3,r2,10008e2c <__any_on+0x44>
10008df8:	18c7883a 	add	r3,r3,r3
10008dfc:	18c7883a 	add	r3,r3,r3
10008e00:	20c7883a 	add	r3,r4,r3
10008e04:	20c0192e 	bgeu	r4,r3,10008e6c <__any_on+0x84>
10008e08:	18bfff17 	ldw	r2,-4(r3)
10008e0c:	18ffff04 	addi	r3,r3,-4
10008e10:	1000041e 	bne	r2,zero,10008e24 <__any_on+0x3c>
10008e14:	20c0142e 	bgeu	r4,r3,10008e68 <__any_on+0x80>
10008e18:	18ffff04 	addi	r3,r3,-4
10008e1c:	19400017 	ldw	r5,0(r3)
10008e20:	283ffc26 	beq	r5,zero,10008e14 <__alt_data_end+0xf8008e14>
10008e24:	00800044 	movi	r2,1
10008e28:	f800283a 	ret
10008e2c:	10c00a0e 	bge	r2,r3,10008e58 <__any_on+0x70>
10008e30:	1085883a 	add	r2,r2,r2
10008e34:	1085883a 	add	r2,r2,r2
10008e38:	294007cc 	andi	r5,r5,31
10008e3c:	2087883a 	add	r3,r4,r2
10008e40:	283ff026 	beq	r5,zero,10008e04 <__alt_data_end+0xf8008e04>
10008e44:	19800017 	ldw	r6,0(r3)
10008e48:	3144d83a 	srl	r2,r6,r5
10008e4c:	114a983a 	sll	r5,r2,r5
10008e50:	29bff41e 	bne	r5,r6,10008e24 <__alt_data_end+0xf8008e24>
10008e54:	003feb06 	br	10008e04 <__alt_data_end+0xf8008e04>
10008e58:	1085883a 	add	r2,r2,r2
10008e5c:	1085883a 	add	r2,r2,r2
10008e60:	2087883a 	add	r3,r4,r2
10008e64:	003fe706 	br	10008e04 <__alt_data_end+0xf8008e04>
10008e68:	f800283a 	ret
10008e6c:	0005883a 	mov	r2,zero
10008e70:	f800283a 	ret

10008e74 <_realloc_r>:
10008e74:	defff604 	addi	sp,sp,-40
10008e78:	dcc00315 	stw	r19,12(sp)
10008e7c:	dc400115 	stw	r17,4(sp)
10008e80:	dfc00915 	stw	ra,36(sp)
10008e84:	df000815 	stw	fp,32(sp)
10008e88:	ddc00715 	stw	r23,28(sp)
10008e8c:	dd800615 	stw	r22,24(sp)
10008e90:	dd400515 	stw	r21,20(sp)
10008e94:	dd000415 	stw	r20,16(sp)
10008e98:	dc800215 	stw	r18,8(sp)
10008e9c:	dc000015 	stw	r16,0(sp)
10008ea0:	2827883a 	mov	r19,r5
10008ea4:	3023883a 	mov	r17,r6
10008ea8:	2800bf26 	beq	r5,zero,100091a8 <_realloc_r+0x334>
10008eac:	2025883a 	mov	r18,r4
10008eb0:	000f0f00 	call	1000f0f0 <__malloc_lock>
10008eb4:	98ffff17 	ldw	r3,-4(r19)
10008eb8:	01bfff04 	movi	r6,-4
10008ebc:	890002c4 	addi	r4,r17,11
10008ec0:	01c00584 	movi	r7,22
10008ec4:	9d7ffe04 	addi	r21,r19,-8
10008ec8:	19a0703a 	and	r16,r3,r6
10008ecc:	39003f2e 	bgeu	r7,r4,10008fcc <_realloc_r+0x158>
10008ed0:	053ffe04 	movi	r20,-8
10008ed4:	2528703a 	and	r20,r4,r20
10008ed8:	a00f883a 	mov	r7,r20
10008edc:	a0008216 	blt	r20,zero,100090e8 <_realloc_r+0x274>
10008ee0:	a4408136 	bltu	r20,r17,100090e8 <_realloc_r+0x274>
10008ee4:	81c03c0e 	bge	r16,r7,10008fd8 <_realloc_r+0x164>
10008ee8:	07040074 	movhi	fp,4097
10008eec:	e7089a04 	addi	fp,fp,8808
10008ef0:	e1000217 	ldw	r4,8(fp)
10008ef4:	ac05883a 	add	r2,r21,r16
10008ef8:	2080bf26 	beq	r4,r2,100091f8 <_realloc_r+0x384>
10008efc:	11000117 	ldw	r4,4(r2)
10008f00:	023fff84 	movi	r8,-2
10008f04:	2210703a 	and	r8,r4,r8
10008f08:	1211883a 	add	r8,r2,r8
10008f0c:	41400117 	ldw	r5,4(r8)
10008f10:	2940004c 	andi	r5,r5,1
10008f14:	28004a1e 	bne	r5,zero,10009040 <_realloc_r+0x1cc>
10008f18:	017fff04 	movi	r5,-4
10008f1c:	2148703a 	and	r4,r4,r5
10008f20:	2409883a 	add	r4,r4,r16
10008f24:	21c0ad0e 	bge	r4,r7,100091dc <_realloc_r+0x368>
10008f28:	18c0004c 	andi	r3,r3,1
10008f2c:	18007f1e 	bne	r3,zero,1000912c <_realloc_r+0x2b8>
10008f30:	9dfffe17 	ldw	r23,-8(r19)
10008f34:	adefc83a 	sub	r23,r21,r23
10008f38:	bd800117 	ldw	r22,4(r23)
10008f3c:	b14a703a 	and	r5,r22,r5
10008f40:	216d883a 	add	r22,r4,r5
10008f44:	b1c04516 	blt	r22,r7,1000905c <_realloc_r+0x1e8>
10008f48:	10c00317 	ldw	r3,12(r2)
10008f4c:	10800217 	ldw	r2,8(r2)
10008f50:	81bfff04 	addi	r6,r16,-4
10008f54:	bc400204 	addi	r17,r23,8
10008f58:	10c00315 	stw	r3,12(r2)
10008f5c:	18800215 	stw	r2,8(r3)
10008f60:	b9400217 	ldw	r5,8(r23)
10008f64:	b8c00317 	ldw	r3,12(r23)
10008f68:	00800904 	movi	r2,36
10008f6c:	28c00315 	stw	r3,12(r5)
10008f70:	19400215 	stw	r5,8(r3)
10008f74:	1180ef36 	bltu	r2,r6,10009334 <_realloc_r+0x4c0>
10008f78:	008004c4 	movi	r2,19
10008f7c:	1180da2e 	bgeu	r2,r6,100092e8 <_realloc_r+0x474>
10008f80:	98800017 	ldw	r2,0(r19)
10008f84:	b8800215 	stw	r2,8(r23)
10008f88:	98800117 	ldw	r2,4(r19)
10008f8c:	b8800315 	stw	r2,12(r23)
10008f90:	008006c4 	movi	r2,27
10008f94:	1180fc2e 	bgeu	r2,r6,10009388 <_realloc_r+0x514>
10008f98:	98800217 	ldw	r2,8(r19)
10008f9c:	b8800415 	stw	r2,16(r23)
10008fa0:	98800317 	ldw	r2,12(r19)
10008fa4:	b8800515 	stw	r2,20(r23)
10008fa8:	00800904 	movi	r2,36
10008fac:	3080421e 	bne	r6,r2,100090b8 <_realloc_r+0x244>
10008fb0:	98800417 	ldw	r2,16(r19)
10008fb4:	9cc00604 	addi	r19,r19,24
10008fb8:	b8c00804 	addi	r3,r23,32
10008fbc:	b8800615 	stw	r2,24(r23)
10008fc0:	98bfff17 	ldw	r2,-4(r19)
10008fc4:	b8800715 	stw	r2,28(r23)
10008fc8:	00003d06 	br	100090c0 <_realloc_r+0x24c>
10008fcc:	01c00404 	movi	r7,16
10008fd0:	3829883a 	mov	r20,r7
10008fd4:	003fc206 	br	10008ee0 <__alt_data_end+0xf8008ee0>
10008fd8:	9823883a 	mov	r17,r19
10008fdc:	850fc83a 	sub	r7,r16,r20
10008fe0:	008003c4 	movi	r2,15
10008fe4:	18c0004c 	andi	r3,r3,1
10008fe8:	11c04336 	bltu	r2,r7,100090f8 <_realloc_r+0x284>
10008fec:	1c06b03a 	or	r3,r3,r16
10008ff0:	a8c00115 	stw	r3,4(r21)
10008ff4:	ac21883a 	add	r16,r21,r16
10008ff8:	80c00117 	ldw	r3,4(r16)
10008ffc:	18c00054 	ori	r3,r3,1
10009000:	80c00115 	stw	r3,4(r16)
10009004:	9009883a 	mov	r4,r18
10009008:	000f1100 	call	1000f110 <__malloc_unlock>
1000900c:	8805883a 	mov	r2,r17
10009010:	dfc00917 	ldw	ra,36(sp)
10009014:	df000817 	ldw	fp,32(sp)
10009018:	ddc00717 	ldw	r23,28(sp)
1000901c:	dd800617 	ldw	r22,24(sp)
10009020:	dd400517 	ldw	r21,20(sp)
10009024:	dd000417 	ldw	r20,16(sp)
10009028:	dcc00317 	ldw	r19,12(sp)
1000902c:	dc800217 	ldw	r18,8(sp)
10009030:	dc400117 	ldw	r17,4(sp)
10009034:	dc000017 	ldw	r16,0(sp)
10009038:	dec00a04 	addi	sp,sp,40
1000903c:	f800283a 	ret
10009040:	18c0004c 	andi	r3,r3,1
10009044:	1800391e 	bne	r3,zero,1000912c <_realloc_r+0x2b8>
10009048:	9dfffe17 	ldw	r23,-8(r19)
1000904c:	00bfff04 	movi	r2,-4
10009050:	adefc83a 	sub	r23,r21,r23
10009054:	b9400117 	ldw	r5,4(r23)
10009058:	288a703a 	and	r5,r5,r2
1000905c:	2c2d883a 	add	r22,r5,r16
10009060:	b1c03216 	blt	r22,r7,1000912c <_realloc_r+0x2b8>
10009064:	b8800317 	ldw	r2,12(r23)
10009068:	b8c00217 	ldw	r3,8(r23)
1000906c:	81bfff04 	addi	r6,r16,-4
10009070:	01000904 	movi	r4,36
10009074:	18800315 	stw	r2,12(r3)
10009078:	10c00215 	stw	r3,8(r2)
1000907c:	bc400204 	addi	r17,r23,8
10009080:	2180ac36 	bltu	r4,r6,10009334 <_realloc_r+0x4c0>
10009084:	008004c4 	movi	r2,19
10009088:	1180972e 	bgeu	r2,r6,100092e8 <_realloc_r+0x474>
1000908c:	98800017 	ldw	r2,0(r19)
10009090:	b8800215 	stw	r2,8(r23)
10009094:	98800117 	ldw	r2,4(r19)
10009098:	b8800315 	stw	r2,12(r23)
1000909c:	008006c4 	movi	r2,27
100090a0:	1180b92e 	bgeu	r2,r6,10009388 <_realloc_r+0x514>
100090a4:	98800217 	ldw	r2,8(r19)
100090a8:	b8800415 	stw	r2,16(r23)
100090ac:	98800317 	ldw	r2,12(r19)
100090b0:	b8800515 	stw	r2,20(r23)
100090b4:	313fbe26 	beq	r6,r4,10008fb0 <__alt_data_end+0xf8008fb0>
100090b8:	b8c00604 	addi	r3,r23,24
100090bc:	9cc00404 	addi	r19,r19,16
100090c0:	98800017 	ldw	r2,0(r19)
100090c4:	b021883a 	mov	r16,r22
100090c8:	b82b883a 	mov	r21,r23
100090cc:	18800015 	stw	r2,0(r3)
100090d0:	98800117 	ldw	r2,4(r19)
100090d4:	18800115 	stw	r2,4(r3)
100090d8:	98800217 	ldw	r2,8(r19)
100090dc:	18800215 	stw	r2,8(r3)
100090e0:	b8c00117 	ldw	r3,4(r23)
100090e4:	003fbd06 	br	10008fdc <__alt_data_end+0xf8008fdc>
100090e8:	00800304 	movi	r2,12
100090ec:	90800015 	stw	r2,0(r18)
100090f0:	0005883a 	mov	r2,zero
100090f4:	003fc606 	br	10009010 <__alt_data_end+0xf8009010>
100090f8:	1d06b03a 	or	r3,r3,r20
100090fc:	ad0b883a 	add	r5,r21,r20
10009100:	a8c00115 	stw	r3,4(r21)
10009104:	38800054 	ori	r2,r7,1
10009108:	28800115 	stw	r2,4(r5)
1000910c:	29cf883a 	add	r7,r5,r7
10009110:	38800117 	ldw	r2,4(r7)
10009114:	9009883a 	mov	r4,r18
10009118:	29400204 	addi	r5,r5,8
1000911c:	10800054 	ori	r2,r2,1
10009120:	38800115 	stw	r2,4(r7)
10009124:	00066480 	call	10006648 <_free_r>
10009128:	003fb606 	br	10009004 <__alt_data_end+0xf8009004>
1000912c:	880b883a 	mov	r5,r17
10009130:	9009883a 	mov	r4,r18
10009134:	00071e40 	call	100071e4 <_malloc_r>
10009138:	1023883a 	mov	r17,r2
1000913c:	1000aa26 	beq	r2,zero,100093e8 <_realloc_r+0x574>
10009140:	98ffff17 	ldw	r3,-4(r19)
10009144:	113ffe04 	addi	r4,r2,-8
10009148:	00bfff84 	movi	r2,-2
1000914c:	1884703a 	and	r2,r3,r2
10009150:	a885883a 	add	r2,r21,r2
10009154:	20808626 	beq	r4,r2,10009370 <_realloc_r+0x4fc>
10009158:	81bfff04 	addi	r6,r16,-4
1000915c:	00800904 	movi	r2,36
10009160:	11807036 	bltu	r2,r6,10009324 <_realloc_r+0x4b0>
10009164:	00c004c4 	movi	r3,19
10009168:	19805636 	bltu	r3,r6,100092c4 <_realloc_r+0x450>
1000916c:	8805883a 	mov	r2,r17
10009170:	9807883a 	mov	r3,r19
10009174:	19000017 	ldw	r4,0(r3)
10009178:	11000015 	stw	r4,0(r2)
1000917c:	19000117 	ldw	r4,4(r3)
10009180:	11000115 	stw	r4,4(r2)
10009184:	18c00217 	ldw	r3,8(r3)
10009188:	10c00215 	stw	r3,8(r2)
1000918c:	980b883a 	mov	r5,r19
10009190:	9009883a 	mov	r4,r18
10009194:	00066480 	call	10006648 <_free_r>
10009198:	9009883a 	mov	r4,r18
1000919c:	000f1100 	call	1000f110 <__malloc_unlock>
100091a0:	8805883a 	mov	r2,r17
100091a4:	003f9a06 	br	10009010 <__alt_data_end+0xf8009010>
100091a8:	300b883a 	mov	r5,r6
100091ac:	dfc00917 	ldw	ra,36(sp)
100091b0:	df000817 	ldw	fp,32(sp)
100091b4:	ddc00717 	ldw	r23,28(sp)
100091b8:	dd800617 	ldw	r22,24(sp)
100091bc:	dd400517 	ldw	r21,20(sp)
100091c0:	dd000417 	ldw	r20,16(sp)
100091c4:	dcc00317 	ldw	r19,12(sp)
100091c8:	dc800217 	ldw	r18,8(sp)
100091cc:	dc400117 	ldw	r17,4(sp)
100091d0:	dc000017 	ldw	r16,0(sp)
100091d4:	dec00a04 	addi	sp,sp,40
100091d8:	00071e41 	jmpi	100071e4 <_malloc_r>
100091dc:	11400317 	ldw	r5,12(r2)
100091e0:	10800217 	ldw	r2,8(r2)
100091e4:	9823883a 	mov	r17,r19
100091e8:	2021883a 	mov	r16,r4
100091ec:	11400315 	stw	r5,12(r2)
100091f0:	28800215 	stw	r2,8(r5)
100091f4:	003f7906 	br	10008fdc <__alt_data_end+0xf8008fdc>
100091f8:	21000117 	ldw	r4,4(r4)
100091fc:	00bfff04 	movi	r2,-4
10009200:	a1800404 	addi	r6,r20,16
10009204:	2088703a 	and	r4,r4,r2
10009208:	2409883a 	add	r4,r4,r16
1000920c:	2180380e 	bge	r4,r6,100092f0 <_realloc_r+0x47c>
10009210:	18c0004c 	andi	r3,r3,1
10009214:	183fc51e 	bne	r3,zero,1000912c <__alt_data_end+0xf800912c>
10009218:	9dfffe17 	ldw	r23,-8(r19)
1000921c:	adefc83a 	sub	r23,r21,r23
10009220:	b9400117 	ldw	r5,4(r23)
10009224:	288a703a 	and	r5,r5,r2
10009228:	216d883a 	add	r22,r4,r5
1000922c:	b1bf8b16 	blt	r22,r6,1000905c <__alt_data_end+0xf800905c>
10009230:	b8800317 	ldw	r2,12(r23)
10009234:	b8c00217 	ldw	r3,8(r23)
10009238:	81bfff04 	addi	r6,r16,-4
1000923c:	01000904 	movi	r4,36
10009240:	18800315 	stw	r2,12(r3)
10009244:	10c00215 	stw	r3,8(r2)
10009248:	bc400204 	addi	r17,r23,8
1000924c:	21805a36 	bltu	r4,r6,100093b8 <_realloc_r+0x544>
10009250:	008004c4 	movi	r2,19
10009254:	1180562e 	bgeu	r2,r6,100093b0 <_realloc_r+0x53c>
10009258:	98800017 	ldw	r2,0(r19)
1000925c:	b8800215 	stw	r2,8(r23)
10009260:	98800117 	ldw	r2,4(r19)
10009264:	b8800315 	stw	r2,12(r23)
10009268:	008006c4 	movi	r2,27
1000926c:	11805636 	bltu	r2,r6,100093c8 <_realloc_r+0x554>
10009270:	b8800404 	addi	r2,r23,16
10009274:	9cc00204 	addi	r19,r19,8
10009278:	98c00017 	ldw	r3,0(r19)
1000927c:	10c00015 	stw	r3,0(r2)
10009280:	98c00117 	ldw	r3,4(r19)
10009284:	10c00115 	stw	r3,4(r2)
10009288:	98c00217 	ldw	r3,8(r19)
1000928c:	10c00215 	stw	r3,8(r2)
10009290:	bd07883a 	add	r3,r23,r20
10009294:	b505c83a 	sub	r2,r22,r20
10009298:	e0c00215 	stw	r3,8(fp)
1000929c:	10800054 	ori	r2,r2,1
100092a0:	18800115 	stw	r2,4(r3)
100092a4:	b8800117 	ldw	r2,4(r23)
100092a8:	9009883a 	mov	r4,r18
100092ac:	1080004c 	andi	r2,r2,1
100092b0:	a0a8b03a 	or	r20,r20,r2
100092b4:	bd000115 	stw	r20,4(r23)
100092b8:	000f1100 	call	1000f110 <__malloc_unlock>
100092bc:	8805883a 	mov	r2,r17
100092c0:	003f5306 	br	10009010 <__alt_data_end+0xf8009010>
100092c4:	98c00017 	ldw	r3,0(r19)
100092c8:	88c00015 	stw	r3,0(r17)
100092cc:	98c00117 	ldw	r3,4(r19)
100092d0:	88c00115 	stw	r3,4(r17)
100092d4:	00c006c4 	movi	r3,27
100092d8:	19801d36 	bltu	r3,r6,10009350 <_realloc_r+0x4dc>
100092dc:	88800204 	addi	r2,r17,8
100092e0:	98c00204 	addi	r3,r19,8
100092e4:	003fa306 	br	10009174 <__alt_data_end+0xf8009174>
100092e8:	8807883a 	mov	r3,r17
100092ec:	003f7406 	br	100090c0 <__alt_data_end+0xf80090c0>
100092f0:	ad2b883a 	add	r21,r21,r20
100092f4:	2505c83a 	sub	r2,r4,r20
100092f8:	e5400215 	stw	r21,8(fp)
100092fc:	10800054 	ori	r2,r2,1
10009300:	a8800115 	stw	r2,4(r21)
10009304:	98bfff17 	ldw	r2,-4(r19)
10009308:	9009883a 	mov	r4,r18
1000930c:	1080004c 	andi	r2,r2,1
10009310:	a0a8b03a 	or	r20,r20,r2
10009314:	9d3fff15 	stw	r20,-4(r19)
10009318:	000f1100 	call	1000f110 <__malloc_unlock>
1000931c:	9805883a 	mov	r2,r19
10009320:	003f3b06 	br	10009010 <__alt_data_end+0xf8009010>
10009324:	8809883a 	mov	r4,r17
10009328:	980b883a 	mov	r5,r19
1000932c:	0007bac0 	call	10007bac <memmove>
10009330:	003f9606 	br	1000918c <__alt_data_end+0xf800918c>
10009334:	8809883a 	mov	r4,r17
10009338:	980b883a 	mov	r5,r19
1000933c:	0007bac0 	call	10007bac <memmove>
10009340:	b8c00117 	ldw	r3,4(r23)
10009344:	b021883a 	mov	r16,r22
10009348:	b82b883a 	mov	r21,r23
1000934c:	003f2306 	br	10008fdc <__alt_data_end+0xf8008fdc>
10009350:	98c00217 	ldw	r3,8(r19)
10009354:	88c00215 	stw	r3,8(r17)
10009358:	98c00317 	ldw	r3,12(r19)
1000935c:	88c00315 	stw	r3,12(r17)
10009360:	30800c26 	beq	r6,r2,10009394 <_realloc_r+0x520>
10009364:	88800404 	addi	r2,r17,16
10009368:	98c00404 	addi	r3,r19,16
1000936c:	003f8106 	br	10009174 <__alt_data_end+0xf8009174>
10009370:	893fff17 	ldw	r4,-4(r17)
10009374:	00bfff04 	movi	r2,-4
10009378:	9823883a 	mov	r17,r19
1000937c:	2084703a 	and	r2,r4,r2
10009380:	80a1883a 	add	r16,r16,r2
10009384:	003f1506 	br	10008fdc <__alt_data_end+0xf8008fdc>
10009388:	b8c00404 	addi	r3,r23,16
1000938c:	9cc00204 	addi	r19,r19,8
10009390:	003f4b06 	br	100090c0 <__alt_data_end+0xf80090c0>
10009394:	99000417 	ldw	r4,16(r19)
10009398:	88800604 	addi	r2,r17,24
1000939c:	98c00604 	addi	r3,r19,24
100093a0:	89000415 	stw	r4,16(r17)
100093a4:	99000517 	ldw	r4,20(r19)
100093a8:	89000515 	stw	r4,20(r17)
100093ac:	003f7106 	br	10009174 <__alt_data_end+0xf8009174>
100093b0:	8805883a 	mov	r2,r17
100093b4:	003fb006 	br	10009278 <__alt_data_end+0xf8009278>
100093b8:	8809883a 	mov	r4,r17
100093bc:	980b883a 	mov	r5,r19
100093c0:	0007bac0 	call	10007bac <memmove>
100093c4:	003fb206 	br	10009290 <__alt_data_end+0xf8009290>
100093c8:	98800217 	ldw	r2,8(r19)
100093cc:	b8800415 	stw	r2,16(r23)
100093d0:	98800317 	ldw	r2,12(r19)
100093d4:	b8800515 	stw	r2,20(r23)
100093d8:	31000726 	beq	r6,r4,100093f8 <_realloc_r+0x584>
100093dc:	b8800604 	addi	r2,r23,24
100093e0:	9cc00404 	addi	r19,r19,16
100093e4:	003fa406 	br	10009278 <__alt_data_end+0xf8009278>
100093e8:	9009883a 	mov	r4,r18
100093ec:	000f1100 	call	1000f110 <__malloc_unlock>
100093f0:	0005883a 	mov	r2,zero
100093f4:	003f0606 	br	10009010 <__alt_data_end+0xf8009010>
100093f8:	98c00417 	ldw	r3,16(r19)
100093fc:	9cc00604 	addi	r19,r19,24
10009400:	b8800804 	addi	r2,r23,32
10009404:	b8c00615 	stw	r3,24(r23)
10009408:	98ffff17 	ldw	r3,-4(r19)
1000940c:	b8c00715 	stw	r3,28(r23)
10009410:	003f9906 	br	10009278 <__alt_data_end+0xf8009278>

10009414 <__fpclassifyd>:
10009414:	00a00034 	movhi	r2,32768
10009418:	10bfffc4 	addi	r2,r2,-1
1000941c:	2884703a 	and	r2,r5,r2
10009420:	10000726 	beq	r2,zero,10009440 <__fpclassifyd+0x2c>
10009424:	00fffc34 	movhi	r3,65520
10009428:	019ff834 	movhi	r6,32736
1000942c:	28c7883a 	add	r3,r5,r3
10009430:	31bfffc4 	addi	r6,r6,-1
10009434:	30c00536 	bltu	r6,r3,1000944c <__fpclassifyd+0x38>
10009438:	00800104 	movi	r2,4
1000943c:	f800283a 	ret
10009440:	2000021e 	bne	r4,zero,1000944c <__fpclassifyd+0x38>
10009444:	00800084 	movi	r2,2
10009448:	f800283a 	ret
1000944c:	00dffc34 	movhi	r3,32752
10009450:	019ff834 	movhi	r6,32736
10009454:	28cb883a 	add	r5,r5,r3
10009458:	31bfffc4 	addi	r6,r6,-1
1000945c:	317ff62e 	bgeu	r6,r5,10009438 <__alt_data_end+0xf8009438>
10009460:	01400434 	movhi	r5,16
10009464:	297fffc4 	addi	r5,r5,-1
10009468:	28800236 	bltu	r5,r2,10009474 <__fpclassifyd+0x60>
1000946c:	008000c4 	movi	r2,3
10009470:	f800283a 	ret
10009474:	10c00226 	beq	r2,r3,10009480 <__fpclassifyd+0x6c>
10009478:	0005883a 	mov	r2,zero
1000947c:	f800283a 	ret
10009480:	2005003a 	cmpeq	r2,r4,zero
10009484:	f800283a 	ret

10009488 <_sbrk_r>:
10009488:	defffd04 	addi	sp,sp,-12
1000948c:	dc000015 	stw	r16,0(sp)
10009490:	04040074 	movhi	r16,4097
10009494:	dc400115 	stw	r17,4(sp)
10009498:	8414f004 	addi	r16,r16,21440
1000949c:	2023883a 	mov	r17,r4
100094a0:	2809883a 	mov	r4,r5
100094a4:	dfc00215 	stw	ra,8(sp)
100094a8:	80000015 	stw	zero,0(r16)
100094ac:	000f3040 	call	1000f304 <sbrk>
100094b0:	00ffffc4 	movi	r3,-1
100094b4:	10c00526 	beq	r2,r3,100094cc <_sbrk_r+0x44>
100094b8:	dfc00217 	ldw	ra,8(sp)
100094bc:	dc400117 	ldw	r17,4(sp)
100094c0:	dc000017 	ldw	r16,0(sp)
100094c4:	dec00304 	addi	sp,sp,12
100094c8:	f800283a 	ret
100094cc:	80c00017 	ldw	r3,0(r16)
100094d0:	183ff926 	beq	r3,zero,100094b8 <__alt_data_end+0xf80094b8>
100094d4:	88c00015 	stw	r3,0(r17)
100094d8:	003ff706 	br	100094b8 <__alt_data_end+0xf80094b8>

100094dc <__sread>:
100094dc:	defffe04 	addi	sp,sp,-8
100094e0:	dc000015 	stw	r16,0(sp)
100094e4:	2821883a 	mov	r16,r5
100094e8:	2940038f 	ldh	r5,14(r5)
100094ec:	dfc00115 	stw	ra,4(sp)
100094f0:	000b1980 	call	1000b198 <_read_r>
100094f4:	10000716 	blt	r2,zero,10009514 <__sread+0x38>
100094f8:	80c01417 	ldw	r3,80(r16)
100094fc:	1887883a 	add	r3,r3,r2
10009500:	80c01415 	stw	r3,80(r16)
10009504:	dfc00117 	ldw	ra,4(sp)
10009508:	dc000017 	ldw	r16,0(sp)
1000950c:	dec00204 	addi	sp,sp,8
10009510:	f800283a 	ret
10009514:	80c0030b 	ldhu	r3,12(r16)
10009518:	18fbffcc 	andi	r3,r3,61439
1000951c:	80c0030d 	sth	r3,12(r16)
10009520:	dfc00117 	ldw	ra,4(sp)
10009524:	dc000017 	ldw	r16,0(sp)
10009528:	dec00204 	addi	sp,sp,8
1000952c:	f800283a 	ret

10009530 <__seofread>:
10009530:	0005883a 	mov	r2,zero
10009534:	f800283a 	ret

10009538 <__swrite>:
10009538:	2880030b 	ldhu	r2,12(r5)
1000953c:	defffb04 	addi	sp,sp,-20
10009540:	dcc00315 	stw	r19,12(sp)
10009544:	dc800215 	stw	r18,8(sp)
10009548:	dc400115 	stw	r17,4(sp)
1000954c:	dc000015 	stw	r16,0(sp)
10009550:	dfc00415 	stw	ra,16(sp)
10009554:	10c0400c 	andi	r3,r2,256
10009558:	2821883a 	mov	r16,r5
1000955c:	2027883a 	mov	r19,r4
10009560:	3025883a 	mov	r18,r6
10009564:	3823883a 	mov	r17,r7
10009568:	18000526 	beq	r3,zero,10009580 <__swrite+0x48>
1000956c:	2940038f 	ldh	r5,14(r5)
10009570:	000d883a 	mov	r6,zero
10009574:	01c00084 	movi	r7,2
10009578:	000b13c0 	call	1000b13c <_lseek_r>
1000957c:	8080030b 	ldhu	r2,12(r16)
10009580:	8140038f 	ldh	r5,14(r16)
10009584:	10bbffcc 	andi	r2,r2,61439
10009588:	9809883a 	mov	r4,r19
1000958c:	900d883a 	mov	r6,r18
10009590:	880f883a 	mov	r7,r17
10009594:	8080030d 	sth	r2,12(r16)
10009598:	dfc00417 	ldw	ra,16(sp)
1000959c:	dcc00317 	ldw	r19,12(sp)
100095a0:	dc800217 	ldw	r18,8(sp)
100095a4:	dc400117 	ldw	r17,4(sp)
100095a8:	dc000017 	ldw	r16,0(sp)
100095ac:	dec00504 	addi	sp,sp,20
100095b0:	000ac181 	jmpi	1000ac18 <_write_r>

100095b4 <__sseek>:
100095b4:	defffe04 	addi	sp,sp,-8
100095b8:	dc000015 	stw	r16,0(sp)
100095bc:	2821883a 	mov	r16,r5
100095c0:	2940038f 	ldh	r5,14(r5)
100095c4:	dfc00115 	stw	ra,4(sp)
100095c8:	000b13c0 	call	1000b13c <_lseek_r>
100095cc:	00ffffc4 	movi	r3,-1
100095d0:	10c00826 	beq	r2,r3,100095f4 <__sseek+0x40>
100095d4:	80c0030b 	ldhu	r3,12(r16)
100095d8:	80801415 	stw	r2,80(r16)
100095dc:	18c40014 	ori	r3,r3,4096
100095e0:	80c0030d 	sth	r3,12(r16)
100095e4:	dfc00117 	ldw	ra,4(sp)
100095e8:	dc000017 	ldw	r16,0(sp)
100095ec:	dec00204 	addi	sp,sp,8
100095f0:	f800283a 	ret
100095f4:	80c0030b 	ldhu	r3,12(r16)
100095f8:	18fbffcc 	andi	r3,r3,61439
100095fc:	80c0030d 	sth	r3,12(r16)
10009600:	dfc00117 	ldw	ra,4(sp)
10009604:	dc000017 	ldw	r16,0(sp)
10009608:	dec00204 	addi	sp,sp,8
1000960c:	f800283a 	ret

10009610 <__sclose>:
10009610:	2940038f 	ldh	r5,14(r5)
10009614:	000ac741 	jmpi	1000ac74 <_close_r>

10009618 <strcmp>:
10009618:	2144b03a 	or	r2,r4,r5
1000961c:	108000cc 	andi	r2,r2,3
10009620:	1000171e 	bne	r2,zero,10009680 <strcmp+0x68>
10009624:	20800017 	ldw	r2,0(r4)
10009628:	28c00017 	ldw	r3,0(r5)
1000962c:	10c0141e 	bne	r2,r3,10009680 <strcmp+0x68>
10009630:	027fbff4 	movhi	r9,65279
10009634:	4a7fbfc4 	addi	r9,r9,-257
10009638:	0086303a 	nor	r3,zero,r2
1000963c:	02202074 	movhi	r8,32897
10009640:	1245883a 	add	r2,r2,r9
10009644:	42202004 	addi	r8,r8,-32640
10009648:	10c4703a 	and	r2,r2,r3
1000964c:	1204703a 	and	r2,r2,r8
10009650:	10000226 	beq	r2,zero,1000965c <strcmp+0x44>
10009654:	00001706 	br	100096b4 <strcmp+0x9c>
10009658:	1000161e 	bne	r2,zero,100096b4 <strcmp+0x9c>
1000965c:	21000104 	addi	r4,r4,4
10009660:	20c00017 	ldw	r3,0(r4)
10009664:	29400104 	addi	r5,r5,4
10009668:	29800017 	ldw	r6,0(r5)
1000966c:	1a4f883a 	add	r7,r3,r9
10009670:	00c4303a 	nor	r2,zero,r3
10009674:	3884703a 	and	r2,r7,r2
10009678:	1204703a 	and	r2,r2,r8
1000967c:	19bff626 	beq	r3,r6,10009658 <__alt_data_end+0xf8009658>
10009680:	20800007 	ldb	r2,0(r4)
10009684:	1000051e 	bne	r2,zero,1000969c <strcmp+0x84>
10009688:	00000606 	br	100096a4 <strcmp+0x8c>
1000968c:	21000044 	addi	r4,r4,1
10009690:	20800007 	ldb	r2,0(r4)
10009694:	29400044 	addi	r5,r5,1
10009698:	10000226 	beq	r2,zero,100096a4 <strcmp+0x8c>
1000969c:	28c00007 	ldb	r3,0(r5)
100096a0:	10fffa26 	beq	r2,r3,1000968c <__alt_data_end+0xf800968c>
100096a4:	20800003 	ldbu	r2,0(r4)
100096a8:	28c00003 	ldbu	r3,0(r5)
100096ac:	10c5c83a 	sub	r2,r2,r3
100096b0:	f800283a 	ret
100096b4:	0005883a 	mov	r2,zero
100096b8:	f800283a 	ret

100096bc <__sprint_r.part.0>:
100096bc:	28801917 	ldw	r2,100(r5)
100096c0:	defff604 	addi	sp,sp,-40
100096c4:	dd400515 	stw	r21,20(sp)
100096c8:	dcc00315 	stw	r19,12(sp)
100096cc:	dfc00915 	stw	ra,36(sp)
100096d0:	df000815 	stw	fp,32(sp)
100096d4:	ddc00715 	stw	r23,28(sp)
100096d8:	dd800615 	stw	r22,24(sp)
100096dc:	dd000415 	stw	r20,16(sp)
100096e0:	dc800215 	stw	r18,8(sp)
100096e4:	dc400115 	stw	r17,4(sp)
100096e8:	dc000015 	stw	r16,0(sp)
100096ec:	1088000c 	andi	r2,r2,8192
100096f0:	2827883a 	mov	r19,r5
100096f4:	302b883a 	mov	r21,r6
100096f8:	10002d26 	beq	r2,zero,100097b0 <__sprint_r.part.0+0xf4>
100096fc:	30800217 	ldw	r2,8(r6)
10009700:	35800017 	ldw	r22,0(r6)
10009704:	10002826 	beq	r2,zero,100097a8 <__sprint_r.part.0+0xec>
10009708:	2029883a 	mov	r20,r4
1000970c:	b5c00104 	addi	r23,r22,4
10009710:	04bfffc4 	movi	r18,-1
10009714:	bc400017 	ldw	r17,0(r23)
10009718:	b4000017 	ldw	r16,0(r22)
1000971c:	0039883a 	mov	fp,zero
10009720:	8822d0ba 	srli	r17,r17,2
10009724:	04400316 	blt	zero,r17,10009734 <__sprint_r.part.0+0x78>
10009728:	00001706 	br	10009788 <__sprint_r.part.0+0xcc>
1000972c:	84000104 	addi	r16,r16,4
10009730:	8f001526 	beq	r17,fp,10009788 <__sprint_r.part.0+0xcc>
10009734:	81400017 	ldw	r5,0(r16)
10009738:	a009883a 	mov	r4,r20
1000973c:	980d883a 	mov	r6,r19
10009740:	000aeb40 	call	1000aeb4 <_fputwc_r>
10009744:	e7000044 	addi	fp,fp,1
10009748:	14bff81e 	bne	r2,r18,1000972c <__alt_data_end+0xf800972c>
1000974c:	9005883a 	mov	r2,r18
10009750:	a8000215 	stw	zero,8(r21)
10009754:	a8000115 	stw	zero,4(r21)
10009758:	dfc00917 	ldw	ra,36(sp)
1000975c:	df000817 	ldw	fp,32(sp)
10009760:	ddc00717 	ldw	r23,28(sp)
10009764:	dd800617 	ldw	r22,24(sp)
10009768:	dd400517 	ldw	r21,20(sp)
1000976c:	dd000417 	ldw	r20,16(sp)
10009770:	dcc00317 	ldw	r19,12(sp)
10009774:	dc800217 	ldw	r18,8(sp)
10009778:	dc400117 	ldw	r17,4(sp)
1000977c:	dc000017 	ldw	r16,0(sp)
10009780:	dec00a04 	addi	sp,sp,40
10009784:	f800283a 	ret
10009788:	a8c00217 	ldw	r3,8(r21)
1000978c:	8c63883a 	add	r17,r17,r17
10009790:	8c63883a 	add	r17,r17,r17
10009794:	1c45c83a 	sub	r2,r3,r17
10009798:	a8800215 	stw	r2,8(r21)
1000979c:	b5800204 	addi	r22,r22,8
100097a0:	bdc00204 	addi	r23,r23,8
100097a4:	103fdb1e 	bne	r2,zero,10009714 <__alt_data_end+0xf8009714>
100097a8:	0005883a 	mov	r2,zero
100097ac:	003fe806 	br	10009750 <__alt_data_end+0xf8009750>
100097b0:	00069380 	call	10006938 <__sfvwrite_r>
100097b4:	003fe606 	br	10009750 <__alt_data_end+0xf8009750>

100097b8 <__sprint_r>:
100097b8:	30c00217 	ldw	r3,8(r6)
100097bc:	18000126 	beq	r3,zero,100097c4 <__sprint_r+0xc>
100097c0:	00096bc1 	jmpi	100096bc <__sprint_r.part.0>
100097c4:	30000115 	stw	zero,4(r6)
100097c8:	0005883a 	mov	r2,zero
100097cc:	f800283a 	ret

100097d0 <___vfiprintf_internal_r>:
100097d0:	defeca04 	addi	sp,sp,-1240
100097d4:	dcc12f15 	stw	r19,1212(sp)
100097d8:	dfc13515 	stw	ra,1236(sp)
100097dc:	df013415 	stw	fp,1232(sp)
100097e0:	ddc13315 	stw	r23,1228(sp)
100097e4:	dd813215 	stw	r22,1224(sp)
100097e8:	dd413115 	stw	r21,1220(sp)
100097ec:	dd013015 	stw	r20,1216(sp)
100097f0:	dc812e15 	stw	r18,1208(sp)
100097f4:	dc412d15 	stw	r17,1204(sp)
100097f8:	dc012c15 	stw	r16,1200(sp)
100097fc:	d9012115 	stw	r4,1156(sp)
10009800:	d9412015 	stw	r5,1152(sp)
10009804:	d9c12315 	stw	r7,1164(sp)
10009808:	3027883a 	mov	r19,r6
1000980c:	20000226 	beq	r4,zero,10009818 <___vfiprintf_internal_r+0x48>
10009810:	20800e17 	ldw	r2,56(r4)
10009814:	1000f726 	beq	r2,zero,10009bf4 <___vfiprintf_internal_r+0x424>
10009818:	d8812017 	ldw	r2,1152(sp)
1000981c:	10c0030b 	ldhu	r3,12(r2)
10009820:	1908000c 	andi	r4,r3,8192
10009824:	1805883a 	mov	r2,r3
10009828:	2000081e 	bne	r4,zero,1000984c <___vfiprintf_internal_r+0x7c>
1000982c:	d9412017 	ldw	r5,1152(sp)
10009830:	18880014 	ori	r2,r3,8192
10009834:	00f7ffc4 	movi	r3,-8193
10009838:	29001917 	ldw	r4,100(r5)
1000983c:	2880030d 	sth	r2,12(r5)
10009840:	20c8703a 	and	r4,r4,r3
10009844:	29001915 	stw	r4,100(r5)
10009848:	1007883a 	mov	r3,r2
1000984c:	1100020c 	andi	r4,r2,8
10009850:	2000a726 	beq	r4,zero,10009af0 <___vfiprintf_internal_r+0x320>
10009854:	d9412017 	ldw	r5,1152(sp)
10009858:	29000417 	ldw	r4,16(r5)
1000985c:	2000a426 	beq	r4,zero,10009af0 <___vfiprintf_internal_r+0x320>
10009860:	1080068c 	andi	r2,r2,26
10009864:	01000284 	movi	r4,10
10009868:	1100ab26 	beq	r2,r4,10009b18 <___vfiprintf_internal_r+0x348>
1000986c:	d9010a04 	addi	r4,sp,1064
10009870:	d94109c4 	addi	r5,sp,1063
10009874:	07040074 	movhi	fp,4097
10009878:	04440074 	movhi	r17,4097
1000987c:	2145c83a 	sub	r2,r4,r5
10009880:	e7072204 	addi	fp,fp,7304
10009884:	8c471e04 	addi	r17,r17,7288
10009888:	d9011e15 	stw	r4,1144(sp)
1000988c:	d9411f15 	stw	r5,1148(sp)
10009890:	dec11a15 	stw	sp,1128(sp)
10009894:	d8011c15 	stw	zero,1136(sp)
10009898:	d8011b15 	stw	zero,1132(sp)
1000989c:	d8012715 	stw	zero,1180(sp)
100098a0:	d8012515 	stw	zero,1172(sp)
100098a4:	d811883a 	mov	r8,sp
100098a8:	d8812815 	stw	r2,1184(sp)
100098ac:	982f883a 	mov	r23,r19
100098b0:	b8800007 	ldb	r2,0(r23)
100098b4:	1003b026 	beq	r2,zero,1000a778 <___vfiprintf_internal_r+0xfa8>
100098b8:	01000944 	movi	r4,37
100098bc:	1103ae26 	beq	r2,r4,1000a778 <___vfiprintf_internal_r+0xfa8>
100098c0:	b805883a 	mov	r2,r23
100098c4:	00000106 	br	100098cc <___vfiprintf_internal_r+0xfc>
100098c8:	19000326 	beq	r3,r4,100098d8 <___vfiprintf_internal_r+0x108>
100098cc:	10800044 	addi	r2,r2,1
100098d0:	10c00007 	ldb	r3,0(r2)
100098d4:	183ffc1e 	bne	r3,zero,100098c8 <__alt_data_end+0xf80098c8>
100098d8:	15e1c83a 	sub	r16,r2,r23
100098dc:	1029883a 	mov	r20,r2
100098e0:	80001026 	beq	r16,zero,10009924 <___vfiprintf_internal_r+0x154>
100098e4:	d8c11c17 	ldw	r3,1136(sp)
100098e8:	d8811b17 	ldw	r2,1132(sp)
100098ec:	45c00015 	stw	r23,0(r8)
100098f0:	80c7883a 	add	r3,r16,r3
100098f4:	10800044 	addi	r2,r2,1
100098f8:	44000115 	stw	r16,4(r8)
100098fc:	d8c11c15 	stw	r3,1136(sp)
10009900:	d8811b15 	stw	r2,1132(sp)
10009904:	010001c4 	movi	r4,7
10009908:	2080740e 	bge	r4,r2,10009adc <___vfiprintf_internal_r+0x30c>
1000990c:	1803a71e 	bne	r3,zero,1000a7ac <___vfiprintf_internal_r+0xfdc>
10009910:	d8c12517 	ldw	r3,1172(sp)
10009914:	d8011b15 	stw	zero,1132(sp)
10009918:	d811883a 	mov	r8,sp
1000991c:	1c07883a 	add	r3,r3,r16
10009920:	d8c12515 	stw	r3,1172(sp)
10009924:	a0800007 	ldb	r2,0(r20)
10009928:	1002bf26 	beq	r2,zero,1000a428 <___vfiprintf_internal_r+0xc58>
1000992c:	a5c00044 	addi	r23,r20,1
10009930:	a1800047 	ldb	r6,1(r20)
10009934:	d8011d85 	stb	zero,1142(sp)
10009938:	d8012205 	stb	zero,1160(sp)
1000993c:	043fffc4 	movi	r16,-1
10009940:	d8012415 	stw	zero,1168(sp)
10009944:	0025883a 	mov	r18,zero
10009948:	05001604 	movi	r20,88
1000994c:	05400244 	movi	r21,9
10009950:	4027883a 	mov	r19,r8
10009954:	bdc00044 	addi	r23,r23,1
10009958:	30bff804 	addi	r2,r6,-32
1000995c:	a0825636 	bltu	r20,r2,1000a2b8 <___vfiprintf_internal_r+0xae8>
10009960:	100490ba 	slli	r2,r2,2
10009964:	01040074 	movhi	r4,4097
10009968:	21265e04 	addi	r4,r4,-26248
1000996c:	1105883a 	add	r2,r2,r4
10009970:	10800017 	ldw	r2,0(r2)
10009974:	1000683a 	jmp	r2
10009978:	1000a248 	cmpgei	zero,r2,649
1000997c:	1000a2b8 	rdprs	zero,r2,650
10009980:	1000a2b8 	rdprs	zero,r2,650
10009984:	1000a2ac 	andhi	zero,r2,650
10009988:	1000a2b8 	rdprs	zero,r2,650
1000998c:	1000a2b8 	rdprs	zero,r2,650
10009990:	1000a2b8 	rdprs	zero,r2,650
10009994:	1000a2b8 	rdprs	zero,r2,650
10009998:	1000a2b8 	rdprs	zero,r2,650
1000999c:	1000a2b8 	rdprs	zero,r2,650
100099a0:	1000a038 	rdprs	zero,r2,640
100099a4:	1000a260 	cmpeqi	zero,r2,649
100099a8:	1000a2b8 	rdprs	zero,r2,650
100099ac:	10009c0c 	andi	zero,r2,624
100099b0:	1000a05c 	xori	zero,r2,641
100099b4:	1000a2b8 	rdprs	zero,r2,650
100099b8:	10009c18 	cmpnei	zero,r2,624
100099bc:	10009c24 	muli	zero,r2,624
100099c0:	10009c24 	muli	zero,r2,624
100099c4:	10009c24 	muli	zero,r2,624
100099c8:	10009c24 	muli	zero,r2,624
100099cc:	10009c24 	muli	zero,r2,624
100099d0:	10009c24 	muli	zero,r2,624
100099d4:	10009c24 	muli	zero,r2,624
100099d8:	10009c24 	muli	zero,r2,624
100099dc:	10009c24 	muli	zero,r2,624
100099e0:	1000a2b8 	rdprs	zero,r2,650
100099e4:	1000a2b8 	rdprs	zero,r2,650
100099e8:	1000a2b8 	rdprs	zero,r2,650
100099ec:	1000a2b8 	rdprs	zero,r2,650
100099f0:	1000a2b8 	rdprs	zero,r2,650
100099f4:	1000a2b8 	rdprs	zero,r2,650
100099f8:	1000a2b8 	rdprs	zero,r2,650
100099fc:	1000a2b8 	rdprs	zero,r2,650
10009a00:	1000a2b8 	rdprs	zero,r2,650
10009a04:	1000a2b8 	rdprs	zero,r2,650
10009a08:	10009c64 	muli	zero,r2,625
10009a0c:	1000a2b8 	rdprs	zero,r2,650
10009a10:	1000a2b8 	rdprs	zero,r2,650
10009a14:	1000a2b8 	rdprs	zero,r2,650
10009a18:	1000a2b8 	rdprs	zero,r2,650
10009a1c:	1000a2b8 	rdprs	zero,r2,650
10009a20:	1000a2b8 	rdprs	zero,r2,650
10009a24:	1000a2b8 	rdprs	zero,r2,650
10009a28:	1000a2b8 	rdprs	zero,r2,650
10009a2c:	1000a2b8 	rdprs	zero,r2,650
10009a30:	1000a2b8 	rdprs	zero,r2,650
10009a34:	10009f54 	ori	zero,r2,637
10009a38:	1000a2b8 	rdprs	zero,r2,650
10009a3c:	1000a2b8 	rdprs	zero,r2,650
10009a40:	1000a2b8 	rdprs	zero,r2,650
10009a44:	1000a2b8 	rdprs	zero,r2,650
10009a48:	1000a2b8 	rdprs	zero,r2,650
10009a4c:	10009f94 	ori	zero,r2,638
10009a50:	1000a2b8 	rdprs	zero,r2,650
10009a54:	1000a2b8 	rdprs	zero,r2,650
10009a58:	10009fd8 	cmpnei	zero,r2,639
10009a5c:	1000a2b8 	rdprs	zero,r2,650
10009a60:	1000a2b8 	rdprs	zero,r2,650
10009a64:	1000a2b8 	rdprs	zero,r2,650
10009a68:	1000a2b8 	rdprs	zero,r2,650
10009a6c:	1000a2b8 	rdprs	zero,r2,650
10009a70:	1000a2b8 	rdprs	zero,r2,650
10009a74:	1000a2b8 	rdprs	zero,r2,650
10009a78:	1000a2b8 	rdprs	zero,r2,650
10009a7c:	1000a2b8 	rdprs	zero,r2,650
10009a80:	1000a2b8 	rdprs	zero,r2,650
10009a84:	10009f20 	cmpeqi	zero,r2,636
10009a88:	1000a270 	cmpltui	zero,r2,649
10009a8c:	1000a2b8 	rdprs	zero,r2,650
10009a90:	1000a2b8 	rdprs	zero,r2,650
10009a94:	1000a2b8 	rdprs	zero,r2,650
10009a98:	1000a0ac 	andhi	zero,r2,642
10009a9c:	1000a270 	cmpltui	zero,r2,649
10009aa0:	1000a2b8 	rdprs	zero,r2,650
10009aa4:	1000a2b8 	rdprs	zero,r2,650
10009aa8:	10009fc4 	addi	zero,r2,639
10009aac:	1000a2b8 	rdprs	zero,r2,650
10009ab0:	1000a210 	cmplti	zero,r2,648
10009ab4:	1000a198 	cmpnei	zero,r2,646
10009ab8:	1000a1cc 	andi	zero,r2,647
10009abc:	1000a0b8 	rdprs	zero,r2,642
10009ac0:	1000a2b8 	rdprs	zero,r2,650
10009ac4:	1000a0c4 	addi	zero,r2,643
10009ac8:	1000a2b8 	rdprs	zero,r2,650
10009acc:	1000a120 	cmpeqi	zero,r2,644
10009ad0:	1000a2b8 	rdprs	zero,r2,650
10009ad4:	1000a2b8 	rdprs	zero,r2,650
10009ad8:	1000a154 	ori	zero,r2,645
10009adc:	42000204 	addi	r8,r8,8
10009ae0:	d8c12517 	ldw	r3,1172(sp)
10009ae4:	1c07883a 	add	r3,r3,r16
10009ae8:	d8c12515 	stw	r3,1172(sp)
10009aec:	003f8d06 	br	10009924 <__alt_data_end+0xf8009924>
10009af0:	d9012117 	ldw	r4,1156(sp)
10009af4:	d9412017 	ldw	r5,1152(sp)
10009af8:	00044980 	call	10004498 <__swsetup_r>
10009afc:	1000301e 	bne	r2,zero,10009bc0 <___vfiprintf_internal_r+0x3f0>
10009b00:	d8812017 	ldw	r2,1152(sp)
10009b04:	01000284 	movi	r4,10
10009b08:	10c0030b 	ldhu	r3,12(r2)
10009b0c:	1805883a 	mov	r2,r3
10009b10:	1080068c 	andi	r2,r2,26
10009b14:	113f551e 	bne	r2,r4,1000986c <__alt_data_end+0xf800986c>
10009b18:	d9012017 	ldw	r4,1152(sp)
10009b1c:	2080038b 	ldhu	r2,14(r4)
10009b20:	113fffcc 	andi	r4,r2,65535
10009b24:	2120001c 	xori	r4,r4,32768
10009b28:	21200004 	addi	r4,r4,-32768
10009b2c:	203f4f16 	blt	r4,zero,1000986c <__alt_data_end+0xf800986c>
10009b30:	d9412017 	ldw	r5,1152(sp)
10009b34:	d9012117 	ldw	r4,1156(sp)
10009b38:	d9c12317 	ldw	r7,1164(sp)
10009b3c:	2b001917 	ldw	r12,100(r5)
10009b40:	2ac00717 	ldw	r11,28(r5)
10009b44:	2a800917 	ldw	r10,36(r5)
10009b48:	02010004 	movi	r8,1024
10009b4c:	18ffff4c 	andi	r3,r3,65533
10009b50:	da0b883a 	add	r5,sp,r8
10009b54:	980d883a 	mov	r6,r19
10009b58:	d8c1030d 	sth	r3,1036(sp)
10009b5c:	db011915 	stw	r12,1124(sp)
10009b60:	d881038d 	sth	r2,1038(sp)
10009b64:	dac10715 	stw	r11,1052(sp)
10009b68:	da810915 	stw	r10,1060(sp)
10009b6c:	dec10015 	stw	sp,1024(sp)
10009b70:	dec10415 	stw	sp,1040(sp)
10009b74:	da010215 	stw	r8,1032(sp)
10009b78:	da010515 	stw	r8,1044(sp)
10009b7c:	d8010615 	stw	zero,1048(sp)
10009b80:	00097d00 	call	100097d0 <___vfiprintf_internal_r>
10009b84:	1021883a 	mov	r16,r2
10009b88:	10000416 	blt	r2,zero,10009b9c <___vfiprintf_internal_r+0x3cc>
10009b8c:	d9012117 	ldw	r4,1156(sp)
10009b90:	d9410004 	addi	r5,sp,1024
10009b94:	0005f180 	call	10005f18 <_fflush_r>
10009b98:	10040f1e 	bne	r2,zero,1000abd8 <___vfiprintf_internal_r+0x1408>
10009b9c:	d881030b 	ldhu	r2,1036(sp)
10009ba0:	1080100c 	andi	r2,r2,64
10009ba4:	10000426 	beq	r2,zero,10009bb8 <___vfiprintf_internal_r+0x3e8>
10009ba8:	d8c12017 	ldw	r3,1152(sp)
10009bac:	1880030b 	ldhu	r2,12(r3)
10009bb0:	10801014 	ori	r2,r2,64
10009bb4:	1880030d 	sth	r2,12(r3)
10009bb8:	8005883a 	mov	r2,r16
10009bbc:	00000106 	br	10009bc4 <___vfiprintf_internal_r+0x3f4>
10009bc0:	00bfffc4 	movi	r2,-1
10009bc4:	dfc13517 	ldw	ra,1236(sp)
10009bc8:	df013417 	ldw	fp,1232(sp)
10009bcc:	ddc13317 	ldw	r23,1228(sp)
10009bd0:	dd813217 	ldw	r22,1224(sp)
10009bd4:	dd413117 	ldw	r21,1220(sp)
10009bd8:	dd013017 	ldw	r20,1216(sp)
10009bdc:	dcc12f17 	ldw	r19,1212(sp)
10009be0:	dc812e17 	ldw	r18,1208(sp)
10009be4:	dc412d17 	ldw	r17,1204(sp)
10009be8:	dc012c17 	ldw	r16,1200(sp)
10009bec:	dec13604 	addi	sp,sp,1240
10009bf0:	f800283a 	ret
10009bf4:	00064d40 	call	100064d4 <__sinit>
10009bf8:	003f0706 	br	10009818 <__alt_data_end+0xf8009818>
10009bfc:	d8c12417 	ldw	r3,1168(sp)
10009c00:	d8812315 	stw	r2,1164(sp)
10009c04:	00c7c83a 	sub	r3,zero,r3
10009c08:	d8c12415 	stw	r3,1168(sp)
10009c0c:	94800114 	ori	r18,r18,4
10009c10:	b9800007 	ldb	r6,0(r23)
10009c14:	003f4f06 	br	10009954 <__alt_data_end+0xf8009954>
10009c18:	94802014 	ori	r18,r18,128
10009c1c:	b9800007 	ldb	r6,0(r23)
10009c20:	003f4c06 	br	10009954 <__alt_data_end+0xf8009954>
10009c24:	dc012615 	stw	r16,1176(sp)
10009c28:	d8012415 	stw	zero,1168(sp)
10009c2c:	35bff404 	addi	r22,r6,-48
10009c30:	0009883a 	mov	r4,zero
10009c34:	b821883a 	mov	r16,r23
10009c38:	01400284 	movi	r5,10
10009c3c:	000c2ec0 	call	1000c2ec <__mulsi3>
10009c40:	81800007 	ldb	r6,0(r16)
10009c44:	1589883a 	add	r4,r2,r22
10009c48:	bdc00044 	addi	r23,r23,1
10009c4c:	35bff404 	addi	r22,r6,-48
10009c50:	b821883a 	mov	r16,r23
10009c54:	adbff82e 	bgeu	r21,r22,10009c38 <__alt_data_end+0xf8009c38>
10009c58:	d9012415 	stw	r4,1168(sp)
10009c5c:	dc012617 	ldw	r16,1176(sp)
10009c60:	003f3d06 	br	10009958 <__alt_data_end+0xf8009958>
10009c64:	d8c12203 	ldbu	r3,1160(sp)
10009c68:	94800414 	ori	r18,r18,16
10009c6c:	9080080c 	andi	r2,r18,32
10009c70:	d8c11d85 	stb	r3,1142(sp)
10009c74:	9811883a 	mov	r8,r19
10009c78:	d8c12317 	ldw	r3,1164(sp)
10009c7c:	10018226 	beq	r2,zero,1000a288 <___vfiprintf_internal_r+0xab8>
10009c80:	d9012317 	ldw	r4,1164(sp)
10009c84:	18800117 	ldw	r2,4(r3)
10009c88:	1cc00017 	ldw	r19,0(r3)
10009c8c:	21000204 	addi	r4,r4,8
10009c90:	d9012315 	stw	r4,1164(sp)
10009c94:	102b883a 	mov	r21,r2
10009c98:	10030016 	blt	r2,zero,1000a89c <___vfiprintf_internal_r+0x10cc>
10009c9c:	dd811d83 	ldbu	r22,1142(sp)
10009ca0:	8029883a 	mov	r20,r16
10009ca4:	00800044 	movi	r2,1
10009ca8:	9d46b03a 	or	r3,r19,r21
10009cac:	80000216 	blt	r16,zero,10009cb8 <___vfiprintf_internal_r+0x4e8>
10009cb0:	013fdfc4 	movi	r4,-129
10009cb4:	9124703a 	and	r18,r18,r4
10009cb8:	1801b41e 	bne	r3,zero,1000a38c <___vfiprintf_internal_r+0xbbc>
10009cbc:	80028126 	beq	r16,zero,1000a6c4 <___vfiprintf_internal_r+0xef4>
10009cc0:	10803fcc 	andi	r2,r2,255
10009cc4:	00c00044 	movi	r3,1
10009cc8:	10c1d126 	beq	r2,r3,1000a410 <___vfiprintf_internal_r+0xc40>
10009ccc:	00c00084 	movi	r3,2
10009cd0:	10c28626 	beq	r2,r3,1000a6ec <___vfiprintf_internal_r+0xf1c>
10009cd4:	d8c10a04 	addi	r3,sp,1064
10009cd8:	9808d0fa 	srli	r4,r19,3
10009cdc:	a80a977a 	slli	r5,r21,29
10009ce0:	a82ad0fa 	srli	r21,r21,3
10009ce4:	9cc001cc 	andi	r19,r19,7
10009ce8:	98800c04 	addi	r2,r19,48
10009cec:	18ffffc4 	addi	r3,r3,-1
10009cf0:	2926b03a 	or	r19,r5,r4
10009cf4:	18800005 	stb	r2,0(r3)
10009cf8:	9d48b03a 	or	r4,r19,r21
10009cfc:	203ff61e 	bne	r4,zero,10009cd8 <__alt_data_end+0xf8009cd8>
10009d00:	9100004c 	andi	r4,r18,1
10009d04:	d8c12215 	stw	r3,1160(sp)
10009d08:	2002b31e 	bne	r4,zero,1000a7d8 <___vfiprintf_internal_r+0x1008>
10009d0c:	d9411e17 	ldw	r5,1144(sp)
10009d10:	28e9c83a 	sub	r20,r5,r3
10009d14:	a02b883a 	mov	r21,r20
10009d18:	a400010e 	bge	r20,r16,10009d20 <___vfiprintf_internal_r+0x550>
10009d1c:	802b883a 	mov	r21,r16
10009d20:	b5803fcc 	andi	r22,r22,255
10009d24:	b580201c 	xori	r22,r22,128
10009d28:	b5bfe004 	addi	r22,r22,-128
10009d2c:	b0000126 	beq	r22,zero,10009d34 <___vfiprintf_internal_r+0x564>
10009d30:	ad400044 	addi	r21,r21,1
10009d34:	9280008c 	andi	r10,r18,2
10009d38:	50000126 	beq	r10,zero,10009d40 <___vfiprintf_internal_r+0x570>
10009d3c:	ad400084 	addi	r21,r21,2
10009d40:	9580210c 	andi	r22,r18,132
10009d44:	b001751e 	bne	r22,zero,1000a31c <___vfiprintf_internal_r+0xb4c>
10009d48:	d9012417 	ldw	r4,1168(sp)
10009d4c:	2567c83a 	sub	r19,r4,r21
10009d50:	04c1720e 	bge	zero,r19,1000a31c <___vfiprintf_internal_r+0xb4c>
10009d54:	01c00404 	movi	r7,16
10009d58:	d8c11c17 	ldw	r3,1136(sp)
10009d5c:	3cc36b0e 	bge	r7,r19,1000ab0c <___vfiprintf_internal_r+0x133c>
10009d60:	00840074 	movhi	r2,4097
10009d64:	10872204 	addi	r2,r2,7304
10009d68:	dc012915 	stw	r16,1188(sp)
10009d6c:	d9011b17 	ldw	r4,1132(sp)
10009d70:	9821883a 	mov	r16,r19
10009d74:	d8812615 	stw	r2,1176(sp)
10009d78:	030001c4 	movi	r12,7
10009d7c:	5027883a 	mov	r19,r10
10009d80:	00000506 	br	10009d98 <___vfiprintf_internal_r+0x5c8>
10009d84:	21400084 	addi	r5,r4,2
10009d88:	42000204 	addi	r8,r8,8
10009d8c:	1009883a 	mov	r4,r2
10009d90:	843ffc04 	addi	r16,r16,-16
10009d94:	3c000d0e 	bge	r7,r16,10009dcc <___vfiprintf_internal_r+0x5fc>
10009d98:	18c00404 	addi	r3,r3,16
10009d9c:	20800044 	addi	r2,r4,1
10009da0:	47000015 	stw	fp,0(r8)
10009da4:	41c00115 	stw	r7,4(r8)
10009da8:	d8c11c15 	stw	r3,1136(sp)
10009dac:	d8811b15 	stw	r2,1132(sp)
10009db0:	60bff40e 	bge	r12,r2,10009d84 <__alt_data_end+0xf8009d84>
10009db4:	18014b1e 	bne	r3,zero,1000a2e4 <___vfiprintf_internal_r+0xb14>
10009db8:	843ffc04 	addi	r16,r16,-16
10009dbc:	0009883a 	mov	r4,zero
10009dc0:	01400044 	movi	r5,1
10009dc4:	d811883a 	mov	r8,sp
10009dc8:	3c3ff316 	blt	r7,r16,10009d98 <__alt_data_end+0xf8009d98>
10009dcc:	9815883a 	mov	r10,r19
10009dd0:	8027883a 	mov	r19,r16
10009dd4:	dc012917 	ldw	r16,1188(sp)
10009dd8:	d9012617 	ldw	r4,1176(sp)
10009ddc:	98c7883a 	add	r3,r19,r3
10009de0:	44c00115 	stw	r19,4(r8)
10009de4:	41000015 	stw	r4,0(r8)
10009de8:	d8c11c15 	stw	r3,1136(sp)
10009dec:	d9411b15 	stw	r5,1132(sp)
10009df0:	008001c4 	movi	r2,7
10009df4:	11425116 	blt	r2,r5,1000a73c <___vfiprintf_internal_r+0xf6c>
10009df8:	d9011d87 	ldb	r4,1142(sp)
10009dfc:	42000204 	addi	r8,r8,8
10009e00:	28800044 	addi	r2,r5,1
10009e04:	20014a1e 	bne	r4,zero,1000a330 <___vfiprintf_internal_r+0xb60>
10009e08:	50000c26 	beq	r10,zero,10009e3c <___vfiprintf_internal_r+0x66c>
10009e0c:	d9011d04 	addi	r4,sp,1140
10009e10:	18c00084 	addi	r3,r3,2
10009e14:	41000015 	stw	r4,0(r8)
10009e18:	01000084 	movi	r4,2
10009e1c:	41000115 	stw	r4,4(r8)
10009e20:	d8c11c15 	stw	r3,1136(sp)
10009e24:	d8811b15 	stw	r2,1132(sp)
10009e28:	010001c4 	movi	r4,7
10009e2c:	20822016 	blt	r4,r2,1000a6b0 <___vfiprintf_internal_r+0xee0>
10009e30:	100b883a 	mov	r5,r2
10009e34:	42000204 	addi	r8,r8,8
10009e38:	10800044 	addi	r2,r2,1
10009e3c:	01002004 	movi	r4,128
10009e40:	b101de26 	beq	r22,r4,1000a5bc <___vfiprintf_internal_r+0xdec>
10009e44:	8521c83a 	sub	r16,r16,r20
10009e48:	0400230e 	bge	zero,r16,10009ed8 <___vfiprintf_internal_r+0x708>
10009e4c:	04c00404 	movi	r19,16
10009e50:	9c030d0e 	bge	r19,r16,1000aa88 <___vfiprintf_internal_r+0x12b8>
10009e54:	00840074 	movhi	r2,4097
10009e58:	10871e04 	addi	r2,r2,7288
10009e5c:	d8812615 	stw	r2,1176(sp)
10009e60:	058001c4 	movi	r22,7
10009e64:	00000506 	br	10009e7c <___vfiprintf_internal_r+0x6ac>
10009e68:	28800084 	addi	r2,r5,2
10009e6c:	42000204 	addi	r8,r8,8
10009e70:	200b883a 	mov	r5,r4
10009e74:	843ffc04 	addi	r16,r16,-16
10009e78:	9c000d0e 	bge	r19,r16,10009eb0 <___vfiprintf_internal_r+0x6e0>
10009e7c:	18c00404 	addi	r3,r3,16
10009e80:	29000044 	addi	r4,r5,1
10009e84:	44400015 	stw	r17,0(r8)
10009e88:	44c00115 	stw	r19,4(r8)
10009e8c:	d8c11c15 	stw	r3,1136(sp)
10009e90:	d9011b15 	stw	r4,1132(sp)
10009e94:	b13ff40e 	bge	r22,r4,10009e68 <__alt_data_end+0xf8009e68>
10009e98:	1801321e 	bne	r3,zero,1000a364 <___vfiprintf_internal_r+0xb94>
10009e9c:	843ffc04 	addi	r16,r16,-16
10009ea0:	000b883a 	mov	r5,zero
10009ea4:	00800044 	movi	r2,1
10009ea8:	d811883a 	mov	r8,sp
10009eac:	9c3ff316 	blt	r19,r16,10009e7c <__alt_data_end+0xf8009e7c>
10009eb0:	d9012617 	ldw	r4,1176(sp)
10009eb4:	1c07883a 	add	r3,r3,r16
10009eb8:	44000115 	stw	r16,4(r8)
10009ebc:	41000015 	stw	r4,0(r8)
10009ec0:	d8c11c15 	stw	r3,1136(sp)
10009ec4:	d8811b15 	stw	r2,1132(sp)
10009ec8:	010001c4 	movi	r4,7
10009ecc:	20816216 	blt	r4,r2,1000a458 <___vfiprintf_internal_r+0xc88>
10009ed0:	42000204 	addi	r8,r8,8
10009ed4:	10800044 	addi	r2,r2,1
10009ed8:	d9012217 	ldw	r4,1160(sp)
10009edc:	1d07883a 	add	r3,r3,r20
10009ee0:	45000115 	stw	r20,4(r8)
10009ee4:	41000015 	stw	r4,0(r8)
10009ee8:	d8c11c15 	stw	r3,1136(sp)
10009eec:	d8811b15 	stw	r2,1132(sp)
10009ef0:	010001c4 	movi	r4,7
10009ef4:	2081610e 	bge	r4,r2,1000a47c <___vfiprintf_internal_r+0xcac>
10009ef8:	1802211e 	bne	r3,zero,1000a780 <___vfiprintf_internal_r+0xfb0>
10009efc:	d8011b15 	stw	zero,1132(sp)
10009f00:	9480010c 	andi	r18,r18,4
10009f04:	9002171e 	bne	r18,zero,1000a764 <___vfiprintf_internal_r+0xf94>
10009f08:	d9412417 	ldw	r5,1168(sp)
10009f0c:	a9433716 	blt	r21,r5,1000abec <___vfiprintf_internal_r+0x141c>
10009f10:	d8812517 	ldw	r2,1172(sp)
10009f14:	1545883a 	add	r2,r2,r21
10009f18:	d8812515 	stw	r2,1172(sp)
10009f1c:	00019a06 	br	1000a588 <___vfiprintf_internal_r+0xdb8>
10009f20:	d8c12317 	ldw	r3,1164(sp)
10009f24:	05400044 	movi	r21,1
10009f28:	9811883a 	mov	r8,r19
10009f2c:	18800017 	ldw	r2,0(r3)
10009f30:	18c00104 	addi	r3,r3,4
10009f34:	d8c12315 	stw	r3,1164(sp)
10009f38:	d8c10004 	addi	r3,sp,1024
10009f3c:	d8011d85 	stb	zero,1142(sp)
10009f40:	d8810005 	stb	r2,1024(sp)
10009f44:	a829883a 	mov	r20,r21
10009f48:	d8c12215 	stw	r3,1160(sp)
10009f4c:	0021883a 	mov	r16,zero
10009f50:	003f7806 	br	10009d34 <__alt_data_end+0xf8009d34>
10009f54:	94800414 	ori	r18,r18,16
10009f58:	9080080c 	andi	r2,r18,32
10009f5c:	9811883a 	mov	r8,r19
10009f60:	10009026 	beq	r2,zero,1000a1a4 <___vfiprintf_internal_r+0x9d4>
10009f64:	d8812317 	ldw	r2,1164(sp)
10009f68:	d8c12317 	ldw	r3,1164(sp)
10009f6c:	14c00017 	ldw	r19,0(r2)
10009f70:	15400117 	ldw	r21,4(r2)
10009f74:	18c00204 	addi	r3,r3,8
10009f78:	d8c12315 	stw	r3,1164(sp)
10009f7c:	0005883a 	mov	r2,zero
10009f80:	9d46b03a 	or	r3,r19,r21
10009f84:	d8011d85 	stb	zero,1142(sp)
10009f88:	8029883a 	mov	r20,r16
10009f8c:	002d883a 	mov	r22,zero
10009f90:	003f4606 	br	10009cac <__alt_data_end+0xf8009cac>
10009f94:	94800414 	ori	r18,r18,16
10009f98:	9080080c 	andi	r2,r18,32
10009f9c:	9811883a 	mov	r8,r19
10009fa0:	10006226 	beq	r2,zero,1000a12c <___vfiprintf_internal_r+0x95c>
10009fa4:	d9012317 	ldw	r4,1164(sp)
10009fa8:	00800044 	movi	r2,1
10009fac:	24c00017 	ldw	r19,0(r4)
10009fb0:	25400117 	ldw	r21,4(r4)
10009fb4:	21000204 	addi	r4,r4,8
10009fb8:	d9012315 	stw	r4,1164(sp)
10009fbc:	9d46b03a 	or	r3,r19,r21
10009fc0:	003ff006 	br	10009f84 <__alt_data_end+0xf8009f84>
10009fc4:	b9800007 	ldb	r6,0(r23)
10009fc8:	00801b04 	movi	r2,108
10009fcc:	3082b226 	beq	r6,r2,1000aa98 <___vfiprintf_internal_r+0x12c8>
10009fd0:	94800414 	ori	r18,r18,16
10009fd4:	003e5f06 	br	10009954 <__alt_data_end+0xf8009954>
10009fd8:	d8c12203 	ldbu	r3,1160(sp)
10009fdc:	01040074 	movhi	r4,4097
10009fe0:	2106b804 	addi	r4,r4,6880
10009fe4:	d8c11d85 	stb	r3,1142(sp)
10009fe8:	d9012715 	stw	r4,1180(sp)
10009fec:	90c0080c 	andi	r3,r18,32
10009ff0:	9811883a 	mov	r8,r19
10009ff4:	d8812317 	ldw	r2,1164(sp)
10009ff8:	18005f26 	beq	r3,zero,1000a178 <___vfiprintf_internal_r+0x9a8>
10009ffc:	d9012317 	ldw	r4,1164(sp)
1000a000:	14c00017 	ldw	r19,0(r2)
1000a004:	15400117 	ldw	r21,4(r2)
1000a008:	21000204 	addi	r4,r4,8
1000a00c:	d9012315 	stw	r4,1164(sp)
1000a010:	9080004c 	andi	r2,r18,1
1000a014:	1001e226 	beq	r2,zero,1000a7a0 <___vfiprintf_internal_r+0xfd0>
1000a018:	9d46b03a 	or	r3,r19,r21
1000a01c:	18024e26 	beq	r3,zero,1000a958 <___vfiprintf_internal_r+0x1188>
1000a020:	00800c04 	movi	r2,48
1000a024:	d8811d05 	stb	r2,1140(sp)
1000a028:	d9811d45 	stb	r6,1141(sp)
1000a02c:	94800094 	ori	r18,r18,2
1000a030:	00800084 	movi	r2,2
1000a034:	003fd306 	br	10009f84 <__alt_data_end+0xf8009f84>
1000a038:	d9012317 	ldw	r4,1164(sp)
1000a03c:	d9412317 	ldw	r5,1164(sp)
1000a040:	21000017 	ldw	r4,0(r4)
1000a044:	28800104 	addi	r2,r5,4
1000a048:	d9012415 	stw	r4,1168(sp)
1000a04c:	203eeb16 	blt	r4,zero,10009bfc <__alt_data_end+0xf8009bfc>
1000a050:	d8812315 	stw	r2,1164(sp)
1000a054:	b9800007 	ldb	r6,0(r23)
1000a058:	003e3e06 	br	10009954 <__alt_data_end+0xf8009954>
1000a05c:	b9800007 	ldb	r6,0(r23)
1000a060:	01000a84 	movi	r4,42
1000a064:	b8800044 	addi	r2,r23,1
1000a068:	3102d226 	beq	r6,r4,1000abb4 <___vfiprintf_internal_r+0x13e4>
1000a06c:	35bff404 	addi	r22,r6,-48
1000a070:	102f883a 	mov	r23,r2
1000a074:	0021883a 	mov	r16,zero
1000a078:	adbe3736 	bltu	r21,r22,10009958 <__alt_data_end+0xf8009958>
1000a07c:	0009883a 	mov	r4,zero
1000a080:	01400284 	movi	r5,10
1000a084:	000c2ec0 	call	1000c2ec <__mulsi3>
1000a088:	b9800007 	ldb	r6,0(r23)
1000a08c:	b089883a 	add	r4,r22,r2
1000a090:	bdc00044 	addi	r23,r23,1
1000a094:	35bff404 	addi	r22,r6,-48
1000a098:	adbff92e 	bgeu	r21,r22,1000a080 <__alt_data_end+0xf800a080>
1000a09c:	2021883a 	mov	r16,r4
1000a0a0:	203e2d0e 	bge	r4,zero,10009958 <__alt_data_end+0xf8009958>
1000a0a4:	043fffc4 	movi	r16,-1
1000a0a8:	003e2b06 	br	10009958 <__alt_data_end+0xf8009958>
1000a0ac:	94801014 	ori	r18,r18,64
1000a0b0:	b9800007 	ldb	r6,0(r23)
1000a0b4:	003e2706 	br	10009954 <__alt_data_end+0xf8009954>
1000a0b8:	94800814 	ori	r18,r18,32
1000a0bc:	b9800007 	ldb	r6,0(r23)
1000a0c0:	003e2406 	br	10009954 <__alt_data_end+0xf8009954>
1000a0c4:	d9412317 	ldw	r5,1164(sp)
1000a0c8:	d8812317 	ldw	r2,1164(sp)
1000a0cc:	d8011d85 	stb	zero,1142(sp)
1000a0d0:	29400017 	ldw	r5,0(r5)
1000a0d4:	9811883a 	mov	r8,r19
1000a0d8:	14c00104 	addi	r19,r2,4
1000a0dc:	d9412215 	stw	r5,1160(sp)
1000a0e0:	28029026 	beq	r5,zero,1000ab24 <___vfiprintf_internal_r+0x1354>
1000a0e4:	d9012217 	ldw	r4,1160(sp)
1000a0e8:	80027616 	blt	r16,zero,1000aac4 <___vfiprintf_internal_r+0x12f4>
1000a0ec:	000b883a 	mov	r5,zero
1000a0f0:	800d883a 	mov	r6,r16
1000a0f4:	da012a15 	stw	r8,1192(sp)
1000a0f8:	000798c0 	call	1000798c <memchr>
1000a0fc:	da012a17 	ldw	r8,1192(sp)
1000a100:	1002a026 	beq	r2,zero,1000ab84 <___vfiprintf_internal_r+0x13b4>
1000a104:	d8c12217 	ldw	r3,1160(sp)
1000a108:	10e9c83a 	sub	r20,r2,r3
1000a10c:	85023816 	blt	r16,r20,1000a9f0 <___vfiprintf_internal_r+0x1220>
1000a110:	dd811d83 	ldbu	r22,1142(sp)
1000a114:	dcc12315 	stw	r19,1164(sp)
1000a118:	0021883a 	mov	r16,zero
1000a11c:	003efd06 	br	10009d14 <__alt_data_end+0xf8009d14>
1000a120:	9080080c 	andi	r2,r18,32
1000a124:	9811883a 	mov	r8,r19
1000a128:	103f9e1e 	bne	r2,zero,10009fa4 <__alt_data_end+0xf8009fa4>
1000a12c:	9080040c 	andi	r2,r18,16
1000a130:	10021726 	beq	r2,zero,1000a990 <___vfiprintf_internal_r+0x11c0>
1000a134:	d9412317 	ldw	r5,1164(sp)
1000a138:	002b883a 	mov	r21,zero
1000a13c:	00800044 	movi	r2,1
1000a140:	2cc00017 	ldw	r19,0(r5)
1000a144:	29400104 	addi	r5,r5,4
1000a148:	d9412315 	stw	r5,1164(sp)
1000a14c:	9807883a 	mov	r3,r19
1000a150:	003f8c06 	br	10009f84 <__alt_data_end+0xf8009f84>
1000a154:	d8c12203 	ldbu	r3,1160(sp)
1000a158:	01040074 	movhi	r4,4097
1000a15c:	2106bd04 	addi	r4,r4,6900
1000a160:	d8c11d85 	stb	r3,1142(sp)
1000a164:	d9012715 	stw	r4,1180(sp)
1000a168:	90c0080c 	andi	r3,r18,32
1000a16c:	9811883a 	mov	r8,r19
1000a170:	d8812317 	ldw	r2,1164(sp)
1000a174:	183fa11e 	bne	r3,zero,10009ffc <__alt_data_end+0xf8009ffc>
1000a178:	90c0040c 	andi	r3,r18,16
1000a17c:	1801e526 	beq	r3,zero,1000a914 <___vfiprintf_internal_r+0x1144>
1000a180:	d9412317 	ldw	r5,1164(sp)
1000a184:	14c00017 	ldw	r19,0(r2)
1000a188:	002b883a 	mov	r21,zero
1000a18c:	29400104 	addi	r5,r5,4
1000a190:	d9412315 	stw	r5,1164(sp)
1000a194:	003f9e06 	br	1000a010 <__alt_data_end+0xf800a010>
1000a198:	9080080c 	andi	r2,r18,32
1000a19c:	9811883a 	mov	r8,r19
1000a1a0:	103f701e 	bne	r2,zero,10009f64 <__alt_data_end+0xf8009f64>
1000a1a4:	9080040c 	andi	r2,r18,16
1000a1a8:	1001ef26 	beq	r2,zero,1000a968 <___vfiprintf_internal_r+0x1198>
1000a1ac:	d9012317 	ldw	r4,1164(sp)
1000a1b0:	002b883a 	mov	r21,zero
1000a1b4:	0005883a 	mov	r2,zero
1000a1b8:	24c00017 	ldw	r19,0(r4)
1000a1bc:	21000104 	addi	r4,r4,4
1000a1c0:	d9012315 	stw	r4,1164(sp)
1000a1c4:	9807883a 	mov	r3,r19
1000a1c8:	003f6e06 	br	10009f84 <__alt_data_end+0xf8009f84>
1000a1cc:	d8c12317 	ldw	r3,1164(sp)
1000a1d0:	9811883a 	mov	r8,r19
1000a1d4:	00800c04 	movi	r2,48
1000a1d8:	1cc00017 	ldw	r19,0(r3)
1000a1dc:	01040074 	movhi	r4,4097
1000a1e0:	18c00104 	addi	r3,r3,4
1000a1e4:	d8811d05 	stb	r2,1140(sp)
1000a1e8:	2106bd04 	addi	r4,r4,6900
1000a1ec:	00801e04 	movi	r2,120
1000a1f0:	d8811d45 	stb	r2,1141(sp)
1000a1f4:	d8c12315 	stw	r3,1164(sp)
1000a1f8:	002b883a 	mov	r21,zero
1000a1fc:	94800094 	ori	r18,r18,2
1000a200:	d9012715 	stw	r4,1180(sp)
1000a204:	00800084 	movi	r2,2
1000a208:	9807883a 	mov	r3,r19
1000a20c:	003f5d06 	br	10009f84 <__alt_data_end+0xf8009f84>
1000a210:	d8c12203 	ldbu	r3,1160(sp)
1000a214:	9080080c 	andi	r2,r18,32
1000a218:	9811883a 	mov	r8,r19
1000a21c:	d8c11d85 	stb	r3,1142(sp)
1000a220:	1001b126 	beq	r2,zero,1000a8e8 <___vfiprintf_internal_r+0x1118>
1000a224:	d9012317 	ldw	r4,1164(sp)
1000a228:	d9412517 	ldw	r5,1172(sp)
1000a22c:	20800017 	ldw	r2,0(r4)
1000a230:	2807d7fa 	srai	r3,r5,31
1000a234:	21000104 	addi	r4,r4,4
1000a238:	d9012315 	stw	r4,1164(sp)
1000a23c:	11400015 	stw	r5,0(r2)
1000a240:	10c00115 	stw	r3,4(r2)
1000a244:	003d9a06 	br	100098b0 <__alt_data_end+0xf80098b0>
1000a248:	d8812207 	ldb	r2,1160(sp)
1000a24c:	1001c41e 	bne	r2,zero,1000a960 <___vfiprintf_internal_r+0x1190>
1000a250:	00c00804 	movi	r3,32
1000a254:	d8c12205 	stb	r3,1160(sp)
1000a258:	b9800007 	ldb	r6,0(r23)
1000a25c:	003dbd06 	br	10009954 <__alt_data_end+0xf8009954>
1000a260:	00c00ac4 	movi	r3,43
1000a264:	d8c12205 	stb	r3,1160(sp)
1000a268:	b9800007 	ldb	r6,0(r23)
1000a26c:	003db906 	br	10009954 <__alt_data_end+0xf8009954>
1000a270:	d8c12203 	ldbu	r3,1160(sp)
1000a274:	9080080c 	andi	r2,r18,32
1000a278:	9811883a 	mov	r8,r19
1000a27c:	d8c11d85 	stb	r3,1142(sp)
1000a280:	d8c12317 	ldw	r3,1164(sp)
1000a284:	103e7e1e 	bne	r2,zero,10009c80 <__alt_data_end+0xf8009c80>
1000a288:	9080040c 	andi	r2,r18,16
1000a28c:	1001a926 	beq	r2,zero,1000a934 <___vfiprintf_internal_r+0x1164>
1000a290:	1cc00017 	ldw	r19,0(r3)
1000a294:	d9412317 	ldw	r5,1164(sp)
1000a298:	982bd7fa 	srai	r21,r19,31
1000a29c:	29400104 	addi	r5,r5,4
1000a2a0:	d9412315 	stw	r5,1164(sp)
1000a2a4:	a805883a 	mov	r2,r21
1000a2a8:	003e7b06 	br	10009c98 <__alt_data_end+0xf8009c98>
1000a2ac:	94800054 	ori	r18,r18,1
1000a2b0:	b9800007 	ldb	r6,0(r23)
1000a2b4:	003da706 	br	10009954 <__alt_data_end+0xf8009954>
1000a2b8:	d8c12203 	ldbu	r3,1160(sp)
1000a2bc:	9811883a 	mov	r8,r19
1000a2c0:	d8c11d85 	stb	r3,1142(sp)
1000a2c4:	30005826 	beq	r6,zero,1000a428 <___vfiprintf_internal_r+0xc58>
1000a2c8:	05400044 	movi	r21,1
1000a2cc:	d8c10004 	addi	r3,sp,1024
1000a2d0:	d9810005 	stb	r6,1024(sp)
1000a2d4:	d8011d85 	stb	zero,1142(sp)
1000a2d8:	a829883a 	mov	r20,r21
1000a2dc:	d8c12215 	stw	r3,1160(sp)
1000a2e0:	003f1a06 	br	10009f4c <__alt_data_end+0xf8009f4c>
1000a2e4:	d9012117 	ldw	r4,1156(sp)
1000a2e8:	d9412017 	ldw	r5,1152(sp)
1000a2ec:	d9811a04 	addi	r6,sp,1128
1000a2f0:	d9c12a15 	stw	r7,1192(sp)
1000a2f4:	db012b15 	stw	r12,1196(sp)
1000a2f8:	00096bc0 	call	100096bc <__sprint_r.part.0>
1000a2fc:	d9c12a17 	ldw	r7,1192(sp)
1000a300:	db012b17 	ldw	r12,1196(sp)
1000a304:	10004e1e 	bne	r2,zero,1000a440 <___vfiprintf_internal_r+0xc70>
1000a308:	d9011b17 	ldw	r4,1132(sp)
1000a30c:	d8c11c17 	ldw	r3,1136(sp)
1000a310:	d811883a 	mov	r8,sp
1000a314:	21400044 	addi	r5,r4,1
1000a318:	003e9d06 	br	10009d90 <__alt_data_end+0xf8009d90>
1000a31c:	d9411b17 	ldw	r5,1132(sp)
1000a320:	d8c11c17 	ldw	r3,1136(sp)
1000a324:	28800044 	addi	r2,r5,1
1000a328:	d9011d87 	ldb	r4,1142(sp)
1000a32c:	203eb626 	beq	r4,zero,10009e08 <__alt_data_end+0xf8009e08>
1000a330:	01000044 	movi	r4,1
1000a334:	d9411d84 	addi	r5,sp,1142
1000a338:	1907883a 	add	r3,r3,r4
1000a33c:	41400015 	stw	r5,0(r8)
1000a340:	41000115 	stw	r4,4(r8)
1000a344:	d8c11c15 	stw	r3,1136(sp)
1000a348:	d8811b15 	stw	r2,1132(sp)
1000a34c:	014001c4 	movi	r5,7
1000a350:	2880ce16 	blt	r5,r2,1000a68c <___vfiprintf_internal_r+0xebc>
1000a354:	100b883a 	mov	r5,r2
1000a358:	42000204 	addi	r8,r8,8
1000a35c:	10800044 	addi	r2,r2,1
1000a360:	003ea906 	br	10009e08 <__alt_data_end+0xf8009e08>
1000a364:	d9012117 	ldw	r4,1156(sp)
1000a368:	d9412017 	ldw	r5,1152(sp)
1000a36c:	d9811a04 	addi	r6,sp,1128
1000a370:	00096bc0 	call	100096bc <__sprint_r.part.0>
1000a374:	1000321e 	bne	r2,zero,1000a440 <___vfiprintf_internal_r+0xc70>
1000a378:	d9411b17 	ldw	r5,1132(sp)
1000a37c:	d8c11c17 	ldw	r3,1136(sp)
1000a380:	d811883a 	mov	r8,sp
1000a384:	28800044 	addi	r2,r5,1
1000a388:	003eba06 	br	10009e74 <__alt_data_end+0xf8009e74>
1000a38c:	10803fcc 	andi	r2,r2,255
1000a390:	00c00044 	movi	r3,1
1000a394:	10fe4d1e 	bne	r2,r3,10009ccc <__alt_data_end+0xf8009ccc>
1000a398:	a800021e 	bne	r21,zero,1000a3a4 <___vfiprintf_internal_r+0xbd4>
1000a39c:	00800244 	movi	r2,9
1000a3a0:	14c01b2e 	bgeu	r2,r19,1000a410 <___vfiprintf_internal_r+0xc40>
1000a3a4:	dc012215 	stw	r16,1160(sp)
1000a3a8:	dd010a04 	addi	r20,sp,1064
1000a3ac:	a821883a 	mov	r16,r21
1000a3b0:	402b883a 	mov	r21,r8
1000a3b4:	9809883a 	mov	r4,r19
1000a3b8:	800b883a 	mov	r5,r16
1000a3bc:	01800284 	movi	r6,10
1000a3c0:	000f883a 	mov	r7,zero
1000a3c4:	000bba40 	call	1000bba4 <__umoddi3>
1000a3c8:	10800c04 	addi	r2,r2,48
1000a3cc:	a53fffc4 	addi	r20,r20,-1
1000a3d0:	9809883a 	mov	r4,r19
1000a3d4:	800b883a 	mov	r5,r16
1000a3d8:	01800284 	movi	r6,10
1000a3dc:	000f883a 	mov	r7,zero
1000a3e0:	a0800005 	stb	r2,0(r20)
1000a3e4:	000b5640 	call	1000b564 <__udivdi3>
1000a3e8:	1027883a 	mov	r19,r2
1000a3ec:	10c4b03a 	or	r2,r2,r3
1000a3f0:	1821883a 	mov	r16,r3
1000a3f4:	103fef1e 	bne	r2,zero,1000a3b4 <__alt_data_end+0xf800a3b4>
1000a3f8:	d9011e17 	ldw	r4,1144(sp)
1000a3fc:	dc012217 	ldw	r16,1160(sp)
1000a400:	a811883a 	mov	r8,r21
1000a404:	dd012215 	stw	r20,1160(sp)
1000a408:	2529c83a 	sub	r20,r4,r20
1000a40c:	003e4106 	br	10009d14 <__alt_data_end+0xf8009d14>
1000a410:	9cc00c04 	addi	r19,r19,48
1000a414:	d8c109c4 	addi	r3,sp,1063
1000a418:	dcc109c5 	stb	r19,1063(sp)
1000a41c:	dd012817 	ldw	r20,1184(sp)
1000a420:	d8c12215 	stw	r3,1160(sp)
1000a424:	003e3b06 	br	10009d14 <__alt_data_end+0xf8009d14>
1000a428:	d8811c17 	ldw	r2,1136(sp)
1000a42c:	10000426 	beq	r2,zero,1000a440 <___vfiprintf_internal_r+0xc70>
1000a430:	d9012117 	ldw	r4,1156(sp)
1000a434:	d9412017 	ldw	r5,1152(sp)
1000a438:	d9811a04 	addi	r6,sp,1128
1000a43c:	00096bc0 	call	100096bc <__sprint_r.part.0>
1000a440:	d9412017 	ldw	r5,1152(sp)
1000a444:	2880030b 	ldhu	r2,12(r5)
1000a448:	1080100c 	andi	r2,r2,64
1000a44c:	103ddc1e 	bne	r2,zero,10009bc0 <__alt_data_end+0xf8009bc0>
1000a450:	d8812517 	ldw	r2,1172(sp)
1000a454:	003ddb06 	br	10009bc4 <__alt_data_end+0xf8009bc4>
1000a458:	1801061e 	bne	r3,zero,1000a874 <___vfiprintf_internal_r+0x10a4>
1000a45c:	d8c12217 	ldw	r3,1160(sp)
1000a460:	00800044 	movi	r2,1
1000a464:	dd000115 	stw	r20,4(sp)
1000a468:	d8c00015 	stw	r3,0(sp)
1000a46c:	dd011c15 	stw	r20,1136(sp)
1000a470:	d8811b15 	stw	r2,1132(sp)
1000a474:	a007883a 	mov	r3,r20
1000a478:	d811883a 	mov	r8,sp
1000a47c:	42000204 	addi	r8,r8,8
1000a480:	9480010c 	andi	r18,r18,4
1000a484:	90003426 	beq	r18,zero,1000a558 <___vfiprintf_internal_r+0xd88>
1000a488:	d9412417 	ldw	r5,1168(sp)
1000a48c:	2d65c83a 	sub	r18,r5,r21
1000a490:	0480310e 	bge	zero,r18,1000a558 <___vfiprintf_internal_r+0xd88>
1000a494:	04000404 	movi	r16,16
1000a498:	8481ad0e 	bge	r16,r18,1000ab50 <___vfiprintf_internal_r+0x1380>
1000a49c:	01440074 	movhi	r5,4097
1000a4a0:	29472204 	addi	r5,r5,7304
1000a4a4:	d9011b17 	ldw	r4,1132(sp)
1000a4a8:	d9412615 	stw	r5,1176(sp)
1000a4ac:	04c001c4 	movi	r19,7
1000a4b0:	dd012117 	ldw	r20,1156(sp)
1000a4b4:	dd812017 	ldw	r22,1152(sp)
1000a4b8:	00000506 	br	1000a4d0 <___vfiprintf_internal_r+0xd00>
1000a4bc:	21400084 	addi	r5,r4,2
1000a4c0:	42000204 	addi	r8,r8,8
1000a4c4:	1009883a 	mov	r4,r2
1000a4c8:	94bffc04 	addi	r18,r18,-16
1000a4cc:	84800d0e 	bge	r16,r18,1000a504 <___vfiprintf_internal_r+0xd34>
1000a4d0:	18c00404 	addi	r3,r3,16
1000a4d4:	20800044 	addi	r2,r4,1
1000a4d8:	47000015 	stw	fp,0(r8)
1000a4dc:	44000115 	stw	r16,4(r8)
1000a4e0:	d8c11c15 	stw	r3,1136(sp)
1000a4e4:	d8811b15 	stw	r2,1132(sp)
1000a4e8:	98bff40e 	bge	r19,r2,1000a4bc <__alt_data_end+0xf800a4bc>
1000a4ec:	1800291e 	bne	r3,zero,1000a594 <___vfiprintf_internal_r+0xdc4>
1000a4f0:	94bffc04 	addi	r18,r18,-16
1000a4f4:	0009883a 	mov	r4,zero
1000a4f8:	01400044 	movi	r5,1
1000a4fc:	d811883a 	mov	r8,sp
1000a500:	84bff316 	blt	r16,r18,1000a4d0 <__alt_data_end+0xf800a4d0>
1000a504:	d8812617 	ldw	r2,1176(sp)
1000a508:	1c87883a 	add	r3,r3,r18
1000a50c:	44800115 	stw	r18,4(r8)
1000a510:	40800015 	stw	r2,0(r8)
1000a514:	d8c11c15 	stw	r3,1136(sp)
1000a518:	d9411b15 	stw	r5,1132(sp)
1000a51c:	008001c4 	movi	r2,7
1000a520:	11400d0e 	bge	r2,r5,1000a558 <___vfiprintf_internal_r+0xd88>
1000a524:	1800061e 	bne	r3,zero,1000a540 <___vfiprintf_internal_r+0xd70>
1000a528:	d8c12417 	ldw	r3,1168(sp)
1000a52c:	a8c12e16 	blt	r21,r3,1000a9e8 <___vfiprintf_internal_r+0x1218>
1000a530:	d9012517 	ldw	r4,1172(sp)
1000a534:	2549883a 	add	r4,r4,r21
1000a538:	d9012515 	stw	r4,1172(sp)
1000a53c:	00001206 	br	1000a588 <___vfiprintf_internal_r+0xdb8>
1000a540:	d9012117 	ldw	r4,1156(sp)
1000a544:	d9412017 	ldw	r5,1152(sp)
1000a548:	d9811a04 	addi	r6,sp,1128
1000a54c:	00096bc0 	call	100096bc <__sprint_r.part.0>
1000a550:	103fbb1e 	bne	r2,zero,1000a440 <__alt_data_end+0xf800a440>
1000a554:	d8c11c17 	ldw	r3,1136(sp)
1000a558:	d8812417 	ldw	r2,1168(sp)
1000a55c:	a880010e 	bge	r21,r2,1000a564 <___vfiprintf_internal_r+0xd94>
1000a560:	102b883a 	mov	r21,r2
1000a564:	d9012517 	ldw	r4,1172(sp)
1000a568:	2549883a 	add	r4,r4,r21
1000a56c:	d9012515 	stw	r4,1172(sp)
1000a570:	18000526 	beq	r3,zero,1000a588 <___vfiprintf_internal_r+0xdb8>
1000a574:	d9012117 	ldw	r4,1156(sp)
1000a578:	d9412017 	ldw	r5,1152(sp)
1000a57c:	d9811a04 	addi	r6,sp,1128
1000a580:	00096bc0 	call	100096bc <__sprint_r.part.0>
1000a584:	103fae1e 	bne	r2,zero,1000a440 <__alt_data_end+0xf800a440>
1000a588:	d8011b15 	stw	zero,1132(sp)
1000a58c:	d811883a 	mov	r8,sp
1000a590:	003cc706 	br	100098b0 <__alt_data_end+0xf80098b0>
1000a594:	a009883a 	mov	r4,r20
1000a598:	b00b883a 	mov	r5,r22
1000a59c:	d9811a04 	addi	r6,sp,1128
1000a5a0:	00096bc0 	call	100096bc <__sprint_r.part.0>
1000a5a4:	103fa61e 	bne	r2,zero,1000a440 <__alt_data_end+0xf800a440>
1000a5a8:	d9011b17 	ldw	r4,1132(sp)
1000a5ac:	d8c11c17 	ldw	r3,1136(sp)
1000a5b0:	d811883a 	mov	r8,sp
1000a5b4:	21400044 	addi	r5,r4,1
1000a5b8:	003fc306 	br	1000a4c8 <__alt_data_end+0xf800a4c8>
1000a5bc:	d9012417 	ldw	r4,1168(sp)
1000a5c0:	256dc83a 	sub	r22,r4,r21
1000a5c4:	05be1f0e 	bge	zero,r22,10009e44 <__alt_data_end+0xf8009e44>
1000a5c8:	04c00404 	movi	r19,16
1000a5cc:	9d81720e 	bge	r19,r22,1000ab98 <___vfiprintf_internal_r+0x13c8>
1000a5d0:	00840074 	movhi	r2,4097
1000a5d4:	10871e04 	addi	r2,r2,7288
1000a5d8:	d8812615 	stw	r2,1176(sp)
1000a5dc:	028001c4 	movi	r10,7
1000a5e0:	00000506 	br	1000a5f8 <___vfiprintf_internal_r+0xe28>
1000a5e4:	29000084 	addi	r4,r5,2
1000a5e8:	42000204 	addi	r8,r8,8
1000a5ec:	100b883a 	mov	r5,r2
1000a5f0:	b5bffc04 	addi	r22,r22,-16
1000a5f4:	9d800d0e 	bge	r19,r22,1000a62c <___vfiprintf_internal_r+0xe5c>
1000a5f8:	18c00404 	addi	r3,r3,16
1000a5fc:	28800044 	addi	r2,r5,1
1000a600:	44400015 	stw	r17,0(r8)
1000a604:	44c00115 	stw	r19,4(r8)
1000a608:	d8c11c15 	stw	r3,1136(sp)
1000a60c:	d8811b15 	stw	r2,1132(sp)
1000a610:	50bff40e 	bge	r10,r2,1000a5e4 <__alt_data_end+0xf800a5e4>
1000a614:	1800111e 	bne	r3,zero,1000a65c <___vfiprintf_internal_r+0xe8c>
1000a618:	b5bffc04 	addi	r22,r22,-16
1000a61c:	000b883a 	mov	r5,zero
1000a620:	01000044 	movi	r4,1
1000a624:	d811883a 	mov	r8,sp
1000a628:	9dbff316 	blt	r19,r22,1000a5f8 <__alt_data_end+0xf800a5f8>
1000a62c:	d9412617 	ldw	r5,1176(sp)
1000a630:	1d87883a 	add	r3,r3,r22
1000a634:	45800115 	stw	r22,4(r8)
1000a638:	41400015 	stw	r5,0(r8)
1000a63c:	d8c11c15 	stw	r3,1136(sp)
1000a640:	d9011b15 	stw	r4,1132(sp)
1000a644:	008001c4 	movi	r2,7
1000a648:	11008516 	blt	r2,r4,1000a860 <___vfiprintf_internal_r+0x1090>
1000a64c:	42000204 	addi	r8,r8,8
1000a650:	20800044 	addi	r2,r4,1
1000a654:	200b883a 	mov	r5,r4
1000a658:	003dfa06 	br	10009e44 <__alt_data_end+0xf8009e44>
1000a65c:	d9012117 	ldw	r4,1156(sp)
1000a660:	d9412017 	ldw	r5,1152(sp)
1000a664:	d9811a04 	addi	r6,sp,1128
1000a668:	da812a15 	stw	r10,1192(sp)
1000a66c:	00096bc0 	call	100096bc <__sprint_r.part.0>
1000a670:	da812a17 	ldw	r10,1192(sp)
1000a674:	103f721e 	bne	r2,zero,1000a440 <__alt_data_end+0xf800a440>
1000a678:	d9411b17 	ldw	r5,1132(sp)
1000a67c:	d8c11c17 	ldw	r3,1136(sp)
1000a680:	d811883a 	mov	r8,sp
1000a684:	29000044 	addi	r4,r5,1
1000a688:	003fd906 	br	1000a5f0 <__alt_data_end+0xf800a5f0>
1000a68c:	1800681e 	bne	r3,zero,1000a830 <___vfiprintf_internal_r+0x1060>
1000a690:	50004d26 	beq	r10,zero,1000a7c8 <___vfiprintf_internal_r+0xff8>
1000a694:	d8811d04 	addi	r2,sp,1140
1000a698:	00c00084 	movi	r3,2
1000a69c:	d8800015 	stw	r2,0(sp)
1000a6a0:	d8c00115 	stw	r3,4(sp)
1000a6a4:	2005883a 	mov	r2,r4
1000a6a8:	d811883a 	mov	r8,sp
1000a6ac:	003de006 	br	10009e30 <__alt_data_end+0xf8009e30>
1000a6b0:	1800551e 	bne	r3,zero,1000a808 <___vfiprintf_internal_r+0x1038>
1000a6b4:	000b883a 	mov	r5,zero
1000a6b8:	00800044 	movi	r2,1
1000a6bc:	d811883a 	mov	r8,sp
1000a6c0:	003dde06 	br	10009e3c <__alt_data_end+0xf8009e3c>
1000a6c4:	10803fcc 	andi	r2,r2,255
1000a6c8:	1000191e 	bne	r2,zero,1000a730 <___vfiprintf_internal_r+0xf60>
1000a6cc:	9080004c 	andi	r2,r18,1
1000a6d0:	10001726 	beq	r2,zero,1000a730 <___vfiprintf_internal_r+0xf60>
1000a6d4:	00800c04 	movi	r2,48
1000a6d8:	d8c109c4 	addi	r3,sp,1063
1000a6dc:	d88109c5 	stb	r2,1063(sp)
1000a6e0:	dd012817 	ldw	r20,1184(sp)
1000a6e4:	d8c12215 	stw	r3,1160(sp)
1000a6e8:	003d8a06 	br	10009d14 <__alt_data_end+0xf8009d14>
1000a6ec:	d9012717 	ldw	r4,1180(sp)
1000a6f0:	dd010a04 	addi	r20,sp,1064
1000a6f4:	988003cc 	andi	r2,r19,15
1000a6f8:	a806973a 	slli	r3,r21,28
1000a6fc:	2085883a 	add	r2,r4,r2
1000a700:	9826d13a 	srli	r19,r19,4
1000a704:	10800003 	ldbu	r2,0(r2)
1000a708:	a82ad13a 	srli	r21,r21,4
1000a70c:	a53fffc4 	addi	r20,r20,-1
1000a710:	1ce6b03a 	or	r19,r3,r19
1000a714:	a0800005 	stb	r2,0(r20)
1000a718:	9d44b03a 	or	r2,r19,r21
1000a71c:	103ff51e 	bne	r2,zero,1000a6f4 <__alt_data_end+0xf800a6f4>
1000a720:	d9411e17 	ldw	r5,1144(sp)
1000a724:	dd012215 	stw	r20,1160(sp)
1000a728:	2d29c83a 	sub	r20,r5,r20
1000a72c:	003d7906 	br	10009d14 <__alt_data_end+0xf8009d14>
1000a730:	d8c10a04 	addi	r3,sp,1064
1000a734:	d8c12215 	stw	r3,1160(sp)
1000a738:	003d7606 	br	10009d14 <__alt_data_end+0xf8009d14>
1000a73c:	18009e1e 	bne	r3,zero,1000a9b8 <___vfiprintf_internal_r+0x11e8>
1000a740:	d8811d87 	ldb	r2,1142(sp)
1000a744:	10005f26 	beq	r2,zero,1000a8c4 <___vfiprintf_internal_r+0x10f4>
1000a748:	00c00044 	movi	r3,1
1000a74c:	d9011d84 	addi	r4,sp,1142
1000a750:	1805883a 	mov	r2,r3
1000a754:	d9000015 	stw	r4,0(sp)
1000a758:	d8c00115 	stw	r3,4(sp)
1000a75c:	d811883a 	mov	r8,sp
1000a760:	003efc06 	br	1000a354 <__alt_data_end+0xf800a354>
1000a764:	d9412417 	ldw	r5,1168(sp)
1000a768:	d811883a 	mov	r8,sp
1000a76c:	2d65c83a 	sub	r18,r5,r21
1000a770:	04bf4816 	blt	zero,r18,1000a494 <__alt_data_end+0xf800a494>
1000a774:	003f6c06 	br	1000a528 <__alt_data_end+0xf800a528>
1000a778:	b829883a 	mov	r20,r23
1000a77c:	003c6906 	br	10009924 <__alt_data_end+0xf8009924>
1000a780:	d9012117 	ldw	r4,1156(sp)
1000a784:	d9412017 	ldw	r5,1152(sp)
1000a788:	d9811a04 	addi	r6,sp,1128
1000a78c:	00096bc0 	call	100096bc <__sprint_r.part.0>
1000a790:	103f2b1e 	bne	r2,zero,1000a440 <__alt_data_end+0xf800a440>
1000a794:	d8c11c17 	ldw	r3,1136(sp)
1000a798:	d811883a 	mov	r8,sp
1000a79c:	003f3806 	br	1000a480 <__alt_data_end+0xf800a480>
1000a7a0:	00800084 	movi	r2,2
1000a7a4:	9d46b03a 	or	r3,r19,r21
1000a7a8:	003df606 	br	10009f84 <__alt_data_end+0xf8009f84>
1000a7ac:	d9012117 	ldw	r4,1156(sp)
1000a7b0:	d9412017 	ldw	r5,1152(sp)
1000a7b4:	d9811a04 	addi	r6,sp,1128
1000a7b8:	00096bc0 	call	100096bc <__sprint_r.part.0>
1000a7bc:	103f201e 	bne	r2,zero,1000a440 <__alt_data_end+0xf800a440>
1000a7c0:	d811883a 	mov	r8,sp
1000a7c4:	003cc606 	br	10009ae0 <__alt_data_end+0xf8009ae0>
1000a7c8:	000b883a 	mov	r5,zero
1000a7cc:	2005883a 	mov	r2,r4
1000a7d0:	d811883a 	mov	r8,sp
1000a7d4:	003d9906 	br	10009e3c <__alt_data_end+0xf8009e3c>
1000a7d8:	10803fcc 	andi	r2,r2,255
1000a7dc:	1080201c 	xori	r2,r2,128
1000a7e0:	10bfe004 	addi	r2,r2,-128
1000a7e4:	01000c04 	movi	r4,48
1000a7e8:	1100b226 	beq	r2,r4,1000aab4 <___vfiprintf_internal_r+0x12e4>
1000a7ec:	d9412217 	ldw	r5,1160(sp)
1000a7f0:	d8811e17 	ldw	r2,1144(sp)
1000a7f4:	193fffc5 	stb	r4,-1(r3)
1000a7f8:	297fffc4 	addi	r5,r5,-1
1000a7fc:	d9412215 	stw	r5,1160(sp)
1000a800:	1169c83a 	sub	r20,r2,r5
1000a804:	003d4306 	br	10009d14 <__alt_data_end+0xf8009d14>
1000a808:	d9012117 	ldw	r4,1156(sp)
1000a80c:	d9412017 	ldw	r5,1152(sp)
1000a810:	d9811a04 	addi	r6,sp,1128
1000a814:	00096bc0 	call	100096bc <__sprint_r.part.0>
1000a818:	103f091e 	bne	r2,zero,1000a440 <__alt_data_end+0xf800a440>
1000a81c:	d9411b17 	ldw	r5,1132(sp)
1000a820:	d8c11c17 	ldw	r3,1136(sp)
1000a824:	d811883a 	mov	r8,sp
1000a828:	28800044 	addi	r2,r5,1
1000a82c:	003d8306 	br	10009e3c <__alt_data_end+0xf8009e3c>
1000a830:	d9012117 	ldw	r4,1156(sp)
1000a834:	d9412017 	ldw	r5,1152(sp)
1000a838:	d9811a04 	addi	r6,sp,1128
1000a83c:	da812a15 	stw	r10,1192(sp)
1000a840:	00096bc0 	call	100096bc <__sprint_r.part.0>
1000a844:	da812a17 	ldw	r10,1192(sp)
1000a848:	103efd1e 	bne	r2,zero,1000a440 <__alt_data_end+0xf800a440>
1000a84c:	d9411b17 	ldw	r5,1132(sp)
1000a850:	d8c11c17 	ldw	r3,1136(sp)
1000a854:	d811883a 	mov	r8,sp
1000a858:	28800044 	addi	r2,r5,1
1000a85c:	003d6a06 	br	10009e08 <__alt_data_end+0xf8009e08>
1000a860:	1800a01e 	bne	r3,zero,1000aae4 <___vfiprintf_internal_r+0x1314>
1000a864:	000b883a 	mov	r5,zero
1000a868:	00800044 	movi	r2,1
1000a86c:	d811883a 	mov	r8,sp
1000a870:	003d7406 	br	10009e44 <__alt_data_end+0xf8009e44>
1000a874:	d9012117 	ldw	r4,1156(sp)
1000a878:	d9412017 	ldw	r5,1152(sp)
1000a87c:	d9811a04 	addi	r6,sp,1128
1000a880:	00096bc0 	call	100096bc <__sprint_r.part.0>
1000a884:	103eee1e 	bne	r2,zero,1000a440 <__alt_data_end+0xf800a440>
1000a888:	d8811b17 	ldw	r2,1132(sp)
1000a88c:	d8c11c17 	ldw	r3,1136(sp)
1000a890:	d811883a 	mov	r8,sp
1000a894:	10800044 	addi	r2,r2,1
1000a898:	003d8f06 	br	10009ed8 <__alt_data_end+0xf8009ed8>
1000a89c:	04e7c83a 	sub	r19,zero,r19
1000a8a0:	9804c03a 	cmpne	r2,r19,zero
1000a8a4:	056bc83a 	sub	r21,zero,r21
1000a8a8:	a8abc83a 	sub	r21,r21,r2
1000a8ac:	05800b44 	movi	r22,45
1000a8b0:	dd811d85 	stb	r22,1142(sp)
1000a8b4:	8029883a 	mov	r20,r16
1000a8b8:	00800044 	movi	r2,1
1000a8bc:	9d46b03a 	or	r3,r19,r21
1000a8c0:	003cfa06 	br	10009cac <__alt_data_end+0xf8009cac>
1000a8c4:	000b883a 	mov	r5,zero
1000a8c8:	00800044 	movi	r2,1
1000a8cc:	d811883a 	mov	r8,sp
1000a8d0:	503d5a26 	beq	r10,zero,10009e3c <__alt_data_end+0xf8009e3c>
1000a8d4:	00c00084 	movi	r3,2
1000a8d8:	d9011d04 	addi	r4,sp,1140
1000a8dc:	d9000015 	stw	r4,0(sp)
1000a8e0:	d8c00115 	stw	r3,4(sp)
1000a8e4:	003d5206 	br	10009e30 <__alt_data_end+0xf8009e30>
1000a8e8:	9080040c 	andi	r2,r18,16
1000a8ec:	1000421e 	bne	r2,zero,1000a9f8 <___vfiprintf_internal_r+0x1228>
1000a8f0:	9480100c 	andi	r18,r18,64
1000a8f4:	90009c26 	beq	r18,zero,1000ab68 <___vfiprintf_internal_r+0x1398>
1000a8f8:	d9412317 	ldw	r5,1164(sp)
1000a8fc:	d8c12517 	ldw	r3,1172(sp)
1000a900:	28800017 	ldw	r2,0(r5)
1000a904:	29400104 	addi	r5,r5,4
1000a908:	d9412315 	stw	r5,1164(sp)
1000a90c:	10c0000d 	sth	r3,0(r2)
1000a910:	003be706 	br	100098b0 <__alt_data_end+0xf80098b0>
1000a914:	90c0100c 	andi	r3,r18,64
1000a918:	18003e26 	beq	r3,zero,1000aa14 <___vfiprintf_internal_r+0x1244>
1000a91c:	d8c12317 	ldw	r3,1164(sp)
1000a920:	14c0000b 	ldhu	r19,0(r2)
1000a924:	002b883a 	mov	r21,zero
1000a928:	18c00104 	addi	r3,r3,4
1000a92c:	d8c12315 	stw	r3,1164(sp)
1000a930:	003db706 	br	1000a010 <__alt_data_end+0xf800a010>
1000a934:	9080100c 	andi	r2,r18,64
1000a938:	10004c26 	beq	r2,zero,1000aa6c <___vfiprintf_internal_r+0x129c>
1000a93c:	1cc0000f 	ldh	r19,0(r3)
1000a940:	d8812317 	ldw	r2,1164(sp)
1000a944:	982bd7fa 	srai	r21,r19,31
1000a948:	10800104 	addi	r2,r2,4
1000a94c:	d8812315 	stw	r2,1164(sp)
1000a950:	a805883a 	mov	r2,r21
1000a954:	003cd006 	br	10009c98 <__alt_data_end+0xf8009c98>
1000a958:	00800084 	movi	r2,2
1000a95c:	003d8906 	br	10009f84 <__alt_data_end+0xf8009f84>
1000a960:	b9800007 	ldb	r6,0(r23)
1000a964:	003bfb06 	br	10009954 <__alt_data_end+0xf8009954>
1000a968:	9080100c 	andi	r2,r18,64
1000a96c:	10003726 	beq	r2,zero,1000aa4c <___vfiprintf_internal_r+0x127c>
1000a970:	d9412317 	ldw	r5,1164(sp)
1000a974:	002b883a 	mov	r21,zero
1000a978:	0005883a 	mov	r2,zero
1000a97c:	2cc0000b 	ldhu	r19,0(r5)
1000a980:	29400104 	addi	r5,r5,4
1000a984:	d9412315 	stw	r5,1164(sp)
1000a988:	9807883a 	mov	r3,r19
1000a98c:	003d7d06 	br	10009f84 <__alt_data_end+0xf8009f84>
1000a990:	9080100c 	andi	r2,r18,64
1000a994:	10002526 	beq	r2,zero,1000aa2c <___vfiprintf_internal_r+0x125c>
1000a998:	d8812317 	ldw	r2,1164(sp)
1000a99c:	002b883a 	mov	r21,zero
1000a9a0:	14c0000b 	ldhu	r19,0(r2)
1000a9a4:	10800104 	addi	r2,r2,4
1000a9a8:	d8812315 	stw	r2,1164(sp)
1000a9ac:	9807883a 	mov	r3,r19
1000a9b0:	00800044 	movi	r2,1
1000a9b4:	003d7306 	br	10009f84 <__alt_data_end+0xf8009f84>
1000a9b8:	d9012117 	ldw	r4,1156(sp)
1000a9bc:	d9412017 	ldw	r5,1152(sp)
1000a9c0:	d9811a04 	addi	r6,sp,1128
1000a9c4:	da812a15 	stw	r10,1192(sp)
1000a9c8:	00096bc0 	call	100096bc <__sprint_r.part.0>
1000a9cc:	da812a17 	ldw	r10,1192(sp)
1000a9d0:	103e9b1e 	bne	r2,zero,1000a440 <__alt_data_end+0xf800a440>
1000a9d4:	d9411b17 	ldw	r5,1132(sp)
1000a9d8:	d8c11c17 	ldw	r3,1136(sp)
1000a9dc:	d811883a 	mov	r8,sp
1000a9e0:	28800044 	addi	r2,r5,1
1000a9e4:	003e5006 	br	1000a328 <__alt_data_end+0xf800a328>
1000a9e8:	182b883a 	mov	r21,r3
1000a9ec:	003ed006 	br	1000a530 <__alt_data_end+0xf800a530>
1000a9f0:	8029883a 	mov	r20,r16
1000a9f4:	003dc606 	br	1000a110 <__alt_data_end+0xf800a110>
1000a9f8:	d8c12317 	ldw	r3,1164(sp)
1000a9fc:	d9012517 	ldw	r4,1172(sp)
1000aa00:	18800017 	ldw	r2,0(r3)
1000aa04:	18c00104 	addi	r3,r3,4
1000aa08:	d8c12315 	stw	r3,1164(sp)
1000aa0c:	11000015 	stw	r4,0(r2)
1000aa10:	003ba706 	br	100098b0 <__alt_data_end+0xf80098b0>
1000aa14:	d9012317 	ldw	r4,1164(sp)
1000aa18:	14c00017 	ldw	r19,0(r2)
1000aa1c:	002b883a 	mov	r21,zero
1000aa20:	21000104 	addi	r4,r4,4
1000aa24:	d9012315 	stw	r4,1164(sp)
1000aa28:	003d7906 	br	1000a010 <__alt_data_end+0xf800a010>
1000aa2c:	d8c12317 	ldw	r3,1164(sp)
1000aa30:	002b883a 	mov	r21,zero
1000aa34:	00800044 	movi	r2,1
1000aa38:	1cc00017 	ldw	r19,0(r3)
1000aa3c:	18c00104 	addi	r3,r3,4
1000aa40:	d8c12315 	stw	r3,1164(sp)
1000aa44:	9807883a 	mov	r3,r19
1000aa48:	003d4e06 	br	10009f84 <__alt_data_end+0xf8009f84>
1000aa4c:	d8812317 	ldw	r2,1164(sp)
1000aa50:	002b883a 	mov	r21,zero
1000aa54:	14c00017 	ldw	r19,0(r2)
1000aa58:	10800104 	addi	r2,r2,4
1000aa5c:	d8812315 	stw	r2,1164(sp)
1000aa60:	9807883a 	mov	r3,r19
1000aa64:	0005883a 	mov	r2,zero
1000aa68:	003d4606 	br	10009f84 <__alt_data_end+0xf8009f84>
1000aa6c:	1cc00017 	ldw	r19,0(r3)
1000aa70:	d8c12317 	ldw	r3,1164(sp)
1000aa74:	982bd7fa 	srai	r21,r19,31
1000aa78:	18c00104 	addi	r3,r3,4
1000aa7c:	d8c12315 	stw	r3,1164(sp)
1000aa80:	a805883a 	mov	r2,r21
1000aa84:	003c8406 	br	10009c98 <__alt_data_end+0xf8009c98>
1000aa88:	01040074 	movhi	r4,4097
1000aa8c:	21071e04 	addi	r4,r4,7288
1000aa90:	d9012615 	stw	r4,1176(sp)
1000aa94:	003d0606 	br	10009eb0 <__alt_data_end+0xf8009eb0>
1000aa98:	b9800043 	ldbu	r6,1(r23)
1000aa9c:	94800814 	ori	r18,r18,32
1000aaa0:	bdc00044 	addi	r23,r23,1
1000aaa4:	31803fcc 	andi	r6,r6,255
1000aaa8:	3180201c 	xori	r6,r6,128
1000aaac:	31bfe004 	addi	r6,r6,-128
1000aab0:	003ba806 	br	10009954 <__alt_data_end+0xf8009954>
1000aab4:	d8811e17 	ldw	r2,1144(sp)
1000aab8:	d8c12217 	ldw	r3,1160(sp)
1000aabc:	10e9c83a 	sub	r20,r2,r3
1000aac0:	003c9406 	br	10009d14 <__alt_data_end+0xf8009d14>
1000aac4:	da012a15 	stw	r8,1192(sp)
1000aac8:	00022e00 	call	100022e0 <strlen>
1000aacc:	1029883a 	mov	r20,r2
1000aad0:	dd811d83 	ldbu	r22,1142(sp)
1000aad4:	dcc12315 	stw	r19,1164(sp)
1000aad8:	0021883a 	mov	r16,zero
1000aadc:	da012a17 	ldw	r8,1192(sp)
1000aae0:	003c8c06 	br	10009d14 <__alt_data_end+0xf8009d14>
1000aae4:	d9012117 	ldw	r4,1156(sp)
1000aae8:	d9412017 	ldw	r5,1152(sp)
1000aaec:	d9811a04 	addi	r6,sp,1128
1000aaf0:	00096bc0 	call	100096bc <__sprint_r.part.0>
1000aaf4:	103e521e 	bne	r2,zero,1000a440 <__alt_data_end+0xf800a440>
1000aaf8:	d9411b17 	ldw	r5,1132(sp)
1000aafc:	d8c11c17 	ldw	r3,1136(sp)
1000ab00:	d811883a 	mov	r8,sp
1000ab04:	28800044 	addi	r2,r5,1
1000ab08:	003cce06 	br	10009e44 <__alt_data_end+0xf8009e44>
1000ab0c:	01440074 	movhi	r5,4097
1000ab10:	29472204 	addi	r5,r5,7304
1000ab14:	d9412615 	stw	r5,1176(sp)
1000ab18:	d9411b17 	ldw	r5,1132(sp)
1000ab1c:	29400044 	addi	r5,r5,1
1000ab20:	003cad06 	br	10009dd8 <__alt_data_end+0xf8009dd8>
1000ab24:	00800184 	movi	r2,6
1000ab28:	1400012e 	bgeu	r2,r16,1000ab30 <___vfiprintf_internal_r+0x1360>
1000ab2c:	1021883a 	mov	r16,r2
1000ab30:	8029883a 	mov	r20,r16
1000ab34:	802b883a 	mov	r21,r16
1000ab38:	80001c16 	blt	r16,zero,1000abac <___vfiprintf_internal_r+0x13dc>
1000ab3c:	00c40074 	movhi	r3,4097
1000ab40:	18c6c204 	addi	r3,r3,6920
1000ab44:	dcc12315 	stw	r19,1164(sp)
1000ab48:	d8c12215 	stw	r3,1160(sp)
1000ab4c:	003cff06 	br	10009f4c <__alt_data_end+0xf8009f4c>
1000ab50:	d9411b17 	ldw	r5,1132(sp)
1000ab54:	00840074 	movhi	r2,4097
1000ab58:	10872204 	addi	r2,r2,7304
1000ab5c:	d8812615 	stw	r2,1176(sp)
1000ab60:	29400044 	addi	r5,r5,1
1000ab64:	003e6706 	br	1000a504 <__alt_data_end+0xf800a504>
1000ab68:	d9012317 	ldw	r4,1164(sp)
1000ab6c:	d9412517 	ldw	r5,1172(sp)
1000ab70:	20800017 	ldw	r2,0(r4)
1000ab74:	21000104 	addi	r4,r4,4
1000ab78:	d9012315 	stw	r4,1164(sp)
1000ab7c:	11400015 	stw	r5,0(r2)
1000ab80:	003b4b06 	br	100098b0 <__alt_data_end+0xf80098b0>
1000ab84:	8029883a 	mov	r20,r16
1000ab88:	dd811d83 	ldbu	r22,1142(sp)
1000ab8c:	dcc12315 	stw	r19,1164(sp)
1000ab90:	0021883a 	mov	r16,zero
1000ab94:	003c5f06 	br	10009d14 <__alt_data_end+0xf8009d14>
1000ab98:	01040074 	movhi	r4,4097
1000ab9c:	21071e04 	addi	r4,r4,7288
1000aba0:	d9012615 	stw	r4,1176(sp)
1000aba4:	1009883a 	mov	r4,r2
1000aba8:	003ea006 	br	1000a62c <__alt_data_end+0xf800a62c>
1000abac:	002b883a 	mov	r21,zero
1000abb0:	003fe206 	br	1000ab3c <__alt_data_end+0xf800ab3c>
1000abb4:	d9412317 	ldw	r5,1164(sp)
1000abb8:	b807883a 	mov	r3,r23
1000abbc:	102f883a 	mov	r23,r2
1000abc0:	2c000017 	ldw	r16,0(r5)
1000abc4:	29000104 	addi	r4,r5,4
1000abc8:	d9012315 	stw	r4,1164(sp)
1000abcc:	80000416 	blt	r16,zero,1000abe0 <___vfiprintf_internal_r+0x1410>
1000abd0:	19800047 	ldb	r6,1(r3)
1000abd4:	003b5f06 	br	10009954 <__alt_data_end+0xf8009954>
1000abd8:	043fffc4 	movi	r16,-1
1000abdc:	003bef06 	br	10009b9c <__alt_data_end+0xf8009b9c>
1000abe0:	043fffc4 	movi	r16,-1
1000abe4:	19800047 	ldb	r6,1(r3)
1000abe8:	003b5a06 	br	10009954 <__alt_data_end+0xf8009954>
1000abec:	282b883a 	mov	r21,r5
1000abf0:	003cc706 	br	10009f10 <__alt_data_end+0xf8009f10>

1000abf4 <__vfiprintf_internal>:
1000abf4:	2007883a 	mov	r3,r4
1000abf8:	01040074 	movhi	r4,4097
1000abfc:	210e1f04 	addi	r4,r4,14460
1000ac00:	21000017 	ldw	r4,0(r4)
1000ac04:	2805883a 	mov	r2,r5
1000ac08:	300f883a 	mov	r7,r6
1000ac0c:	180b883a 	mov	r5,r3
1000ac10:	100d883a 	mov	r6,r2
1000ac14:	00097d01 	jmpi	100097d0 <___vfiprintf_internal_r>

1000ac18 <_write_r>:
1000ac18:	defffd04 	addi	sp,sp,-12
1000ac1c:	dc000015 	stw	r16,0(sp)
1000ac20:	04040074 	movhi	r16,4097
1000ac24:	dc400115 	stw	r17,4(sp)
1000ac28:	8414f004 	addi	r16,r16,21440
1000ac2c:	2023883a 	mov	r17,r4
1000ac30:	2809883a 	mov	r4,r5
1000ac34:	300b883a 	mov	r5,r6
1000ac38:	380d883a 	mov	r6,r7
1000ac3c:	dfc00215 	stw	ra,8(sp)
1000ac40:	80000015 	stw	zero,0(r16)
1000ac44:	000f4340 	call	1000f434 <write>
1000ac48:	00ffffc4 	movi	r3,-1
1000ac4c:	10c00526 	beq	r2,r3,1000ac64 <_write_r+0x4c>
1000ac50:	dfc00217 	ldw	ra,8(sp)
1000ac54:	dc400117 	ldw	r17,4(sp)
1000ac58:	dc000017 	ldw	r16,0(sp)
1000ac5c:	dec00304 	addi	sp,sp,12
1000ac60:	f800283a 	ret
1000ac64:	80c00017 	ldw	r3,0(r16)
1000ac68:	183ff926 	beq	r3,zero,1000ac50 <__alt_data_end+0xf800ac50>
1000ac6c:	88c00015 	stw	r3,0(r17)
1000ac70:	003ff706 	br	1000ac50 <__alt_data_end+0xf800ac50>

1000ac74 <_close_r>:
1000ac74:	defffd04 	addi	sp,sp,-12
1000ac78:	dc000015 	stw	r16,0(sp)
1000ac7c:	04040074 	movhi	r16,4097
1000ac80:	dc400115 	stw	r17,4(sp)
1000ac84:	8414f004 	addi	r16,r16,21440
1000ac88:	2023883a 	mov	r17,r4
1000ac8c:	2809883a 	mov	r4,r5
1000ac90:	dfc00215 	stw	ra,8(sp)
1000ac94:	80000015 	stw	zero,0(r16)
1000ac98:	000eb600 	call	1000eb60 <close>
1000ac9c:	00ffffc4 	movi	r3,-1
1000aca0:	10c00526 	beq	r2,r3,1000acb8 <_close_r+0x44>
1000aca4:	dfc00217 	ldw	ra,8(sp)
1000aca8:	dc400117 	ldw	r17,4(sp)
1000acac:	dc000017 	ldw	r16,0(sp)
1000acb0:	dec00304 	addi	sp,sp,12
1000acb4:	f800283a 	ret
1000acb8:	80c00017 	ldw	r3,0(r16)
1000acbc:	183ff926 	beq	r3,zero,1000aca4 <__alt_data_end+0xf800aca4>
1000acc0:	88c00015 	stw	r3,0(r17)
1000acc4:	003ff706 	br	1000aca4 <__alt_data_end+0xf800aca4>

1000acc8 <_calloc_r>:
1000acc8:	defffe04 	addi	sp,sp,-8
1000accc:	dc000015 	stw	r16,0(sp)
1000acd0:	2021883a 	mov	r16,r4
1000acd4:	2809883a 	mov	r4,r5
1000acd8:	300b883a 	mov	r5,r6
1000acdc:	dfc00115 	stw	ra,4(sp)
1000ace0:	000c2ec0 	call	1000c2ec <__mulsi3>
1000ace4:	8009883a 	mov	r4,r16
1000ace8:	100b883a 	mov	r5,r2
1000acec:	00071e40 	call	100071e4 <_malloc_r>
1000acf0:	1021883a 	mov	r16,r2
1000acf4:	10002826 	beq	r2,zero,1000ad98 <_calloc_r+0xd0>
1000acf8:	11bfff17 	ldw	r6,-4(r2)
1000acfc:	00bfff04 	movi	r2,-4
1000ad00:	00c00904 	movi	r3,36
1000ad04:	308c703a 	and	r6,r6,r2
1000ad08:	308d883a 	add	r6,r6,r2
1000ad0c:	19801436 	bltu	r3,r6,1000ad60 <_calloc_r+0x98>
1000ad10:	008004c4 	movi	r2,19
1000ad14:	11800936 	bltu	r2,r6,1000ad3c <_calloc_r+0x74>
1000ad18:	8005883a 	mov	r2,r16
1000ad1c:	10000015 	stw	zero,0(r2)
1000ad20:	10000115 	stw	zero,4(r2)
1000ad24:	10000215 	stw	zero,8(r2)
1000ad28:	8005883a 	mov	r2,r16
1000ad2c:	dfc00117 	ldw	ra,4(sp)
1000ad30:	dc000017 	ldw	r16,0(sp)
1000ad34:	dec00204 	addi	sp,sp,8
1000ad38:	f800283a 	ret
1000ad3c:	80000015 	stw	zero,0(r16)
1000ad40:	80000115 	stw	zero,4(r16)
1000ad44:	008006c4 	movi	r2,27
1000ad48:	11800d2e 	bgeu	r2,r6,1000ad80 <_calloc_r+0xb8>
1000ad4c:	80000215 	stw	zero,8(r16)
1000ad50:	80000315 	stw	zero,12(r16)
1000ad54:	30c00c26 	beq	r6,r3,1000ad88 <_calloc_r+0xc0>
1000ad58:	80800404 	addi	r2,r16,16
1000ad5c:	003fef06 	br	1000ad1c <__alt_data_end+0xf800ad1c>
1000ad60:	8009883a 	mov	r4,r16
1000ad64:	000b883a 	mov	r5,zero
1000ad68:	0007d080 	call	10007d08 <memset>
1000ad6c:	8005883a 	mov	r2,r16
1000ad70:	dfc00117 	ldw	ra,4(sp)
1000ad74:	dc000017 	ldw	r16,0(sp)
1000ad78:	dec00204 	addi	sp,sp,8
1000ad7c:	f800283a 	ret
1000ad80:	80800204 	addi	r2,r16,8
1000ad84:	003fe506 	br	1000ad1c <__alt_data_end+0xf800ad1c>
1000ad88:	80000415 	stw	zero,16(r16)
1000ad8c:	80800604 	addi	r2,r16,24
1000ad90:	80000515 	stw	zero,20(r16)
1000ad94:	003fe106 	br	1000ad1c <__alt_data_end+0xf800ad1c>
1000ad98:	0005883a 	mov	r2,zero
1000ad9c:	003fe306 	br	1000ad2c <__alt_data_end+0xf800ad2c>

1000ada0 <_fclose_r>:
1000ada0:	28003226 	beq	r5,zero,1000ae6c <_fclose_r+0xcc>
1000ada4:	defffc04 	addi	sp,sp,-16
1000ada8:	dc400115 	stw	r17,4(sp)
1000adac:	2023883a 	mov	r17,r4
1000adb0:	dc000015 	stw	r16,0(sp)
1000adb4:	dfc00315 	stw	ra,12(sp)
1000adb8:	dc800215 	stw	r18,8(sp)
1000adbc:	2821883a 	mov	r16,r5
1000adc0:	00064e40 	call	100064e4 <__sfp_lock_acquire>
1000adc4:	88000226 	beq	r17,zero,1000add0 <_fclose_r+0x30>
1000adc8:	88800e17 	ldw	r2,56(r17)
1000adcc:	10002926 	beq	r2,zero,1000ae74 <_fclose_r+0xd4>
1000add0:	8080030f 	ldh	r2,12(r16)
1000add4:	10002226 	beq	r2,zero,1000ae60 <_fclose_r+0xc0>
1000add8:	8809883a 	mov	r4,r17
1000addc:	800b883a 	mov	r5,r16
1000ade0:	0005f180 	call	10005f18 <_fflush_r>
1000ade4:	1025883a 	mov	r18,r2
1000ade8:	80800b17 	ldw	r2,44(r16)
1000adec:	10000426 	beq	r2,zero,1000ae00 <_fclose_r+0x60>
1000adf0:	81400717 	ldw	r5,28(r16)
1000adf4:	8809883a 	mov	r4,r17
1000adf8:	103ee83a 	callr	r2
1000adfc:	10002616 	blt	r2,zero,1000ae98 <_fclose_r+0xf8>
1000ae00:	8080030b 	ldhu	r2,12(r16)
1000ae04:	1080200c 	andi	r2,r2,128
1000ae08:	10001f1e 	bne	r2,zero,1000ae88 <_fclose_r+0xe8>
1000ae0c:	81400c17 	ldw	r5,48(r16)
1000ae10:	28000526 	beq	r5,zero,1000ae28 <_fclose_r+0x88>
1000ae14:	80801004 	addi	r2,r16,64
1000ae18:	28800226 	beq	r5,r2,1000ae24 <_fclose_r+0x84>
1000ae1c:	8809883a 	mov	r4,r17
1000ae20:	00066480 	call	10006648 <_free_r>
1000ae24:	80000c15 	stw	zero,48(r16)
1000ae28:	81401117 	ldw	r5,68(r16)
1000ae2c:	28000326 	beq	r5,zero,1000ae3c <_fclose_r+0x9c>
1000ae30:	8809883a 	mov	r4,r17
1000ae34:	00066480 	call	10006648 <_free_r>
1000ae38:	80001115 	stw	zero,68(r16)
1000ae3c:	8000030d 	sth	zero,12(r16)
1000ae40:	00064e80 	call	100064e8 <__sfp_lock_release>
1000ae44:	9005883a 	mov	r2,r18
1000ae48:	dfc00317 	ldw	ra,12(sp)
1000ae4c:	dc800217 	ldw	r18,8(sp)
1000ae50:	dc400117 	ldw	r17,4(sp)
1000ae54:	dc000017 	ldw	r16,0(sp)
1000ae58:	dec00404 	addi	sp,sp,16
1000ae5c:	f800283a 	ret
1000ae60:	00064e80 	call	100064e8 <__sfp_lock_release>
1000ae64:	0005883a 	mov	r2,zero
1000ae68:	003ff706 	br	1000ae48 <__alt_data_end+0xf800ae48>
1000ae6c:	0005883a 	mov	r2,zero
1000ae70:	f800283a 	ret
1000ae74:	8809883a 	mov	r4,r17
1000ae78:	00064d40 	call	100064d4 <__sinit>
1000ae7c:	8080030f 	ldh	r2,12(r16)
1000ae80:	103fd51e 	bne	r2,zero,1000add8 <__alt_data_end+0xf800add8>
1000ae84:	003ff606 	br	1000ae60 <__alt_data_end+0xf800ae60>
1000ae88:	81400417 	ldw	r5,16(r16)
1000ae8c:	8809883a 	mov	r4,r17
1000ae90:	00066480 	call	10006648 <_free_r>
1000ae94:	003fdd06 	br	1000ae0c <__alt_data_end+0xf800ae0c>
1000ae98:	04bfffc4 	movi	r18,-1
1000ae9c:	003fd806 	br	1000ae00 <__alt_data_end+0xf800ae00>

1000aea0 <fclose>:
1000aea0:	00840074 	movhi	r2,4097
1000aea4:	108e1f04 	addi	r2,r2,14460
1000aea8:	200b883a 	mov	r5,r4
1000aeac:	11000017 	ldw	r4,0(r2)
1000aeb0:	000ada01 	jmpi	1000ada0 <_fclose_r>

1000aeb4 <_fputwc_r>:
1000aeb4:	3080030b 	ldhu	r2,12(r6)
1000aeb8:	defff804 	addi	sp,sp,-32
1000aebc:	dcc00415 	stw	r19,16(sp)
1000aec0:	dc800315 	stw	r18,12(sp)
1000aec4:	dc000115 	stw	r16,4(sp)
1000aec8:	dfc00715 	stw	ra,28(sp)
1000aecc:	dd400615 	stw	r21,24(sp)
1000aed0:	dd000515 	stw	r20,20(sp)
1000aed4:	dc400215 	stw	r17,8(sp)
1000aed8:	10c8000c 	andi	r3,r2,8192
1000aedc:	3021883a 	mov	r16,r6
1000aee0:	2027883a 	mov	r19,r4
1000aee4:	2825883a 	mov	r18,r5
1000aee8:	1800051e 	bne	r3,zero,1000af00 <_fputwc_r+0x4c>
1000aeec:	30c01917 	ldw	r3,100(r6)
1000aef0:	10880014 	ori	r2,r2,8192
1000aef4:	3080030d 	sth	r2,12(r6)
1000aef8:	18880014 	ori	r2,r3,8192
1000aefc:	30801915 	stw	r2,100(r6)
1000af00:	0006fd40 	call	10006fd4 <__locale_mb_cur_max>
1000af04:	00c00044 	movi	r3,1
1000af08:	10c03e26 	beq	r2,r3,1000b004 <_fputwc_r+0x150>
1000af0c:	9809883a 	mov	r4,r19
1000af10:	d80b883a 	mov	r5,sp
1000af14:	900d883a 	mov	r6,r18
1000af18:	81c01704 	addi	r7,r16,92
1000af1c:	000b3640 	call	1000b364 <_wcrtomb_r>
1000af20:	1029883a 	mov	r20,r2
1000af24:	00bfffc4 	movi	r2,-1
1000af28:	a0802026 	beq	r20,r2,1000afac <_fputwc_r+0xf8>
1000af2c:	d9400003 	ldbu	r5,0(sp)
1000af30:	a0001c26 	beq	r20,zero,1000afa4 <_fputwc_r+0xf0>
1000af34:	0023883a 	mov	r17,zero
1000af38:	05400284 	movi	r21,10
1000af3c:	00000906 	br	1000af64 <_fputwc_r+0xb0>
1000af40:	80800017 	ldw	r2,0(r16)
1000af44:	11400005 	stb	r5,0(r2)
1000af48:	80c00017 	ldw	r3,0(r16)
1000af4c:	18c00044 	addi	r3,r3,1
1000af50:	80c00015 	stw	r3,0(r16)
1000af54:	8c400044 	addi	r17,r17,1
1000af58:	dc45883a 	add	r2,sp,r17
1000af5c:	8d00112e 	bgeu	r17,r20,1000afa4 <_fputwc_r+0xf0>
1000af60:	11400003 	ldbu	r5,0(r2)
1000af64:	80c00217 	ldw	r3,8(r16)
1000af68:	18ffffc4 	addi	r3,r3,-1
1000af6c:	80c00215 	stw	r3,8(r16)
1000af70:	183ff30e 	bge	r3,zero,1000af40 <__alt_data_end+0xf800af40>
1000af74:	80800617 	ldw	r2,24(r16)
1000af78:	18801916 	blt	r3,r2,1000afe0 <_fputwc_r+0x12c>
1000af7c:	80800017 	ldw	r2,0(r16)
1000af80:	11400005 	stb	r5,0(r2)
1000af84:	80800017 	ldw	r2,0(r16)
1000af88:	10c00003 	ldbu	r3,0(r2)
1000af8c:	10800044 	addi	r2,r2,1
1000af90:	1d402326 	beq	r3,r21,1000b020 <_fputwc_r+0x16c>
1000af94:	80800015 	stw	r2,0(r16)
1000af98:	8c400044 	addi	r17,r17,1
1000af9c:	dc45883a 	add	r2,sp,r17
1000afa0:	8d3fef36 	bltu	r17,r20,1000af60 <__alt_data_end+0xf800af60>
1000afa4:	9005883a 	mov	r2,r18
1000afa8:	00000406 	br	1000afbc <_fputwc_r+0x108>
1000afac:	80c0030b 	ldhu	r3,12(r16)
1000afb0:	a005883a 	mov	r2,r20
1000afb4:	18c01014 	ori	r3,r3,64
1000afb8:	80c0030d 	sth	r3,12(r16)
1000afbc:	dfc00717 	ldw	ra,28(sp)
1000afc0:	dd400617 	ldw	r21,24(sp)
1000afc4:	dd000517 	ldw	r20,20(sp)
1000afc8:	dcc00417 	ldw	r19,16(sp)
1000afcc:	dc800317 	ldw	r18,12(sp)
1000afd0:	dc400217 	ldw	r17,8(sp)
1000afd4:	dc000117 	ldw	r16,4(sp)
1000afd8:	dec00804 	addi	sp,sp,32
1000afdc:	f800283a 	ret
1000afe0:	9809883a 	mov	r4,r19
1000afe4:	29403fcc 	andi	r5,r5,255
1000afe8:	800d883a 	mov	r6,r16
1000afec:	000b1f40 	call	1000b1f4 <__swbuf_r>
1000aff0:	10bfffe0 	cmpeqi	r2,r2,-1
1000aff4:	10803fcc 	andi	r2,r2,255
1000aff8:	103fd626 	beq	r2,zero,1000af54 <__alt_data_end+0xf800af54>
1000affc:	00bfffc4 	movi	r2,-1
1000b000:	003fee06 	br	1000afbc <__alt_data_end+0xf800afbc>
1000b004:	90ffffc4 	addi	r3,r18,-1
1000b008:	01003f84 	movi	r4,254
1000b00c:	20ffbf36 	bltu	r4,r3,1000af0c <__alt_data_end+0xf800af0c>
1000b010:	900b883a 	mov	r5,r18
1000b014:	dc800005 	stb	r18,0(sp)
1000b018:	1029883a 	mov	r20,r2
1000b01c:	003fc506 	br	1000af34 <__alt_data_end+0xf800af34>
1000b020:	9809883a 	mov	r4,r19
1000b024:	a80b883a 	mov	r5,r21
1000b028:	800d883a 	mov	r6,r16
1000b02c:	000b1f40 	call	1000b1f4 <__swbuf_r>
1000b030:	10bfffe0 	cmpeqi	r2,r2,-1
1000b034:	003fef06 	br	1000aff4 <__alt_data_end+0xf800aff4>

1000b038 <fputwc>:
1000b038:	defffc04 	addi	sp,sp,-16
1000b03c:	dc000115 	stw	r16,4(sp)
1000b040:	04040074 	movhi	r16,4097
1000b044:	840e1f04 	addi	r16,r16,14460
1000b048:	dc400215 	stw	r17,8(sp)
1000b04c:	2023883a 	mov	r17,r4
1000b050:	81000017 	ldw	r4,0(r16)
1000b054:	dfc00315 	stw	ra,12(sp)
1000b058:	280d883a 	mov	r6,r5
1000b05c:	20000626 	beq	r4,zero,1000b078 <fputwc+0x40>
1000b060:	20800e17 	ldw	r2,56(r4)
1000b064:	1000041e 	bne	r2,zero,1000b078 <fputwc+0x40>
1000b068:	d9400015 	stw	r5,0(sp)
1000b06c:	00064d40 	call	100064d4 <__sinit>
1000b070:	81000017 	ldw	r4,0(r16)
1000b074:	d9800017 	ldw	r6,0(sp)
1000b078:	880b883a 	mov	r5,r17
1000b07c:	dfc00317 	ldw	ra,12(sp)
1000b080:	dc400217 	ldw	r17,8(sp)
1000b084:	dc000117 	ldw	r16,4(sp)
1000b088:	dec00404 	addi	sp,sp,16
1000b08c:	000aeb41 	jmpi	1000aeb4 <_fputwc_r>

1000b090 <_fstat_r>:
1000b090:	defffd04 	addi	sp,sp,-12
1000b094:	dc000015 	stw	r16,0(sp)
1000b098:	04040074 	movhi	r16,4097
1000b09c:	dc400115 	stw	r17,4(sp)
1000b0a0:	8414f004 	addi	r16,r16,21440
1000b0a4:	2023883a 	mov	r17,r4
1000b0a8:	2809883a 	mov	r4,r5
1000b0ac:	300b883a 	mov	r5,r6
1000b0b0:	dfc00215 	stw	ra,8(sp)
1000b0b4:	80000015 	stw	zero,0(r16)
1000b0b8:	000ecb40 	call	1000ecb4 <fstat>
1000b0bc:	00ffffc4 	movi	r3,-1
1000b0c0:	10c00526 	beq	r2,r3,1000b0d8 <_fstat_r+0x48>
1000b0c4:	dfc00217 	ldw	ra,8(sp)
1000b0c8:	dc400117 	ldw	r17,4(sp)
1000b0cc:	dc000017 	ldw	r16,0(sp)
1000b0d0:	dec00304 	addi	sp,sp,12
1000b0d4:	f800283a 	ret
1000b0d8:	80c00017 	ldw	r3,0(r16)
1000b0dc:	183ff926 	beq	r3,zero,1000b0c4 <__alt_data_end+0xf800b0c4>
1000b0e0:	88c00015 	stw	r3,0(r17)
1000b0e4:	003ff706 	br	1000b0c4 <__alt_data_end+0xf800b0c4>

1000b0e8 <_isatty_r>:
1000b0e8:	defffd04 	addi	sp,sp,-12
1000b0ec:	dc000015 	stw	r16,0(sp)
1000b0f0:	04040074 	movhi	r16,4097
1000b0f4:	dc400115 	stw	r17,4(sp)
1000b0f8:	8414f004 	addi	r16,r16,21440
1000b0fc:	2023883a 	mov	r17,r4
1000b100:	2809883a 	mov	r4,r5
1000b104:	dfc00215 	stw	ra,8(sp)
1000b108:	80000015 	stw	zero,0(r16)
1000b10c:	000edbc0 	call	1000edbc <isatty>
1000b110:	00ffffc4 	movi	r3,-1
1000b114:	10c00526 	beq	r2,r3,1000b12c <_isatty_r+0x44>
1000b118:	dfc00217 	ldw	ra,8(sp)
1000b11c:	dc400117 	ldw	r17,4(sp)
1000b120:	dc000017 	ldw	r16,0(sp)
1000b124:	dec00304 	addi	sp,sp,12
1000b128:	f800283a 	ret
1000b12c:	80c00017 	ldw	r3,0(r16)
1000b130:	183ff926 	beq	r3,zero,1000b118 <__alt_data_end+0xf800b118>
1000b134:	88c00015 	stw	r3,0(r17)
1000b138:	003ff706 	br	1000b118 <__alt_data_end+0xf800b118>

1000b13c <_lseek_r>:
1000b13c:	defffd04 	addi	sp,sp,-12
1000b140:	dc000015 	stw	r16,0(sp)
1000b144:	04040074 	movhi	r16,4097
1000b148:	dc400115 	stw	r17,4(sp)
1000b14c:	8414f004 	addi	r16,r16,21440
1000b150:	2023883a 	mov	r17,r4
1000b154:	2809883a 	mov	r4,r5
1000b158:	300b883a 	mov	r5,r6
1000b15c:	380d883a 	mov	r6,r7
1000b160:	dfc00215 	stw	ra,8(sp)
1000b164:	80000015 	stw	zero,0(r16)
1000b168:	000ef9c0 	call	1000ef9c <lseek>
1000b16c:	00ffffc4 	movi	r3,-1
1000b170:	10c00526 	beq	r2,r3,1000b188 <_lseek_r+0x4c>
1000b174:	dfc00217 	ldw	ra,8(sp)
1000b178:	dc400117 	ldw	r17,4(sp)
1000b17c:	dc000017 	ldw	r16,0(sp)
1000b180:	dec00304 	addi	sp,sp,12
1000b184:	f800283a 	ret
1000b188:	80c00017 	ldw	r3,0(r16)
1000b18c:	183ff926 	beq	r3,zero,1000b174 <__alt_data_end+0xf800b174>
1000b190:	88c00015 	stw	r3,0(r17)
1000b194:	003ff706 	br	1000b174 <__alt_data_end+0xf800b174>

1000b198 <_read_r>:
1000b198:	defffd04 	addi	sp,sp,-12
1000b19c:	dc000015 	stw	r16,0(sp)
1000b1a0:	04040074 	movhi	r16,4097
1000b1a4:	dc400115 	stw	r17,4(sp)
1000b1a8:	8414f004 	addi	r16,r16,21440
1000b1ac:	2023883a 	mov	r17,r4
1000b1b0:	2809883a 	mov	r4,r5
1000b1b4:	300b883a 	mov	r5,r6
1000b1b8:	380d883a 	mov	r6,r7
1000b1bc:	dfc00215 	stw	ra,8(sp)
1000b1c0:	80000015 	stw	zero,0(r16)
1000b1c4:	000f1800 	call	1000f180 <read>
1000b1c8:	00ffffc4 	movi	r3,-1
1000b1cc:	10c00526 	beq	r2,r3,1000b1e4 <_read_r+0x4c>
1000b1d0:	dfc00217 	ldw	ra,8(sp)
1000b1d4:	dc400117 	ldw	r17,4(sp)
1000b1d8:	dc000017 	ldw	r16,0(sp)
1000b1dc:	dec00304 	addi	sp,sp,12
1000b1e0:	f800283a 	ret
1000b1e4:	80c00017 	ldw	r3,0(r16)
1000b1e8:	183ff926 	beq	r3,zero,1000b1d0 <__alt_data_end+0xf800b1d0>
1000b1ec:	88c00015 	stw	r3,0(r17)
1000b1f0:	003ff706 	br	1000b1d0 <__alt_data_end+0xf800b1d0>

1000b1f4 <__swbuf_r>:
1000b1f4:	defffc04 	addi	sp,sp,-16
1000b1f8:	dc800215 	stw	r18,8(sp)
1000b1fc:	dc400115 	stw	r17,4(sp)
1000b200:	dc000015 	stw	r16,0(sp)
1000b204:	dfc00315 	stw	ra,12(sp)
1000b208:	2025883a 	mov	r18,r4
1000b20c:	2823883a 	mov	r17,r5
1000b210:	3021883a 	mov	r16,r6
1000b214:	20000226 	beq	r4,zero,1000b220 <__swbuf_r+0x2c>
1000b218:	20800e17 	ldw	r2,56(r4)
1000b21c:	10004126 	beq	r2,zero,1000b324 <__swbuf_r+0x130>
1000b220:	80c00617 	ldw	r3,24(r16)
1000b224:	8180030b 	ldhu	r6,12(r16)
1000b228:	80c00215 	stw	r3,8(r16)
1000b22c:	30c0020c 	andi	r3,r6,8
1000b230:	18003526 	beq	r3,zero,1000b308 <__swbuf_r+0x114>
1000b234:	80c00417 	ldw	r3,16(r16)
1000b238:	18003326 	beq	r3,zero,1000b308 <__swbuf_r+0x114>
1000b23c:	3088000c 	andi	r2,r6,8192
1000b240:	8c403fcc 	andi	r17,r17,255
1000b244:	10001726 	beq	r2,zero,1000b2a4 <__swbuf_r+0xb0>
1000b248:	80800017 	ldw	r2,0(r16)
1000b24c:	81000517 	ldw	r4,20(r16)
1000b250:	10c7c83a 	sub	r3,r2,r3
1000b254:	19001d0e 	bge	r3,r4,1000b2cc <__swbuf_r+0xd8>
1000b258:	18c00044 	addi	r3,r3,1
1000b25c:	81400217 	ldw	r5,8(r16)
1000b260:	11000044 	addi	r4,r2,1
1000b264:	81000015 	stw	r4,0(r16)
1000b268:	297fffc4 	addi	r5,r5,-1
1000b26c:	81400215 	stw	r5,8(r16)
1000b270:	14400005 	stb	r17,0(r2)
1000b274:	80800517 	ldw	r2,20(r16)
1000b278:	10c01d26 	beq	r2,r3,1000b2f0 <__swbuf_r+0xfc>
1000b27c:	8080030b 	ldhu	r2,12(r16)
1000b280:	1080004c 	andi	r2,r2,1
1000b284:	1000181e 	bne	r2,zero,1000b2e8 <__swbuf_r+0xf4>
1000b288:	8805883a 	mov	r2,r17
1000b28c:	dfc00317 	ldw	ra,12(sp)
1000b290:	dc800217 	ldw	r18,8(sp)
1000b294:	dc400117 	ldw	r17,4(sp)
1000b298:	dc000017 	ldw	r16,0(sp)
1000b29c:	dec00404 	addi	sp,sp,16
1000b2a0:	f800283a 	ret
1000b2a4:	81001917 	ldw	r4,100(r16)
1000b2a8:	00b7ffc4 	movi	r2,-8193
1000b2ac:	31880014 	ori	r6,r6,8192
1000b2b0:	2084703a 	and	r2,r4,r2
1000b2b4:	80801915 	stw	r2,100(r16)
1000b2b8:	80800017 	ldw	r2,0(r16)
1000b2bc:	81000517 	ldw	r4,20(r16)
1000b2c0:	8180030d 	sth	r6,12(r16)
1000b2c4:	10c7c83a 	sub	r3,r2,r3
1000b2c8:	193fe316 	blt	r3,r4,1000b258 <__alt_data_end+0xf800b258>
1000b2cc:	9009883a 	mov	r4,r18
1000b2d0:	800b883a 	mov	r5,r16
1000b2d4:	0005f180 	call	10005f18 <_fflush_r>
1000b2d8:	1000091e 	bne	r2,zero,1000b300 <__swbuf_r+0x10c>
1000b2dc:	80800017 	ldw	r2,0(r16)
1000b2e0:	00c00044 	movi	r3,1
1000b2e4:	003fdd06 	br	1000b25c <__alt_data_end+0xf800b25c>
1000b2e8:	00800284 	movi	r2,10
1000b2ec:	88bfe61e 	bne	r17,r2,1000b288 <__alt_data_end+0xf800b288>
1000b2f0:	9009883a 	mov	r4,r18
1000b2f4:	800b883a 	mov	r5,r16
1000b2f8:	0005f180 	call	10005f18 <_fflush_r>
1000b2fc:	103fe226 	beq	r2,zero,1000b288 <__alt_data_end+0xf800b288>
1000b300:	00bfffc4 	movi	r2,-1
1000b304:	003fe106 	br	1000b28c <__alt_data_end+0xf800b28c>
1000b308:	9009883a 	mov	r4,r18
1000b30c:	800b883a 	mov	r5,r16
1000b310:	00044980 	call	10004498 <__swsetup_r>
1000b314:	1000051e 	bne	r2,zero,1000b32c <__swbuf_r+0x138>
1000b318:	8180030b 	ldhu	r6,12(r16)
1000b31c:	80c00417 	ldw	r3,16(r16)
1000b320:	003fc606 	br	1000b23c <__alt_data_end+0xf800b23c>
1000b324:	00064d40 	call	100064d4 <__sinit>
1000b328:	003fbd06 	br	1000b220 <__alt_data_end+0xf800b220>
1000b32c:	80c0030b 	ldhu	r3,12(r16)
1000b330:	00bfffc4 	movi	r2,-1
1000b334:	18c01014 	ori	r3,r3,64
1000b338:	80c0030d 	sth	r3,12(r16)
1000b33c:	00c00244 	movi	r3,9
1000b340:	90c00015 	stw	r3,0(r18)
1000b344:	003fd106 	br	1000b28c <__alt_data_end+0xf800b28c>

1000b348 <__swbuf>:
1000b348:	00c40074 	movhi	r3,4097
1000b34c:	18ce1f04 	addi	r3,r3,14460
1000b350:	2005883a 	mov	r2,r4
1000b354:	19000017 	ldw	r4,0(r3)
1000b358:	280d883a 	mov	r6,r5
1000b35c:	100b883a 	mov	r5,r2
1000b360:	000b1f41 	jmpi	1000b1f4 <__swbuf_r>

1000b364 <_wcrtomb_r>:
1000b364:	defff604 	addi	sp,sp,-40
1000b368:	00840074 	movhi	r2,4097
1000b36c:	dc800815 	stw	r18,32(sp)
1000b370:	dc400715 	stw	r17,28(sp)
1000b374:	dc000615 	stw	r16,24(sp)
1000b378:	108e2304 	addi	r2,r2,14476
1000b37c:	dfc00915 	stw	ra,36(sp)
1000b380:	2021883a 	mov	r16,r4
1000b384:	3823883a 	mov	r17,r7
1000b388:	14800017 	ldw	r18,0(r2)
1000b38c:	28001426 	beq	r5,zero,1000b3e0 <_wcrtomb_r+0x7c>
1000b390:	d9400415 	stw	r5,16(sp)
1000b394:	d9800515 	stw	r6,20(sp)
1000b398:	0006fc80 	call	10006fc8 <__locale_charset>
1000b39c:	d9400417 	ldw	r5,16(sp)
1000b3a0:	d9800517 	ldw	r6,20(sp)
1000b3a4:	8009883a 	mov	r4,r16
1000b3a8:	dc400015 	stw	r17,0(sp)
1000b3ac:	100f883a 	mov	r7,r2
1000b3b0:	903ee83a 	callr	r18
1000b3b4:	00ffffc4 	movi	r3,-1
1000b3b8:	10c0031e 	bne	r2,r3,1000b3c8 <_wcrtomb_r+0x64>
1000b3bc:	88000015 	stw	zero,0(r17)
1000b3c0:	00c02284 	movi	r3,138
1000b3c4:	80c00015 	stw	r3,0(r16)
1000b3c8:	dfc00917 	ldw	ra,36(sp)
1000b3cc:	dc800817 	ldw	r18,32(sp)
1000b3d0:	dc400717 	ldw	r17,28(sp)
1000b3d4:	dc000617 	ldw	r16,24(sp)
1000b3d8:	dec00a04 	addi	sp,sp,40
1000b3dc:	f800283a 	ret
1000b3e0:	0006fc80 	call	10006fc8 <__locale_charset>
1000b3e4:	8009883a 	mov	r4,r16
1000b3e8:	dc400015 	stw	r17,0(sp)
1000b3ec:	d9400104 	addi	r5,sp,4
1000b3f0:	000d883a 	mov	r6,zero
1000b3f4:	100f883a 	mov	r7,r2
1000b3f8:	903ee83a 	callr	r18
1000b3fc:	003fed06 	br	1000b3b4 <__alt_data_end+0xf800b3b4>

1000b400 <wcrtomb>:
1000b400:	defff504 	addi	sp,sp,-44
1000b404:	dc400515 	stw	r17,20(sp)
1000b408:	dc000415 	stw	r16,16(sp)
1000b40c:	dfc00a15 	stw	ra,40(sp)
1000b410:	dd400915 	stw	r21,36(sp)
1000b414:	dd000815 	stw	r20,32(sp)
1000b418:	dcc00715 	stw	r19,28(sp)
1000b41c:	dc800615 	stw	r18,24(sp)
1000b420:	2021883a 	mov	r16,r4
1000b424:	3023883a 	mov	r17,r6
1000b428:	20001d26 	beq	r4,zero,1000b4a0 <wcrtomb+0xa0>
1000b42c:	04840074 	movhi	r18,4097
1000b430:	948e1f04 	addi	r18,r18,14460
1000b434:	00840074 	movhi	r2,4097
1000b438:	95400017 	ldw	r21,0(r18)
1000b43c:	108e2304 	addi	r2,r2,14476
1000b440:	15000017 	ldw	r20,0(r2)
1000b444:	2827883a 	mov	r19,r5
1000b448:	0006fc80 	call	10006fc8 <__locale_charset>
1000b44c:	a809883a 	mov	r4,r21
1000b450:	dc400015 	stw	r17,0(sp)
1000b454:	800b883a 	mov	r5,r16
1000b458:	980d883a 	mov	r6,r19
1000b45c:	100f883a 	mov	r7,r2
1000b460:	a03ee83a 	callr	r20
1000b464:	00ffffc4 	movi	r3,-1
1000b468:	10c0041e 	bne	r2,r3,1000b47c <wcrtomb+0x7c>
1000b46c:	90c00017 	ldw	r3,0(r18)
1000b470:	01002284 	movi	r4,138
1000b474:	88000015 	stw	zero,0(r17)
1000b478:	19000015 	stw	r4,0(r3)
1000b47c:	dfc00a17 	ldw	ra,40(sp)
1000b480:	dd400917 	ldw	r21,36(sp)
1000b484:	dd000817 	ldw	r20,32(sp)
1000b488:	dcc00717 	ldw	r19,28(sp)
1000b48c:	dc800617 	ldw	r18,24(sp)
1000b490:	dc400517 	ldw	r17,20(sp)
1000b494:	dc000417 	ldw	r16,16(sp)
1000b498:	dec00b04 	addi	sp,sp,44
1000b49c:	f800283a 	ret
1000b4a0:	04840074 	movhi	r18,4097
1000b4a4:	948e1f04 	addi	r18,r18,14460
1000b4a8:	00840074 	movhi	r2,4097
1000b4ac:	94c00017 	ldw	r19,0(r18)
1000b4b0:	108e2304 	addi	r2,r2,14476
1000b4b4:	14000017 	ldw	r16,0(r2)
1000b4b8:	0006fc80 	call	10006fc8 <__locale_charset>
1000b4bc:	9809883a 	mov	r4,r19
1000b4c0:	dc400015 	stw	r17,0(sp)
1000b4c4:	d9400104 	addi	r5,sp,4
1000b4c8:	000d883a 	mov	r6,zero
1000b4cc:	100f883a 	mov	r7,r2
1000b4d0:	803ee83a 	callr	r16
1000b4d4:	003fe306 	br	1000b464 <__alt_data_end+0xf800b464>

1000b4d8 <__ascii_wctomb>:
1000b4d8:	28000526 	beq	r5,zero,1000b4f0 <__ascii_wctomb+0x18>
1000b4dc:	00803fc4 	movi	r2,255
1000b4e0:	11800536 	bltu	r2,r6,1000b4f8 <__ascii_wctomb+0x20>
1000b4e4:	29800005 	stb	r6,0(r5)
1000b4e8:	00800044 	movi	r2,1
1000b4ec:	f800283a 	ret
1000b4f0:	0005883a 	mov	r2,zero
1000b4f4:	f800283a 	ret
1000b4f8:	00802284 	movi	r2,138
1000b4fc:	20800015 	stw	r2,0(r4)
1000b500:	00bfffc4 	movi	r2,-1
1000b504:	f800283a 	ret

1000b508 <_wctomb_r>:
1000b508:	00840074 	movhi	r2,4097
1000b50c:	defff904 	addi	sp,sp,-28
1000b510:	108e2304 	addi	r2,r2,14476
1000b514:	dfc00615 	stw	ra,24(sp)
1000b518:	dc400515 	stw	r17,20(sp)
1000b51c:	dc000415 	stw	r16,16(sp)
1000b520:	3823883a 	mov	r17,r7
1000b524:	14000017 	ldw	r16,0(r2)
1000b528:	d9000115 	stw	r4,4(sp)
1000b52c:	d9400215 	stw	r5,8(sp)
1000b530:	d9800315 	stw	r6,12(sp)
1000b534:	0006fc80 	call	10006fc8 <__locale_charset>
1000b538:	d9000117 	ldw	r4,4(sp)
1000b53c:	d9400217 	ldw	r5,8(sp)
1000b540:	d9800317 	ldw	r6,12(sp)
1000b544:	dc400015 	stw	r17,0(sp)
1000b548:	100f883a 	mov	r7,r2
1000b54c:	803ee83a 	callr	r16
1000b550:	dfc00617 	ldw	ra,24(sp)
1000b554:	dc400517 	ldw	r17,20(sp)
1000b558:	dc000417 	ldw	r16,16(sp)
1000b55c:	dec00704 	addi	sp,sp,28
1000b560:	f800283a 	ret

1000b564 <__udivdi3>:
1000b564:	defff504 	addi	sp,sp,-44
1000b568:	dcc00415 	stw	r19,16(sp)
1000b56c:	dc000115 	stw	r16,4(sp)
1000b570:	dfc00a15 	stw	ra,40(sp)
1000b574:	df000915 	stw	fp,36(sp)
1000b578:	ddc00815 	stw	r23,32(sp)
1000b57c:	dd800715 	stw	r22,28(sp)
1000b580:	dd400615 	stw	r21,24(sp)
1000b584:	dd000515 	stw	r20,20(sp)
1000b588:	dc800315 	stw	r18,12(sp)
1000b58c:	dc400215 	stw	r17,8(sp)
1000b590:	2027883a 	mov	r19,r4
1000b594:	2821883a 	mov	r16,r5
1000b598:	3800471e 	bne	r7,zero,1000b6b8 <__udivdi3+0x154>
1000b59c:	3025883a 	mov	r18,r6
1000b5a0:	2023883a 	mov	r17,r4
1000b5a4:	2980592e 	bgeu	r5,r6,1000b70c <__udivdi3+0x1a8>
1000b5a8:	00bfffd4 	movui	r2,65535
1000b5ac:	2829883a 	mov	r20,r5
1000b5b0:	1180b236 	bltu	r2,r6,1000b87c <__udivdi3+0x318>
1000b5b4:	00803fc4 	movi	r2,255
1000b5b8:	1181622e 	bgeu	r2,r6,1000bb44 <__udivdi3+0x5e0>
1000b5bc:	00800204 	movi	r2,8
1000b5c0:	1007883a 	mov	r3,r2
1000b5c4:	3084d83a 	srl	r2,r6,r2
1000b5c8:	01040074 	movhi	r4,4097
1000b5cc:	21072604 	addi	r4,r4,7320
1000b5d0:	2085883a 	add	r2,r4,r2
1000b5d4:	11000003 	ldbu	r4,0(r2)
1000b5d8:	20c9883a 	add	r4,r4,r3
1000b5dc:	00c00804 	movi	r3,32
1000b5e0:	1907c83a 	sub	r3,r3,r4
1000b5e4:	18000526 	beq	r3,zero,1000b5fc <__udivdi3+0x98>
1000b5e8:	80e0983a 	sll	r16,r16,r3
1000b5ec:	9908d83a 	srl	r4,r19,r4
1000b5f0:	30e4983a 	sll	r18,r6,r3
1000b5f4:	98e2983a 	sll	r17,r19,r3
1000b5f8:	8128b03a 	or	r20,r16,r4
1000b5fc:	902ad43a 	srli	r21,r18,16
1000b600:	a009883a 	mov	r4,r20
1000b604:	95bfffcc 	andi	r22,r18,65535
1000b608:	a80b883a 	mov	r5,r21
1000b60c:	000c2e40 	call	1000c2e4 <__umodsi3>
1000b610:	a009883a 	mov	r4,r20
1000b614:	a80b883a 	mov	r5,r21
1000b618:	102f883a 	mov	r23,r2
1000b61c:	000c2dc0 	call	1000c2dc <__udivsi3>
1000b620:	1009883a 	mov	r4,r2
1000b624:	b00b883a 	mov	r5,r22
1000b628:	1021883a 	mov	r16,r2
1000b62c:	000c2ec0 	call	1000c2ec <__mulsi3>
1000b630:	b82e943a 	slli	r23,r23,16
1000b634:	8808d43a 	srli	r4,r17,16
1000b638:	b906b03a 	or	r3,r23,r4
1000b63c:	1880052e 	bgeu	r3,r2,1000b654 <__udivdi3+0xf0>
1000b640:	1c87883a 	add	r3,r3,r18
1000b644:	813fffc4 	addi	r4,r16,-1
1000b648:	1c800136 	bltu	r3,r18,1000b650 <__udivdi3+0xec>
1000b64c:	18815236 	bltu	r3,r2,1000bb98 <__udivdi3+0x634>
1000b650:	2021883a 	mov	r16,r4
1000b654:	18a7c83a 	sub	r19,r3,r2
1000b658:	9809883a 	mov	r4,r19
1000b65c:	a80b883a 	mov	r5,r21
1000b660:	000c2e40 	call	1000c2e4 <__umodsi3>
1000b664:	1029883a 	mov	r20,r2
1000b668:	9809883a 	mov	r4,r19
1000b66c:	a80b883a 	mov	r5,r21
1000b670:	a028943a 	slli	r20,r20,16
1000b674:	000c2dc0 	call	1000c2dc <__udivsi3>
1000b678:	1009883a 	mov	r4,r2
1000b67c:	b00b883a 	mov	r5,r22
1000b680:	8c7fffcc 	andi	r17,r17,65535
1000b684:	1027883a 	mov	r19,r2
1000b688:	a462b03a 	or	r17,r20,r17
1000b68c:	000c2ec0 	call	1000c2ec <__mulsi3>
1000b690:	8880052e 	bgeu	r17,r2,1000b6a8 <__udivdi3+0x144>
1000b694:	8ca3883a 	add	r17,r17,r18
1000b698:	98ffffc4 	addi	r3,r19,-1
1000b69c:	8c811036 	bltu	r17,r18,1000bae0 <__udivdi3+0x57c>
1000b6a0:	88810f2e 	bgeu	r17,r2,1000bae0 <__udivdi3+0x57c>
1000b6a4:	9cffff84 	addi	r19,r19,-2
1000b6a8:	8020943a 	slli	r16,r16,16
1000b6ac:	0007883a 	mov	r3,zero
1000b6b0:	9c04b03a 	or	r2,r19,r16
1000b6b4:	00006006 	br	1000b838 <__udivdi3+0x2d4>
1000b6b8:	29c05d36 	bltu	r5,r7,1000b830 <__udivdi3+0x2cc>
1000b6bc:	00bfffd4 	movui	r2,65535
1000b6c0:	11c0692e 	bgeu	r2,r7,1000b868 <__udivdi3+0x304>
1000b6c4:	00804034 	movhi	r2,256
1000b6c8:	10bfffc4 	addi	r2,r2,-1
1000b6cc:	11c10e2e 	bgeu	r2,r7,1000bb08 <__udivdi3+0x5a4>
1000b6d0:	01400604 	movi	r5,24
1000b6d4:	2811883a 	mov	r8,r5
1000b6d8:	394ad83a 	srl	r5,r7,r5
1000b6dc:	00840074 	movhi	r2,4097
1000b6e0:	10872604 	addi	r2,r2,7320
1000b6e4:	114b883a 	add	r5,r2,r5
1000b6e8:	29400003 	ldbu	r5,0(r5)
1000b6ec:	00c00804 	movi	r3,32
1000b6f0:	2a0b883a 	add	r5,r5,r8
1000b6f4:	196fc83a 	sub	r23,r3,r5
1000b6f8:	b8006b1e 	bne	r23,zero,1000b8a8 <__udivdi3+0x344>
1000b6fc:	3c011436 	bltu	r7,r16,1000bb50 <__udivdi3+0x5ec>
1000b700:	9985403a 	cmpgeu	r2,r19,r6
1000b704:	0007883a 	mov	r3,zero
1000b708:	00004b06 	br	1000b838 <__udivdi3+0x2d4>
1000b70c:	3000041e 	bne	r6,zero,1000b720 <__udivdi3+0x1bc>
1000b710:	01000044 	movi	r4,1
1000b714:	000b883a 	mov	r5,zero
1000b718:	000c2dc0 	call	1000c2dc <__udivsi3>
1000b71c:	1025883a 	mov	r18,r2
1000b720:	00bfffd4 	movui	r2,65535
1000b724:	14805b2e 	bgeu	r2,r18,1000b894 <__udivdi3+0x330>
1000b728:	00804034 	movhi	r2,256
1000b72c:	10bfffc4 	addi	r2,r2,-1
1000b730:	1480fe2e 	bgeu	r2,r18,1000bb2c <__udivdi3+0x5c8>
1000b734:	00800604 	movi	r2,24
1000b738:	1007883a 	mov	r3,r2
1000b73c:	9084d83a 	srl	r2,r18,r2
1000b740:	01040074 	movhi	r4,4097
1000b744:	21072604 	addi	r4,r4,7320
1000b748:	2085883a 	add	r2,r4,r2
1000b74c:	11800003 	ldbu	r6,0(r2)
1000b750:	01c00804 	movi	r7,32
1000b754:	30c7883a 	add	r3,r6,r3
1000b758:	38cfc83a 	sub	r7,r7,r3
1000b75c:	3800a71e 	bne	r7,zero,1000b9fc <__udivdi3+0x498>
1000b760:	9028d43a 	srli	r20,r18,16
1000b764:	84a1c83a 	sub	r16,r16,r18
1000b768:	957fffcc 	andi	r21,r18,65535
1000b76c:	00c00044 	movi	r3,1
1000b770:	8009883a 	mov	r4,r16
1000b774:	a00b883a 	mov	r5,r20
1000b778:	d8c00015 	stw	r3,0(sp)
1000b77c:	000c2e40 	call	1000c2e4 <__umodsi3>
1000b780:	8009883a 	mov	r4,r16
1000b784:	a00b883a 	mov	r5,r20
1000b788:	102d883a 	mov	r22,r2
1000b78c:	000c2dc0 	call	1000c2dc <__udivsi3>
1000b790:	1009883a 	mov	r4,r2
1000b794:	a80b883a 	mov	r5,r21
1000b798:	1021883a 	mov	r16,r2
1000b79c:	000c2ec0 	call	1000c2ec <__mulsi3>
1000b7a0:	b02c943a 	slli	r22,r22,16
1000b7a4:	880ed43a 	srli	r7,r17,16
1000b7a8:	d8c00017 	ldw	r3,0(sp)
1000b7ac:	b1ccb03a 	or	r6,r22,r7
1000b7b0:	3080052e 	bgeu	r6,r2,1000b7c8 <__udivdi3+0x264>
1000b7b4:	348d883a 	add	r6,r6,r18
1000b7b8:	813fffc4 	addi	r4,r16,-1
1000b7bc:	34800136 	bltu	r6,r18,1000b7c4 <__udivdi3+0x260>
1000b7c0:	3080f236 	bltu	r6,r2,1000bb8c <__udivdi3+0x628>
1000b7c4:	2021883a 	mov	r16,r4
1000b7c8:	30a7c83a 	sub	r19,r6,r2
1000b7cc:	9809883a 	mov	r4,r19
1000b7d0:	a00b883a 	mov	r5,r20
1000b7d4:	d8c00015 	stw	r3,0(sp)
1000b7d8:	000c2e40 	call	1000c2e4 <__umodsi3>
1000b7dc:	102d883a 	mov	r22,r2
1000b7e0:	9809883a 	mov	r4,r19
1000b7e4:	a00b883a 	mov	r5,r20
1000b7e8:	b02c943a 	slli	r22,r22,16
1000b7ec:	000c2dc0 	call	1000c2dc <__udivsi3>
1000b7f0:	1009883a 	mov	r4,r2
1000b7f4:	a80b883a 	mov	r5,r21
1000b7f8:	8c7fffcc 	andi	r17,r17,65535
1000b7fc:	1027883a 	mov	r19,r2
1000b800:	b462b03a 	or	r17,r22,r17
1000b804:	000c2ec0 	call	1000c2ec <__mulsi3>
1000b808:	d8c00017 	ldw	r3,0(sp)
1000b80c:	8880052e 	bgeu	r17,r2,1000b824 <__udivdi3+0x2c0>
1000b810:	8ca3883a 	add	r17,r17,r18
1000b814:	993fffc4 	addi	r4,r19,-1
1000b818:	8c80af36 	bltu	r17,r18,1000bad8 <__udivdi3+0x574>
1000b81c:	8880ae2e 	bgeu	r17,r2,1000bad8 <__udivdi3+0x574>
1000b820:	9cffff84 	addi	r19,r19,-2
1000b824:	8020943a 	slli	r16,r16,16
1000b828:	9c04b03a 	or	r2,r19,r16
1000b82c:	00000206 	br	1000b838 <__udivdi3+0x2d4>
1000b830:	0007883a 	mov	r3,zero
1000b834:	0005883a 	mov	r2,zero
1000b838:	dfc00a17 	ldw	ra,40(sp)
1000b83c:	df000917 	ldw	fp,36(sp)
1000b840:	ddc00817 	ldw	r23,32(sp)
1000b844:	dd800717 	ldw	r22,28(sp)
1000b848:	dd400617 	ldw	r21,24(sp)
1000b84c:	dd000517 	ldw	r20,20(sp)
1000b850:	dcc00417 	ldw	r19,16(sp)
1000b854:	dc800317 	ldw	r18,12(sp)
1000b858:	dc400217 	ldw	r17,8(sp)
1000b85c:	dc000117 	ldw	r16,4(sp)
1000b860:	dec00b04 	addi	sp,sp,44
1000b864:	f800283a 	ret
1000b868:	00803fc4 	movi	r2,255
1000b86c:	11c0a92e 	bgeu	r2,r7,1000bb14 <__udivdi3+0x5b0>
1000b870:	01400204 	movi	r5,8
1000b874:	2811883a 	mov	r8,r5
1000b878:	003f9706 	br	1000b6d8 <__alt_data_end+0xf800b6d8>
1000b87c:	00804034 	movhi	r2,256
1000b880:	10bfffc4 	addi	r2,r2,-1
1000b884:	1180a62e 	bgeu	r2,r6,1000bb20 <__udivdi3+0x5bc>
1000b888:	00800604 	movi	r2,24
1000b88c:	1007883a 	mov	r3,r2
1000b890:	003f4c06 	br	1000b5c4 <__alt_data_end+0xf800b5c4>
1000b894:	00803fc4 	movi	r2,255
1000b898:	1480a72e 	bgeu	r2,r18,1000bb38 <__udivdi3+0x5d4>
1000b89c:	00800204 	movi	r2,8
1000b8a0:	1007883a 	mov	r3,r2
1000b8a4:	003fa506 	br	1000b73c <__alt_data_end+0xf800b73c>
1000b8a8:	3178d83a 	srl	fp,r6,r5
1000b8ac:	3dce983a 	sll	r7,r7,r23
1000b8b0:	8168d83a 	srl	r20,r16,r5
1000b8b4:	9950d83a 	srl	r8,r19,r5
1000b8b8:	3f38b03a 	or	fp,r7,fp
1000b8bc:	e024d43a 	srli	r18,fp,16
1000b8c0:	85e0983a 	sll	r16,r16,r23
1000b8c4:	a009883a 	mov	r4,r20
1000b8c8:	900b883a 	mov	r5,r18
1000b8cc:	8220b03a 	or	r16,r16,r8
1000b8d0:	35ea983a 	sll	r21,r6,r23
1000b8d4:	000c2e40 	call	1000c2e4 <__umodsi3>
1000b8d8:	a009883a 	mov	r4,r20
1000b8dc:	900b883a 	mov	r5,r18
1000b8e0:	1023883a 	mov	r17,r2
1000b8e4:	e5bfffcc 	andi	r22,fp,65535
1000b8e8:	000c2dc0 	call	1000c2dc <__udivsi3>
1000b8ec:	1009883a 	mov	r4,r2
1000b8f0:	b00b883a 	mov	r5,r22
1000b8f4:	1029883a 	mov	r20,r2
1000b8f8:	000c2ec0 	call	1000c2ec <__mulsi3>
1000b8fc:	8806943a 	slli	r3,r17,16
1000b900:	8014d43a 	srli	r10,r16,16
1000b904:	1a92b03a 	or	r9,r3,r10
1000b908:	4880042e 	bgeu	r9,r2,1000b91c <__udivdi3+0x3b8>
1000b90c:	4f13883a 	add	r9,r9,fp
1000b910:	a0ffffc4 	addi	r3,r20,-1
1000b914:	4f00952e 	bgeu	r9,fp,1000bb6c <__udivdi3+0x608>
1000b918:	1829883a 	mov	r20,r3
1000b91c:	48a3c83a 	sub	r17,r9,r2
1000b920:	8809883a 	mov	r4,r17
1000b924:	900b883a 	mov	r5,r18
1000b928:	000c2e40 	call	1000c2e4 <__umodsi3>
1000b92c:	8809883a 	mov	r4,r17
1000b930:	900b883a 	mov	r5,r18
1000b934:	d8800015 	stw	r2,0(sp)
1000b938:	000c2dc0 	call	1000c2dc <__udivsi3>
1000b93c:	1009883a 	mov	r4,r2
1000b940:	b00b883a 	mov	r5,r22
1000b944:	1023883a 	mov	r17,r2
1000b948:	000c2ec0 	call	1000c2ec <__mulsi3>
1000b94c:	d8c00017 	ldw	r3,0(sp)
1000b950:	823fffcc 	andi	r8,r16,65535
1000b954:	1806943a 	slli	r3,r3,16
1000b958:	1a20b03a 	or	r16,r3,r8
1000b95c:	8080042e 	bgeu	r16,r2,1000b970 <__udivdi3+0x40c>
1000b960:	8721883a 	add	r16,r16,fp
1000b964:	88ffffc4 	addi	r3,r17,-1
1000b968:	87007c2e 	bgeu	r16,fp,1000bb5c <__udivdi3+0x5f8>
1000b96c:	1823883a 	mov	r17,r3
1000b970:	a028943a 	slli	r20,r20,16
1000b974:	acbfffcc 	andi	r18,r21,65535
1000b978:	900b883a 	mov	r5,r18
1000b97c:	8d28b03a 	or	r20,r17,r20
1000b980:	a022d43a 	srli	r17,r20,16
1000b984:	a5bfffcc 	andi	r22,r20,65535
1000b988:	b009883a 	mov	r4,r22
1000b98c:	a82ad43a 	srli	r21,r21,16
1000b990:	80a1c83a 	sub	r16,r16,r2
1000b994:	000c2ec0 	call	1000c2ec <__mulsi3>
1000b998:	8809883a 	mov	r4,r17
1000b99c:	900b883a 	mov	r5,r18
1000b9a0:	1039883a 	mov	fp,r2
1000b9a4:	000c2ec0 	call	1000c2ec <__mulsi3>
1000b9a8:	8809883a 	mov	r4,r17
1000b9ac:	a80b883a 	mov	r5,r21
1000b9b0:	1025883a 	mov	r18,r2
1000b9b4:	000c2ec0 	call	1000c2ec <__mulsi3>
1000b9b8:	b009883a 	mov	r4,r22
1000b9bc:	a80b883a 	mov	r5,r21
1000b9c0:	1023883a 	mov	r17,r2
1000b9c4:	000c2ec0 	call	1000c2ec <__mulsi3>
1000b9c8:	e006d43a 	srli	r3,fp,16
1000b9cc:	9085883a 	add	r2,r18,r2
1000b9d0:	10c7883a 	add	r3,r2,r3
1000b9d4:	1c80022e 	bgeu	r3,r18,1000b9e0 <__udivdi3+0x47c>
1000b9d8:	00800074 	movhi	r2,1
1000b9dc:	88a3883a 	add	r17,r17,r2
1000b9e0:	1808d43a 	srli	r4,r3,16
1000b9e4:	8909883a 	add	r4,r17,r4
1000b9e8:	81004436 	bltu	r16,r4,1000bafc <__udivdi3+0x598>
1000b9ec:	81003e26 	beq	r16,r4,1000bae8 <__udivdi3+0x584>
1000b9f0:	a005883a 	mov	r2,r20
1000b9f4:	0007883a 	mov	r3,zero
1000b9f8:	003f8f06 	br	1000b838 <__alt_data_end+0xf800b838>
1000b9fc:	91e4983a 	sll	r18,r18,r7
1000ba00:	80eed83a 	srl	r23,r16,r3
1000ba04:	81cc983a 	sll	r6,r16,r7
1000ba08:	9028d43a 	srli	r20,r18,16
1000ba0c:	98c6d83a 	srl	r3,r19,r3
1000ba10:	b809883a 	mov	r4,r23
1000ba14:	a00b883a 	mov	r5,r20
1000ba18:	30ecb03a 	or	r22,r6,r3
1000ba1c:	99e2983a 	sll	r17,r19,r7
1000ba20:	000c2e40 	call	1000c2e4 <__umodsi3>
1000ba24:	b809883a 	mov	r4,r23
1000ba28:	a00b883a 	mov	r5,r20
1000ba2c:	1021883a 	mov	r16,r2
1000ba30:	957fffcc 	andi	r21,r18,65535
1000ba34:	000c2dc0 	call	1000c2dc <__udivsi3>
1000ba38:	a80b883a 	mov	r5,r21
1000ba3c:	1009883a 	mov	r4,r2
1000ba40:	102f883a 	mov	r23,r2
1000ba44:	000c2ec0 	call	1000c2ec <__mulsi3>
1000ba48:	8020943a 	slli	r16,r16,16
1000ba4c:	b00ad43a 	srli	r5,r22,16
1000ba50:	814cb03a 	or	r6,r16,r5
1000ba54:	3080062e 	bgeu	r6,r2,1000ba70 <__udivdi3+0x50c>
1000ba58:	348d883a 	add	r6,r6,r18
1000ba5c:	b8ffffc4 	addi	r3,r23,-1
1000ba60:	34804836 	bltu	r6,r18,1000bb84 <__udivdi3+0x620>
1000ba64:	3080472e 	bgeu	r6,r2,1000bb84 <__udivdi3+0x620>
1000ba68:	bdffff84 	addi	r23,r23,-2
1000ba6c:	348d883a 	add	r6,r6,r18
1000ba70:	30a7c83a 	sub	r19,r6,r2
1000ba74:	9809883a 	mov	r4,r19
1000ba78:	a00b883a 	mov	r5,r20
1000ba7c:	000c2e40 	call	1000c2e4 <__umodsi3>
1000ba80:	9809883a 	mov	r4,r19
1000ba84:	a00b883a 	mov	r5,r20
1000ba88:	1039883a 	mov	fp,r2
1000ba8c:	000c2dc0 	call	1000c2dc <__udivsi3>
1000ba90:	1009883a 	mov	r4,r2
1000ba94:	a80b883a 	mov	r5,r21
1000ba98:	e038943a 	slli	fp,fp,16
1000ba9c:	1027883a 	mov	r19,r2
1000baa0:	000c2ec0 	call	1000c2ec <__mulsi3>
1000baa4:	b1bfffcc 	andi	r6,r22,65535
1000baa8:	e18cb03a 	or	r6,fp,r6
1000baac:	3080062e 	bgeu	r6,r2,1000bac8 <__udivdi3+0x564>
1000bab0:	348d883a 	add	r6,r6,r18
1000bab4:	98ffffc4 	addi	r3,r19,-1
1000bab8:	34803036 	bltu	r6,r18,1000bb7c <__udivdi3+0x618>
1000babc:	30802f2e 	bgeu	r6,r2,1000bb7c <__udivdi3+0x618>
1000bac0:	9cffff84 	addi	r19,r19,-2
1000bac4:	348d883a 	add	r6,r6,r18
1000bac8:	b82e943a 	slli	r23,r23,16
1000bacc:	30a1c83a 	sub	r16,r6,r2
1000bad0:	9dc6b03a 	or	r3,r19,r23
1000bad4:	003f2606 	br	1000b770 <__alt_data_end+0xf800b770>
1000bad8:	2027883a 	mov	r19,r4
1000badc:	003f5106 	br	1000b824 <__alt_data_end+0xf800b824>
1000bae0:	1827883a 	mov	r19,r3
1000bae4:	003ef006 	br	1000b6a8 <__alt_data_end+0xf800b6a8>
1000bae8:	1808943a 	slli	r4,r3,16
1000baec:	9dc6983a 	sll	r3,r19,r23
1000baf0:	e73fffcc 	andi	fp,fp,65535
1000baf4:	2709883a 	add	r4,r4,fp
1000baf8:	193fbd2e 	bgeu	r3,r4,1000b9f0 <__alt_data_end+0xf800b9f0>
1000bafc:	a0bfffc4 	addi	r2,r20,-1
1000bb00:	0007883a 	mov	r3,zero
1000bb04:	003f4c06 	br	1000b838 <__alt_data_end+0xf800b838>
1000bb08:	01400404 	movi	r5,16
1000bb0c:	2811883a 	mov	r8,r5
1000bb10:	003ef106 	br	1000b6d8 <__alt_data_end+0xf800b6d8>
1000bb14:	000b883a 	mov	r5,zero
1000bb18:	0011883a 	mov	r8,zero
1000bb1c:	003eee06 	br	1000b6d8 <__alt_data_end+0xf800b6d8>
1000bb20:	00800404 	movi	r2,16
1000bb24:	1007883a 	mov	r3,r2
1000bb28:	003ea606 	br	1000b5c4 <__alt_data_end+0xf800b5c4>
1000bb2c:	00800404 	movi	r2,16
1000bb30:	1007883a 	mov	r3,r2
1000bb34:	003f0106 	br	1000b73c <__alt_data_end+0xf800b73c>
1000bb38:	0005883a 	mov	r2,zero
1000bb3c:	0007883a 	mov	r3,zero
1000bb40:	003efe06 	br	1000b73c <__alt_data_end+0xf800b73c>
1000bb44:	0005883a 	mov	r2,zero
1000bb48:	0007883a 	mov	r3,zero
1000bb4c:	003e9d06 	br	1000b5c4 <__alt_data_end+0xf800b5c4>
1000bb50:	0007883a 	mov	r3,zero
1000bb54:	00800044 	movi	r2,1
1000bb58:	003f3706 	br	1000b838 <__alt_data_end+0xf800b838>
1000bb5c:	80bf832e 	bgeu	r16,r2,1000b96c <__alt_data_end+0xf800b96c>
1000bb60:	8c7fff84 	addi	r17,r17,-2
1000bb64:	8721883a 	add	r16,r16,fp
1000bb68:	003f8106 	br	1000b970 <__alt_data_end+0xf800b970>
1000bb6c:	48bf6a2e 	bgeu	r9,r2,1000b918 <__alt_data_end+0xf800b918>
1000bb70:	a53fff84 	addi	r20,r20,-2
1000bb74:	4f13883a 	add	r9,r9,fp
1000bb78:	003f6806 	br	1000b91c <__alt_data_end+0xf800b91c>
1000bb7c:	1827883a 	mov	r19,r3
1000bb80:	003fd106 	br	1000bac8 <__alt_data_end+0xf800bac8>
1000bb84:	182f883a 	mov	r23,r3
1000bb88:	003fb906 	br	1000ba70 <__alt_data_end+0xf800ba70>
1000bb8c:	843fff84 	addi	r16,r16,-2
1000bb90:	348d883a 	add	r6,r6,r18
1000bb94:	003f0c06 	br	1000b7c8 <__alt_data_end+0xf800b7c8>
1000bb98:	843fff84 	addi	r16,r16,-2
1000bb9c:	1c87883a 	add	r3,r3,r18
1000bba0:	003eac06 	br	1000b654 <__alt_data_end+0xf800b654>

1000bba4 <__umoddi3>:
1000bba4:	defff404 	addi	sp,sp,-48
1000bba8:	dd800815 	stw	r22,32(sp)
1000bbac:	dc400315 	stw	r17,12(sp)
1000bbb0:	dc000215 	stw	r16,8(sp)
1000bbb4:	dfc00b15 	stw	ra,44(sp)
1000bbb8:	df000a15 	stw	fp,40(sp)
1000bbbc:	ddc00915 	stw	r23,36(sp)
1000bbc0:	dd400715 	stw	r21,28(sp)
1000bbc4:	dd000615 	stw	r20,24(sp)
1000bbc8:	dcc00515 	stw	r19,20(sp)
1000bbcc:	dc800415 	stw	r18,16(sp)
1000bbd0:	2021883a 	mov	r16,r4
1000bbd4:	2823883a 	mov	r17,r5
1000bbd8:	282d883a 	mov	r22,r5
1000bbdc:	38003c1e 	bne	r7,zero,1000bcd0 <__umoddi3+0x12c>
1000bbe0:	3027883a 	mov	r19,r6
1000bbe4:	2029883a 	mov	r20,r4
1000bbe8:	2980522e 	bgeu	r5,r6,1000bd34 <__umoddi3+0x190>
1000bbec:	00bfffd4 	movui	r2,65535
1000bbf0:	1180a436 	bltu	r2,r6,1000be84 <__umoddi3+0x2e0>
1000bbf4:	00803fc4 	movi	r2,255
1000bbf8:	11815e2e 	bgeu	r2,r6,1000c174 <__umoddi3+0x5d0>
1000bbfc:	01400204 	movi	r5,8
1000bc00:	2805883a 	mov	r2,r5
1000bc04:	314ad83a 	srl	r5,r6,r5
1000bc08:	00c40074 	movhi	r3,4097
1000bc0c:	18c72604 	addi	r3,r3,7320
1000bc10:	194b883a 	add	r5,r3,r5
1000bc14:	29000003 	ldbu	r4,0(r5)
1000bc18:	2089883a 	add	r4,r4,r2
1000bc1c:	00800804 	movi	r2,32
1000bc20:	1105c83a 	sub	r2,r2,r4
1000bc24:	10010c26 	beq	r2,zero,1000c058 <__umoddi3+0x4b4>
1000bc28:	88a2983a 	sll	r17,r17,r2
1000bc2c:	8108d83a 	srl	r4,r16,r4
1000bc30:	30a6983a 	sll	r19,r6,r2
1000bc34:	80a8983a 	sll	r20,r16,r2
1000bc38:	1025883a 	mov	r18,r2
1000bc3c:	892cb03a 	or	r22,r17,r4
1000bc40:	9822d43a 	srli	r17,r19,16
1000bc44:	b009883a 	mov	r4,r22
1000bc48:	9d7fffcc 	andi	r21,r19,65535
1000bc4c:	880b883a 	mov	r5,r17
1000bc50:	000c2e40 	call	1000c2e4 <__umodsi3>
1000bc54:	b009883a 	mov	r4,r22
1000bc58:	880b883a 	mov	r5,r17
1000bc5c:	102f883a 	mov	r23,r2
1000bc60:	000c2dc0 	call	1000c2dc <__udivsi3>
1000bc64:	1009883a 	mov	r4,r2
1000bc68:	a80b883a 	mov	r5,r21
1000bc6c:	000c2ec0 	call	1000c2ec <__mulsi3>
1000bc70:	b82e943a 	slli	r23,r23,16
1000bc74:	a008d43a 	srli	r4,r20,16
1000bc78:	b906b03a 	or	r3,r23,r4
1000bc7c:	1880042e 	bgeu	r3,r2,1000bc90 <__umoddi3+0xec>
1000bc80:	1cc7883a 	add	r3,r3,r19
1000bc84:	1cc00236 	bltu	r3,r19,1000bc90 <__umoddi3+0xec>
1000bc88:	1880012e 	bgeu	r3,r2,1000bc90 <__umoddi3+0xec>
1000bc8c:	1cc7883a 	add	r3,r3,r19
1000bc90:	18a1c83a 	sub	r16,r3,r2
1000bc94:	8009883a 	mov	r4,r16
1000bc98:	880b883a 	mov	r5,r17
1000bc9c:	000c2e40 	call	1000c2e4 <__umodsi3>
1000bca0:	8009883a 	mov	r4,r16
1000bca4:	880b883a 	mov	r5,r17
1000bca8:	102d883a 	mov	r22,r2
1000bcac:	000c2dc0 	call	1000c2dc <__udivsi3>
1000bcb0:	1009883a 	mov	r4,r2
1000bcb4:	a80b883a 	mov	r5,r21
1000bcb8:	b02c943a 	slli	r22,r22,16
1000bcbc:	000c2ec0 	call	1000c2ec <__mulsi3>
1000bcc0:	a13fffcc 	andi	r4,r20,65535
1000bcc4:	b106b03a 	or	r3,r22,r4
1000bcc8:	1880572e 	bgeu	r3,r2,1000be28 <__umoddi3+0x284>
1000bccc:	00005206 	br	1000be18 <__umoddi3+0x274>
1000bcd0:	29c05936 	bltu	r5,r7,1000be38 <__umoddi3+0x294>
1000bcd4:	00bfffd4 	movui	r2,65535
1000bcd8:	11c0652e 	bgeu	r2,r7,1000be70 <__umoddi3+0x2cc>
1000bcdc:	00804034 	movhi	r2,256
1000bce0:	10bfffc4 	addi	r2,r2,-1
1000bce4:	11c1172e 	bgeu	r2,r7,1000c144 <__umoddi3+0x5a0>
1000bce8:	01400604 	movi	r5,24
1000bcec:	282b883a 	mov	r21,r5
1000bcf0:	394ad83a 	srl	r5,r7,r5
1000bcf4:	00c40074 	movhi	r3,4097
1000bcf8:	18c72604 	addi	r3,r3,7320
1000bcfc:	194b883a 	add	r5,r3,r5
1000bd00:	28800003 	ldbu	r2,0(r5)
1000bd04:	00c00804 	movi	r3,32
1000bd08:	156b883a 	add	r21,r2,r21
1000bd0c:	1d69c83a 	sub	r20,r3,r21
1000bd10:	a000671e 	bne	r20,zero,1000beb0 <__umoddi3+0x30c>
1000bd14:	3c400136 	bltu	r7,r17,1000bd1c <__umoddi3+0x178>
1000bd18:	81812336 	bltu	r16,r6,1000c1a8 <__umoddi3+0x604>
1000bd1c:	8185c83a 	sub	r2,r16,r6
1000bd20:	89e3c83a 	sub	r17,r17,r7
1000bd24:	8087803a 	cmpltu	r3,r16,r2
1000bd28:	88edc83a 	sub	r22,r17,r3
1000bd2c:	b007883a 	mov	r3,r22
1000bd30:	00004306 	br	1000be40 <__umoddi3+0x29c>
1000bd34:	3000041e 	bne	r6,zero,1000bd48 <__umoddi3+0x1a4>
1000bd38:	01000044 	movi	r4,1
1000bd3c:	000b883a 	mov	r5,zero
1000bd40:	000c2dc0 	call	1000c2dc <__udivsi3>
1000bd44:	1027883a 	mov	r19,r2
1000bd48:	00bfffd4 	movui	r2,65535
1000bd4c:	14c0532e 	bgeu	r2,r19,1000be9c <__umoddi3+0x2f8>
1000bd50:	00804034 	movhi	r2,256
1000bd54:	10bfffc4 	addi	r2,r2,-1
1000bd58:	14c1032e 	bgeu	r2,r19,1000c168 <__umoddi3+0x5c4>
1000bd5c:	00800604 	movi	r2,24
1000bd60:	1007883a 	mov	r3,r2
1000bd64:	9884d83a 	srl	r2,r19,r2
1000bd68:	01040074 	movhi	r4,4097
1000bd6c:	21072604 	addi	r4,r4,7320
1000bd70:	2085883a 	add	r2,r4,r2
1000bd74:	11000003 	ldbu	r4,0(r2)
1000bd78:	00800804 	movi	r2,32
1000bd7c:	20c7883a 	add	r3,r4,r3
1000bd80:	10c5c83a 	sub	r2,r2,r3
1000bd84:	1000b61e 	bne	r2,zero,1000c060 <__umoddi3+0x4bc>
1000bd88:	982ad43a 	srli	r21,r19,16
1000bd8c:	8ce3c83a 	sub	r17,r17,r19
1000bd90:	9dbfffcc 	andi	r22,r19,65535
1000bd94:	0025883a 	mov	r18,zero
1000bd98:	8809883a 	mov	r4,r17
1000bd9c:	a80b883a 	mov	r5,r21
1000bda0:	000c2e40 	call	1000c2e4 <__umodsi3>
1000bda4:	8809883a 	mov	r4,r17
1000bda8:	a80b883a 	mov	r5,r21
1000bdac:	102f883a 	mov	r23,r2
1000bdb0:	000c2dc0 	call	1000c2dc <__udivsi3>
1000bdb4:	1009883a 	mov	r4,r2
1000bdb8:	b00b883a 	mov	r5,r22
1000bdbc:	000c2ec0 	call	1000c2ec <__mulsi3>
1000bdc0:	b82e943a 	slli	r23,r23,16
1000bdc4:	a008d43a 	srli	r4,r20,16
1000bdc8:	b906b03a 	or	r3,r23,r4
1000bdcc:	1880032e 	bgeu	r3,r2,1000bddc <__umoddi3+0x238>
1000bdd0:	1cc7883a 	add	r3,r3,r19
1000bdd4:	1cc00136 	bltu	r3,r19,1000bddc <__umoddi3+0x238>
1000bdd8:	1880f136 	bltu	r3,r2,1000c1a0 <__umoddi3+0x5fc>
1000bddc:	18a1c83a 	sub	r16,r3,r2
1000bde0:	8009883a 	mov	r4,r16
1000bde4:	a80b883a 	mov	r5,r21
1000bde8:	000c2e40 	call	1000c2e4 <__umodsi3>
1000bdec:	8009883a 	mov	r4,r16
1000bdf0:	a80b883a 	mov	r5,r21
1000bdf4:	1023883a 	mov	r17,r2
1000bdf8:	000c2dc0 	call	1000c2dc <__udivsi3>
1000bdfc:	1009883a 	mov	r4,r2
1000be00:	b00b883a 	mov	r5,r22
1000be04:	8822943a 	slli	r17,r17,16
1000be08:	000c2ec0 	call	1000c2ec <__mulsi3>
1000be0c:	a13fffcc 	andi	r4,r20,65535
1000be10:	8906b03a 	or	r3,r17,r4
1000be14:	1880042e 	bgeu	r3,r2,1000be28 <__umoddi3+0x284>
1000be18:	1cc7883a 	add	r3,r3,r19
1000be1c:	1cc00236 	bltu	r3,r19,1000be28 <__umoddi3+0x284>
1000be20:	1880012e 	bgeu	r3,r2,1000be28 <__umoddi3+0x284>
1000be24:	1cc7883a 	add	r3,r3,r19
1000be28:	1887c83a 	sub	r3,r3,r2
1000be2c:	1c84d83a 	srl	r2,r3,r18
1000be30:	0007883a 	mov	r3,zero
1000be34:	00000206 	br	1000be40 <__umoddi3+0x29c>
1000be38:	2005883a 	mov	r2,r4
1000be3c:	2807883a 	mov	r3,r5
1000be40:	dfc00b17 	ldw	ra,44(sp)
1000be44:	df000a17 	ldw	fp,40(sp)
1000be48:	ddc00917 	ldw	r23,36(sp)
1000be4c:	dd800817 	ldw	r22,32(sp)
1000be50:	dd400717 	ldw	r21,28(sp)
1000be54:	dd000617 	ldw	r20,24(sp)
1000be58:	dcc00517 	ldw	r19,20(sp)
1000be5c:	dc800417 	ldw	r18,16(sp)
1000be60:	dc400317 	ldw	r17,12(sp)
1000be64:	dc000217 	ldw	r16,8(sp)
1000be68:	dec00c04 	addi	sp,sp,48
1000be6c:	f800283a 	ret
1000be70:	00803fc4 	movi	r2,255
1000be74:	11c0b02e 	bgeu	r2,r7,1000c138 <__umoddi3+0x594>
1000be78:	01400204 	movi	r5,8
1000be7c:	282b883a 	mov	r21,r5
1000be80:	003f9b06 	br	1000bcf0 <__alt_data_end+0xf800bcf0>
1000be84:	00804034 	movhi	r2,256
1000be88:	10bfffc4 	addi	r2,r2,-1
1000be8c:	1180b02e 	bgeu	r2,r6,1000c150 <__umoddi3+0x5ac>
1000be90:	01400604 	movi	r5,24
1000be94:	2805883a 	mov	r2,r5
1000be98:	003f5a06 	br	1000bc04 <__alt_data_end+0xf800bc04>
1000be9c:	00803fc4 	movi	r2,255
1000bea0:	14c0ae2e 	bgeu	r2,r19,1000c15c <__umoddi3+0x5b8>
1000bea4:	00800204 	movi	r2,8
1000bea8:	1007883a 	mov	r3,r2
1000beac:	003fad06 	br	1000bd64 <__alt_data_end+0xf800bd64>
1000beb0:	3d0a983a 	sll	r5,r7,r20
1000beb4:	356cd83a 	srl	r22,r6,r21
1000beb8:	8d78d83a 	srl	fp,r17,r21
1000bebc:	8d10983a 	sll	r8,r17,r20
1000bec0:	2dacb03a 	or	r22,r5,r22
1000bec4:	b02ed43a 	srli	r23,r22,16
1000bec8:	8564d83a 	srl	r18,r16,r21
1000becc:	e009883a 	mov	r4,fp
1000bed0:	b80b883a 	mov	r5,r23
1000bed4:	44a4b03a 	or	r18,r8,r18
1000bed8:	3526983a 	sll	r19,r6,r20
1000bedc:	000c2e40 	call	1000c2e4 <__umodsi3>
1000bee0:	e009883a 	mov	r4,fp
1000bee4:	b80b883a 	mov	r5,r23
1000bee8:	b47fffcc 	andi	r17,r22,65535
1000beec:	d8800015 	stw	r2,0(sp)
1000bef0:	000c2dc0 	call	1000c2dc <__udivsi3>
1000bef4:	1009883a 	mov	r4,r2
1000bef8:	880b883a 	mov	r5,r17
1000befc:	1039883a 	mov	fp,r2
1000bf00:	000c2ec0 	call	1000c2ec <__mulsi3>
1000bf04:	d9800017 	ldw	r6,0(sp)
1000bf08:	9008d43a 	srli	r4,r18,16
1000bf0c:	8520983a 	sll	r16,r16,r20
1000bf10:	300c943a 	slli	r6,r6,16
1000bf14:	3106b03a 	or	r3,r6,r4
1000bf18:	1880042e 	bgeu	r3,r2,1000bf2c <__umoddi3+0x388>
1000bf1c:	1d87883a 	add	r3,r3,r22
1000bf20:	e13fffc4 	addi	r4,fp,-1
1000bf24:	1d809a2e 	bgeu	r3,r22,1000c190 <__umoddi3+0x5ec>
1000bf28:	2039883a 	mov	fp,r4
1000bf2c:	1887c83a 	sub	r3,r3,r2
1000bf30:	1809883a 	mov	r4,r3
1000bf34:	b80b883a 	mov	r5,r23
1000bf38:	d8c00115 	stw	r3,4(sp)
1000bf3c:	000c2e40 	call	1000c2e4 <__umodsi3>
1000bf40:	d8c00117 	ldw	r3,4(sp)
1000bf44:	b80b883a 	mov	r5,r23
1000bf48:	d8800015 	stw	r2,0(sp)
1000bf4c:	1809883a 	mov	r4,r3
1000bf50:	000c2dc0 	call	1000c2dc <__udivsi3>
1000bf54:	880b883a 	mov	r5,r17
1000bf58:	1009883a 	mov	r4,r2
1000bf5c:	102f883a 	mov	r23,r2
1000bf60:	000c2ec0 	call	1000c2ec <__mulsi3>
1000bf64:	d9800017 	ldw	r6,0(sp)
1000bf68:	947fffcc 	andi	r17,r18,65535
1000bf6c:	300c943a 	slli	r6,r6,16
1000bf70:	3464b03a 	or	r18,r6,r17
1000bf74:	9080042e 	bgeu	r18,r2,1000bf88 <__umoddi3+0x3e4>
1000bf78:	95a5883a 	add	r18,r18,r22
1000bf7c:	b8ffffc4 	addi	r3,r23,-1
1000bf80:	95807f2e 	bgeu	r18,r22,1000c180 <__umoddi3+0x5dc>
1000bf84:	182f883a 	mov	r23,r3
1000bf88:	e038943a 	slli	fp,fp,16
1000bf8c:	980cd43a 	srli	r6,r19,16
1000bf90:	98ffffcc 	andi	r3,r19,65535
1000bf94:	bf38b03a 	or	fp,r23,fp
1000bf98:	e02ed43a 	srli	r23,fp,16
1000bf9c:	e73fffcc 	andi	fp,fp,65535
1000bfa0:	180b883a 	mov	r5,r3
1000bfa4:	e009883a 	mov	r4,fp
1000bfa8:	d9800015 	stw	r6,0(sp)
1000bfac:	d8c00115 	stw	r3,4(sp)
1000bfb0:	90a5c83a 	sub	r18,r18,r2
1000bfb4:	000c2ec0 	call	1000c2ec <__mulsi3>
1000bfb8:	d8c00117 	ldw	r3,4(sp)
1000bfbc:	b809883a 	mov	r4,r23
1000bfc0:	1023883a 	mov	r17,r2
1000bfc4:	180b883a 	mov	r5,r3
1000bfc8:	000c2ec0 	call	1000c2ec <__mulsi3>
1000bfcc:	d9800017 	ldw	r6,0(sp)
1000bfd0:	b809883a 	mov	r4,r23
1000bfd4:	d8800115 	stw	r2,4(sp)
1000bfd8:	300b883a 	mov	r5,r6
1000bfdc:	302f883a 	mov	r23,r6
1000bfe0:	000c2ec0 	call	1000c2ec <__mulsi3>
1000bfe4:	e009883a 	mov	r4,fp
1000bfe8:	b80b883a 	mov	r5,r23
1000bfec:	d8800015 	stw	r2,0(sp)
1000bff0:	000c2ec0 	call	1000c2ec <__mulsi3>
1000bff4:	d8c00117 	ldw	r3,4(sp)
1000bff8:	880cd43a 	srli	r6,r17,16
1000bffc:	d9c00017 	ldw	r7,0(sp)
1000c000:	1885883a 	add	r2,r3,r2
1000c004:	118d883a 	add	r6,r2,r6
1000c008:	30c0022e 	bgeu	r6,r3,1000c014 <__umoddi3+0x470>
1000c00c:	00800074 	movhi	r2,1
1000c010:	388f883a 	add	r7,r7,r2
1000c014:	3006d43a 	srli	r3,r6,16
1000c018:	300c943a 	slli	r6,r6,16
1000c01c:	8c7fffcc 	andi	r17,r17,65535
1000c020:	38c7883a 	add	r3,r7,r3
1000c024:	3463883a 	add	r17,r6,r17
1000c028:	90c03d36 	bltu	r18,r3,1000c120 <__umoddi3+0x57c>
1000c02c:	90c06026 	beq	r18,r3,1000c1b0 <__umoddi3+0x60c>
1000c030:	90c9c83a 	sub	r4,r18,r3
1000c034:	880f883a 	mov	r7,r17
1000c038:	81cfc83a 	sub	r7,r16,r7
1000c03c:	81c7803a 	cmpltu	r3,r16,r7
1000c040:	20c7c83a 	sub	r3,r4,r3
1000c044:	1d44983a 	sll	r2,r3,r21
1000c048:	3d0ed83a 	srl	r7,r7,r20
1000c04c:	1d06d83a 	srl	r3,r3,r20
1000c050:	11c4b03a 	or	r2,r2,r7
1000c054:	003f7a06 	br	1000be40 <__alt_data_end+0xf800be40>
1000c058:	0025883a 	mov	r18,zero
1000c05c:	003ef806 	br	1000bc40 <__alt_data_end+0xf800bc40>
1000c060:	98a6983a 	sll	r19,r19,r2
1000c064:	88e8d83a 	srl	r20,r17,r3
1000c068:	80c6d83a 	srl	r3,r16,r3
1000c06c:	982ad43a 	srli	r21,r19,16
1000c070:	88a2983a 	sll	r17,r17,r2
1000c074:	a009883a 	mov	r4,r20
1000c078:	a80b883a 	mov	r5,r21
1000c07c:	88eeb03a 	or	r23,r17,r3
1000c080:	1025883a 	mov	r18,r2
1000c084:	000c2e40 	call	1000c2e4 <__umodsi3>
1000c088:	a009883a 	mov	r4,r20
1000c08c:	a80b883a 	mov	r5,r21
1000c090:	1023883a 	mov	r17,r2
1000c094:	9dbfffcc 	andi	r22,r19,65535
1000c098:	000c2dc0 	call	1000c2dc <__udivsi3>
1000c09c:	1009883a 	mov	r4,r2
1000c0a0:	b00b883a 	mov	r5,r22
1000c0a4:	000c2ec0 	call	1000c2ec <__mulsi3>
1000c0a8:	8822943a 	slli	r17,r17,16
1000c0ac:	b808d43a 	srli	r4,r23,16
1000c0b0:	84a8983a 	sll	r20,r16,r18
1000c0b4:	8906b03a 	or	r3,r17,r4
1000c0b8:	1880042e 	bgeu	r3,r2,1000c0cc <__umoddi3+0x528>
1000c0bc:	1cc7883a 	add	r3,r3,r19
1000c0c0:	1cc00236 	bltu	r3,r19,1000c0cc <__umoddi3+0x528>
1000c0c4:	1880012e 	bgeu	r3,r2,1000c0cc <__umoddi3+0x528>
1000c0c8:	1cc7883a 	add	r3,r3,r19
1000c0cc:	18a1c83a 	sub	r16,r3,r2
1000c0d0:	8009883a 	mov	r4,r16
1000c0d4:	a80b883a 	mov	r5,r21
1000c0d8:	000c2e40 	call	1000c2e4 <__umodsi3>
1000c0dc:	8009883a 	mov	r4,r16
1000c0e0:	a80b883a 	mov	r5,r21
1000c0e4:	1039883a 	mov	fp,r2
1000c0e8:	000c2dc0 	call	1000c2dc <__udivsi3>
1000c0ec:	1009883a 	mov	r4,r2
1000c0f0:	b00b883a 	mov	r5,r22
1000c0f4:	000c2ec0 	call	1000c2ec <__mulsi3>
1000c0f8:	e006943a 	slli	r3,fp,16
1000c0fc:	b93fffcc 	andi	r4,r23,65535
1000c100:	1906b03a 	or	r3,r3,r4
1000c104:	1880042e 	bgeu	r3,r2,1000c118 <__umoddi3+0x574>
1000c108:	1cc7883a 	add	r3,r3,r19
1000c10c:	1cc00236 	bltu	r3,r19,1000c118 <__umoddi3+0x574>
1000c110:	1880012e 	bgeu	r3,r2,1000c118 <__umoddi3+0x574>
1000c114:	1cc7883a 	add	r3,r3,r19
1000c118:	18a3c83a 	sub	r17,r3,r2
1000c11c:	003f1e06 	br	1000bd98 <__alt_data_end+0xf800bd98>
1000c120:	8ccfc83a 	sub	r7,r17,r19
1000c124:	1d89c83a 	sub	r4,r3,r22
1000c128:	89e3803a 	cmpltu	r17,r17,r7
1000c12c:	2463c83a 	sub	r17,r4,r17
1000c130:	9449c83a 	sub	r4,r18,r17
1000c134:	003fc006 	br	1000c038 <__alt_data_end+0xf800c038>
1000c138:	000b883a 	mov	r5,zero
1000c13c:	002b883a 	mov	r21,zero
1000c140:	003eeb06 	br	1000bcf0 <__alt_data_end+0xf800bcf0>
1000c144:	01400404 	movi	r5,16
1000c148:	282b883a 	mov	r21,r5
1000c14c:	003ee806 	br	1000bcf0 <__alt_data_end+0xf800bcf0>
1000c150:	01400404 	movi	r5,16
1000c154:	2805883a 	mov	r2,r5
1000c158:	003eaa06 	br	1000bc04 <__alt_data_end+0xf800bc04>
1000c15c:	0005883a 	mov	r2,zero
1000c160:	0007883a 	mov	r3,zero
1000c164:	003eff06 	br	1000bd64 <__alt_data_end+0xf800bd64>
1000c168:	00800404 	movi	r2,16
1000c16c:	1007883a 	mov	r3,r2
1000c170:	003efc06 	br	1000bd64 <__alt_data_end+0xf800bd64>
1000c174:	000b883a 	mov	r5,zero
1000c178:	0005883a 	mov	r2,zero
1000c17c:	003ea106 	br	1000bc04 <__alt_data_end+0xf800bc04>
1000c180:	90bf802e 	bgeu	r18,r2,1000bf84 <__alt_data_end+0xf800bf84>
1000c184:	bdffff84 	addi	r23,r23,-2
1000c188:	95a5883a 	add	r18,r18,r22
1000c18c:	003f7e06 	br	1000bf88 <__alt_data_end+0xf800bf88>
1000c190:	18bf652e 	bgeu	r3,r2,1000bf28 <__alt_data_end+0xf800bf28>
1000c194:	e73fff84 	addi	fp,fp,-2
1000c198:	1d87883a 	add	r3,r3,r22
1000c19c:	003f6306 	br	1000bf2c <__alt_data_end+0xf800bf2c>
1000c1a0:	1cc7883a 	add	r3,r3,r19
1000c1a4:	003f0d06 	br	1000bddc <__alt_data_end+0xf800bddc>
1000c1a8:	8005883a 	mov	r2,r16
1000c1ac:	003edf06 	br	1000bd2c <__alt_data_end+0xf800bd2c>
1000c1b0:	847fdb36 	bltu	r16,r17,1000c120 <__alt_data_end+0xf800c120>
1000c1b4:	880f883a 	mov	r7,r17
1000c1b8:	0009883a 	mov	r4,zero
1000c1bc:	003f9e06 	br	1000c038 <__alt_data_end+0xf800c038>

1000c1c0 <udivmodsi4>:
1000c1c0:	2900182e 	bgeu	r5,r4,1000c224 <udivmodsi4+0x64>
1000c1c4:	28001716 	blt	r5,zero,1000c224 <udivmodsi4+0x64>
1000c1c8:	00800804 	movi	r2,32
1000c1cc:	00c00044 	movi	r3,1
1000c1d0:	00000206 	br	1000c1dc <udivmodsi4+0x1c>
1000c1d4:	10001126 	beq	r2,zero,1000c21c <udivmodsi4+0x5c>
1000c1d8:	28000516 	blt	r5,zero,1000c1f0 <udivmodsi4+0x30>
1000c1dc:	294b883a 	add	r5,r5,r5
1000c1e0:	10bfffc4 	addi	r2,r2,-1
1000c1e4:	18c7883a 	add	r3,r3,r3
1000c1e8:	293ffa36 	bltu	r5,r4,1000c1d4 <__alt_data_end+0xf800c1d4>
1000c1ec:	18000b26 	beq	r3,zero,1000c21c <udivmodsi4+0x5c>
1000c1f0:	0005883a 	mov	r2,zero
1000c1f4:	21400236 	bltu	r4,r5,1000c200 <udivmodsi4+0x40>
1000c1f8:	2149c83a 	sub	r4,r4,r5
1000c1fc:	10c4b03a 	or	r2,r2,r3
1000c200:	1806d07a 	srli	r3,r3,1
1000c204:	280ad07a 	srli	r5,r5,1
1000c208:	183ffa1e 	bne	r3,zero,1000c1f4 <__alt_data_end+0xf800c1f4>
1000c20c:	3000011e 	bne	r6,zero,1000c214 <udivmodsi4+0x54>
1000c210:	f800283a 	ret
1000c214:	2005883a 	mov	r2,r4
1000c218:	f800283a 	ret
1000c21c:	0005883a 	mov	r2,zero
1000c220:	003ffa06 	br	1000c20c <__alt_data_end+0xf800c20c>
1000c224:	00c00044 	movi	r3,1
1000c228:	003ff106 	br	1000c1f0 <__alt_data_end+0xf800c1f0>

1000c22c <__divsi3>:
1000c22c:	defffe04 	addi	sp,sp,-8
1000c230:	dfc00115 	stw	ra,4(sp)
1000c234:	dc000015 	stw	r16,0(sp)
1000c238:	20000b16 	blt	r4,zero,1000c268 <__divsi3+0x3c>
1000c23c:	0021883a 	mov	r16,zero
1000c240:	28000c16 	blt	r5,zero,1000c274 <__divsi3+0x48>
1000c244:	000d883a 	mov	r6,zero
1000c248:	000c1c00 	call	1000c1c0 <udivmodsi4>
1000c24c:	0407c83a 	sub	r3,zero,r16
1000c250:	1884f03a 	xor	r2,r3,r2
1000c254:	1405883a 	add	r2,r2,r16
1000c258:	dfc00117 	ldw	ra,4(sp)
1000c25c:	dc000017 	ldw	r16,0(sp)
1000c260:	dec00204 	addi	sp,sp,8
1000c264:	f800283a 	ret
1000c268:	0109c83a 	sub	r4,zero,r4
1000c26c:	04000044 	movi	r16,1
1000c270:	283ff40e 	bge	r5,zero,1000c244 <__alt_data_end+0xf800c244>
1000c274:	014bc83a 	sub	r5,zero,r5
1000c278:	8400005c 	xori	r16,r16,1
1000c27c:	003ff106 	br	1000c244 <__alt_data_end+0xf800c244>

1000c280 <__modsi3>:
1000c280:	defffd04 	addi	sp,sp,-12
1000c284:	dfc00215 	stw	ra,8(sp)
1000c288:	dc400115 	stw	r17,4(sp)
1000c28c:	dc000015 	stw	r16,0(sp)
1000c290:	20000c16 	blt	r4,zero,1000c2c4 <__modsi3+0x44>
1000c294:	0023883a 	mov	r17,zero
1000c298:	0021883a 	mov	r16,zero
1000c29c:	28000d16 	blt	r5,zero,1000c2d4 <__modsi3+0x54>
1000c2a0:	01800044 	movi	r6,1
1000c2a4:	000c1c00 	call	1000c1c0 <udivmodsi4>
1000c2a8:	1404f03a 	xor	r2,r2,r16
1000c2ac:	8885883a 	add	r2,r17,r2
1000c2b0:	dfc00217 	ldw	ra,8(sp)
1000c2b4:	dc400117 	ldw	r17,4(sp)
1000c2b8:	dc000017 	ldw	r16,0(sp)
1000c2bc:	dec00304 	addi	sp,sp,12
1000c2c0:	f800283a 	ret
1000c2c4:	0109c83a 	sub	r4,zero,r4
1000c2c8:	04400044 	movi	r17,1
1000c2cc:	043fffc4 	movi	r16,-1
1000c2d0:	283ff30e 	bge	r5,zero,1000c2a0 <__alt_data_end+0xf800c2a0>
1000c2d4:	014bc83a 	sub	r5,zero,r5
1000c2d8:	003ff106 	br	1000c2a0 <__alt_data_end+0xf800c2a0>

1000c2dc <__udivsi3>:
1000c2dc:	000d883a 	mov	r6,zero
1000c2e0:	000c1c01 	jmpi	1000c1c0 <udivmodsi4>

1000c2e4 <__umodsi3>:
1000c2e4:	01800044 	movi	r6,1
1000c2e8:	000c1c01 	jmpi	1000c1c0 <udivmodsi4>

1000c2ec <__mulsi3>:
1000c2ec:	0005883a 	mov	r2,zero
1000c2f0:	20000726 	beq	r4,zero,1000c310 <__mulsi3+0x24>
1000c2f4:	20c0004c 	andi	r3,r4,1
1000c2f8:	2008d07a 	srli	r4,r4,1
1000c2fc:	18000126 	beq	r3,zero,1000c304 <__mulsi3+0x18>
1000c300:	1145883a 	add	r2,r2,r5
1000c304:	294b883a 	add	r5,r5,r5
1000c308:	203ffa1e 	bne	r4,zero,1000c2f4 <__alt_data_end+0xf800c2f4>
1000c30c:	f800283a 	ret
1000c310:	f800283a 	ret

1000c314 <__adddf3>:
1000c314:	02000434 	movhi	r8,16
1000c318:	423fffc4 	addi	r8,r8,-1
1000c31c:	defffb04 	addi	sp,sp,-20
1000c320:	2a12703a 	and	r9,r5,r8
1000c324:	2806d7fa 	srli	r3,r5,31
1000c328:	3a10703a 	and	r8,r7,r8
1000c32c:	3804d53a 	srli	r2,r7,20
1000c330:	3014d77a 	srli	r10,r6,29
1000c334:	dc000015 	stw	r16,0(sp)
1000c338:	481290fa 	slli	r9,r9,3
1000c33c:	2820d53a 	srli	r16,r5,20
1000c340:	401090fa 	slli	r8,r8,3
1000c344:	200ad77a 	srli	r5,r4,29
1000c348:	380ed7fa 	srli	r7,r7,31
1000c34c:	dc800215 	stw	r18,8(sp)
1000c350:	dc400115 	stw	r17,4(sp)
1000c354:	dfc00415 	stw	ra,16(sp)
1000c358:	dcc00315 	stw	r19,12(sp)
1000c35c:	1c803fcc 	andi	r18,r3,255
1000c360:	8401ffcc 	andi	r16,r16,2047
1000c364:	494ab03a 	or	r5,r9,r5
1000c368:	202290fa 	slli	r17,r4,3
1000c36c:	1081ffcc 	andi	r2,r2,2047
1000c370:	4290b03a 	or	r8,r8,r10
1000c374:	300c90fa 	slli	r6,r6,3
1000c378:	91c07026 	beq	r18,r7,1000c53c <__adddf3+0x228>
1000c37c:	8087c83a 	sub	r3,r16,r2
1000c380:	00c0b30e 	bge	zero,r3,1000c650 <__adddf3+0x33c>
1000c384:	10002a1e 	bne	r2,zero,1000c430 <__adddf3+0x11c>
1000c388:	4184b03a 	or	r2,r8,r6
1000c38c:	1000991e 	bne	r2,zero,1000c5f4 <__adddf3+0x2e0>
1000c390:	888001cc 	andi	r2,r17,7
1000c394:	10005b26 	beq	r2,zero,1000c504 <__adddf3+0x1f0>
1000c398:	88c003cc 	andi	r3,r17,15
1000c39c:	00800104 	movi	r2,4
1000c3a0:	18805826 	beq	r3,r2,1000c504 <__adddf3+0x1f0>
1000c3a4:	89800104 	addi	r6,r17,4
1000c3a8:	3463803a 	cmpltu	r17,r6,r17
1000c3ac:	2c4b883a 	add	r5,r5,r17
1000c3b0:	2880202c 	andhi	r2,r5,128
1000c3b4:	9007883a 	mov	r3,r18
1000c3b8:	3023883a 	mov	r17,r6
1000c3bc:	10005426 	beq	r2,zero,1000c510 <__adddf3+0x1fc>
1000c3c0:	84000044 	addi	r16,r16,1
1000c3c4:	0081ffc4 	movi	r2,2047
1000c3c8:	8080c126 	beq	r16,r2,1000c6d0 <__adddf3+0x3bc>
1000c3cc:	013fe034 	movhi	r4,65408
1000c3d0:	213fffc4 	addi	r4,r4,-1
1000c3d4:	290a703a 	and	r5,r5,r4
1000c3d8:	2804977a 	slli	r2,r5,29
1000c3dc:	280a927a 	slli	r5,r5,9
1000c3e0:	8822d0fa 	srli	r17,r17,3
1000c3e4:	8401ffcc 	andi	r16,r16,2047
1000c3e8:	2808d33a 	srli	r4,r5,12
1000c3ec:	1444b03a 	or	r2,r2,r17
1000c3f0:	8401ffcc 	andi	r16,r16,2047
1000c3f4:	800a953a 	slli	r5,r16,20
1000c3f8:	18c03fcc 	andi	r3,r3,255
1000c3fc:	04000434 	movhi	r16,16
1000c400:	180697fa 	slli	r3,r3,31
1000c404:	843fffc4 	addi	r16,r16,-1
1000c408:	2420703a 	and	r16,r4,r16
1000c40c:	8160b03a 	or	r16,r16,r5
1000c410:	80c6b03a 	or	r3,r16,r3
1000c414:	dfc00417 	ldw	ra,16(sp)
1000c418:	dcc00317 	ldw	r19,12(sp)
1000c41c:	dc800217 	ldw	r18,8(sp)
1000c420:	dc400117 	ldw	r17,4(sp)
1000c424:	dc000017 	ldw	r16,0(sp)
1000c428:	dec00504 	addi	sp,sp,20
1000c42c:	f800283a 	ret
1000c430:	0081ffc4 	movi	r2,2047
1000c434:	80bfd626 	beq	r16,r2,1000c390 <__alt_data_end+0xf800c390>
1000c438:	42002034 	orhi	r8,r8,128
1000c43c:	00800e04 	movi	r2,56
1000c440:	10c0a616 	blt	r2,r3,1000c6dc <__adddf3+0x3c8>
1000c444:	008007c4 	movi	r2,31
1000c448:	10c0c916 	blt	r2,r3,1000c770 <__adddf3+0x45c>
1000c44c:	00800804 	movi	r2,32
1000c450:	10c5c83a 	sub	r2,r2,r3
1000c454:	408e983a 	sll	r7,r8,r2
1000c458:	30c8d83a 	srl	r4,r6,r3
1000c45c:	3084983a 	sll	r2,r6,r2
1000c460:	40c6d83a 	srl	r3,r8,r3
1000c464:	390cb03a 	or	r6,r7,r4
1000c468:	1004c03a 	cmpne	r2,r2,zero
1000c46c:	308cb03a 	or	r6,r6,r2
1000c470:	898dc83a 	sub	r6,r17,r6
1000c474:	89a3803a 	cmpltu	r17,r17,r6
1000c478:	28cbc83a 	sub	r5,r5,r3
1000c47c:	2c4bc83a 	sub	r5,r5,r17
1000c480:	3023883a 	mov	r17,r6
1000c484:	2880202c 	andhi	r2,r5,128
1000c488:	10006d26 	beq	r2,zero,1000c640 <__adddf3+0x32c>
1000c48c:	04c02034 	movhi	r19,128
1000c490:	9cffffc4 	addi	r19,r19,-1
1000c494:	2ce6703a 	and	r19,r5,r19
1000c498:	98007e26 	beq	r19,zero,1000c694 <__adddf3+0x380>
1000c49c:	9809883a 	mov	r4,r19
1000c4a0:	000eaac0 	call	1000eaac <__clzsi2>
1000c4a4:	10fffe04 	addi	r3,r2,-8
1000c4a8:	010007c4 	movi	r4,31
1000c4ac:	20c07f16 	blt	r4,r3,1000c6ac <__adddf3+0x398>
1000c4b0:	01400a04 	movi	r5,40
1000c4b4:	2885c83a 	sub	r2,r5,r2
1000c4b8:	888ad83a 	srl	r5,r17,r2
1000c4bc:	98e6983a 	sll	r19,r19,r3
1000c4c0:	88e2983a 	sll	r17,r17,r3
1000c4c4:	2ce6b03a 	or	r19,r5,r19
1000c4c8:	1c007c16 	blt	r3,r16,1000c6bc <__adddf3+0x3a8>
1000c4cc:	1c21c83a 	sub	r16,r3,r16
1000c4d0:	81400044 	addi	r5,r16,1
1000c4d4:	00c007c4 	movi	r3,31
1000c4d8:	19409816 	blt	r3,r5,1000c73c <__adddf3+0x428>
1000c4dc:	1c21c83a 	sub	r16,r3,r16
1000c4e0:	8c08983a 	sll	r4,r17,r16
1000c4e4:	8946d83a 	srl	r3,r17,r5
1000c4e8:	9c20983a 	sll	r16,r19,r16
1000c4ec:	2008c03a 	cmpne	r4,r4,zero
1000c4f0:	994ad83a 	srl	r5,r19,r5
1000c4f4:	1c06b03a 	or	r3,r3,r16
1000c4f8:	1922b03a 	or	r17,r3,r4
1000c4fc:	0021883a 	mov	r16,zero
1000c500:	003fa306 	br	1000c390 <__alt_data_end+0xf800c390>
1000c504:	2880202c 	andhi	r2,r5,128
1000c508:	9007883a 	mov	r3,r18
1000c50c:	103fac1e 	bne	r2,zero,1000c3c0 <__alt_data_end+0xf800c3c0>
1000c510:	2804977a 	slli	r2,r5,29
1000c514:	8822d0fa 	srli	r17,r17,3
1000c518:	0101ffc4 	movi	r4,2047
1000c51c:	280ad0fa 	srli	r5,r5,3
1000c520:	1444b03a 	or	r2,r2,r17
1000c524:	81002c26 	beq	r16,r4,1000c5d8 <__adddf3+0x2c4>
1000c528:	8120703a 	and	r16,r16,r4
1000c52c:	01000434 	movhi	r4,16
1000c530:	213fffc4 	addi	r4,r4,-1
1000c534:	2908703a 	and	r4,r5,r4
1000c538:	003fad06 	br	1000c3f0 <__alt_data_end+0xf800c3f0>
1000c53c:	8089c83a 	sub	r4,r16,r2
1000c540:	01006a0e 	bge	zero,r4,1000c6ec <__adddf3+0x3d8>
1000c544:	10003326 	beq	r2,zero,1000c614 <__adddf3+0x300>
1000c548:	0081ffc4 	movi	r2,2047
1000c54c:	80bf9026 	beq	r16,r2,1000c390 <__alt_data_end+0xf800c390>
1000c550:	42002034 	orhi	r8,r8,128
1000c554:	00800e04 	movi	r2,56
1000c558:	1100b116 	blt	r2,r4,1000c820 <__adddf3+0x50c>
1000c55c:	008007c4 	movi	r2,31
1000c560:	1100e216 	blt	r2,r4,1000c8ec <__adddf3+0x5d8>
1000c564:	00800804 	movi	r2,32
1000c568:	1105c83a 	sub	r2,r2,r4
1000c56c:	4092983a 	sll	r9,r8,r2
1000c570:	310ed83a 	srl	r7,r6,r4
1000c574:	3084983a 	sll	r2,r6,r2
1000c578:	4110d83a 	srl	r8,r8,r4
1000c57c:	49ccb03a 	or	r6,r9,r7
1000c580:	1004c03a 	cmpne	r2,r2,zero
1000c584:	308cb03a 	or	r6,r6,r2
1000c588:	344d883a 	add	r6,r6,r17
1000c58c:	3463803a 	cmpltu	r17,r6,r17
1000c590:	414b883a 	add	r5,r8,r5
1000c594:	2c4b883a 	add	r5,r5,r17
1000c598:	3023883a 	mov	r17,r6
1000c59c:	2880202c 	andhi	r2,r5,128
1000c5a0:	10002726 	beq	r2,zero,1000c640 <__adddf3+0x32c>
1000c5a4:	84000044 	addi	r16,r16,1
1000c5a8:	0081ffc4 	movi	r2,2047
1000c5ac:	8080ae26 	beq	r16,r2,1000c868 <__adddf3+0x554>
1000c5b0:	00bfe034 	movhi	r2,65408
1000c5b4:	10bfffc4 	addi	r2,r2,-1
1000c5b8:	288a703a 	and	r5,r5,r2
1000c5bc:	880cd07a 	srli	r6,r17,1
1000c5c0:	280897fa 	slli	r4,r5,31
1000c5c4:	88c0004c 	andi	r3,r17,1
1000c5c8:	30e2b03a 	or	r17,r6,r3
1000c5cc:	280ad07a 	srli	r5,r5,1
1000c5d0:	8922b03a 	or	r17,r17,r4
1000c5d4:	003f6e06 	br	1000c390 <__alt_data_end+0xf800c390>
1000c5d8:	1148b03a 	or	r4,r2,r5
1000c5dc:	20003c26 	beq	r4,zero,1000c6d0 <__adddf3+0x3bc>
1000c5e0:	29000234 	orhi	r4,r5,8
1000c5e4:	01400434 	movhi	r5,16
1000c5e8:	297fffc4 	addi	r5,r5,-1
1000c5ec:	2148703a 	and	r4,r4,r5
1000c5f0:	003f7f06 	br	1000c3f0 <__alt_data_end+0xf800c3f0>
1000c5f4:	18ffffc4 	addi	r3,r3,-1
1000c5f8:	18004d1e 	bne	r3,zero,1000c730 <__adddf3+0x41c>
1000c5fc:	898dc83a 	sub	r6,r17,r6
1000c600:	89a3803a 	cmpltu	r17,r17,r6
1000c604:	2a0bc83a 	sub	r5,r5,r8
1000c608:	2c4bc83a 	sub	r5,r5,r17
1000c60c:	3023883a 	mov	r17,r6
1000c610:	003f9c06 	br	1000c484 <__alt_data_end+0xf800c484>
1000c614:	4184b03a 	or	r2,r8,r6
1000c618:	103f5d26 	beq	r2,zero,1000c390 <__alt_data_end+0xf800c390>
1000c61c:	213fffc4 	addi	r4,r4,-1
1000c620:	203fd926 	beq	r4,zero,1000c588 <__alt_data_end+0xf800c588>
1000c624:	0081ffc4 	movi	r2,2047
1000c628:	80bfca1e 	bne	r16,r2,1000c554 <__alt_data_end+0xf800c554>
1000c62c:	003f5806 	br	1000c390 <__alt_data_end+0xf800c390>
1000c630:	10c8b03a 	or	r4,r2,r3
1000c634:	20008b26 	beq	r4,zero,1000c864 <__adddf3+0x550>
1000c638:	100b883a 	mov	r5,r2
1000c63c:	1823883a 	mov	r17,r3
1000c640:	888001cc 	andi	r2,r17,7
1000c644:	103f541e 	bne	r2,zero,1000c398 <__alt_data_end+0xf800c398>
1000c648:	9007883a 	mov	r3,r18
1000c64c:	003fb006 	br	1000c510 <__alt_data_end+0xf800c510>
1000c650:	1800531e 	bne	r3,zero,1000c7a0 <__adddf3+0x48c>
1000c654:	80800044 	addi	r2,r16,1
1000c658:	1081ffcc 	andi	r2,r2,2047
1000c65c:	00c00044 	movi	r3,1
1000c660:	1880990e 	bge	r3,r2,1000c8c8 <__adddf3+0x5b4>
1000c664:	8985c83a 	sub	r2,r17,r6
1000c668:	8887803a 	cmpltu	r3,r17,r2
1000c66c:	2a27c83a 	sub	r19,r5,r8
1000c670:	98e7c83a 	sub	r19,r19,r3
1000c674:	98c0202c 	andhi	r3,r19,128
1000c678:	18006226 	beq	r3,zero,1000c804 <__adddf3+0x4f0>
1000c67c:	3463c83a 	sub	r17,r6,r17
1000c680:	4151c83a 	sub	r8,r8,r5
1000c684:	344d803a 	cmpltu	r6,r6,r17
1000c688:	41a7c83a 	sub	r19,r8,r6
1000c68c:	3825883a 	mov	r18,r7
1000c690:	983f821e 	bne	r19,zero,1000c49c <__alt_data_end+0xf800c49c>
1000c694:	8809883a 	mov	r4,r17
1000c698:	000eaac0 	call	1000eaac <__clzsi2>
1000c69c:	10800804 	addi	r2,r2,32
1000c6a0:	10fffe04 	addi	r3,r2,-8
1000c6a4:	010007c4 	movi	r4,31
1000c6a8:	20ff810e 	bge	r4,r3,1000c4b0 <__alt_data_end+0xf800c4b0>
1000c6ac:	14fff604 	addi	r19,r2,-40
1000c6b0:	8ce6983a 	sll	r19,r17,r19
1000c6b4:	0023883a 	mov	r17,zero
1000c6b8:	1c3f840e 	bge	r3,r16,1000c4cc <__alt_data_end+0xf800c4cc>
1000c6bc:	017fe034 	movhi	r5,65408
1000c6c0:	297fffc4 	addi	r5,r5,-1
1000c6c4:	80e1c83a 	sub	r16,r16,r3
1000c6c8:	994a703a 	and	r5,r19,r5
1000c6cc:	003f3006 	br	1000c390 <__alt_data_end+0xf800c390>
1000c6d0:	0009883a 	mov	r4,zero
1000c6d4:	0005883a 	mov	r2,zero
1000c6d8:	003f4506 	br	1000c3f0 <__alt_data_end+0xf800c3f0>
1000c6dc:	418cb03a 	or	r6,r8,r6
1000c6e0:	300cc03a 	cmpne	r6,r6,zero
1000c6e4:	0007883a 	mov	r3,zero
1000c6e8:	003f6106 	br	1000c470 <__alt_data_end+0xf800c470>
1000c6ec:	2000921e 	bne	r4,zero,1000c938 <__adddf3+0x624>
1000c6f0:	80800044 	addi	r2,r16,1
1000c6f4:	11c1ffcc 	andi	r7,r2,2047
1000c6f8:	01000044 	movi	r4,1
1000c6fc:	21c0610e 	bge	r4,r7,1000c884 <__adddf3+0x570>
1000c700:	0101ffc4 	movi	r4,2047
1000c704:	1100a326 	beq	r2,r4,1000c994 <__adddf3+0x680>
1000c708:	344d883a 	add	r6,r6,r17
1000c70c:	3463803a 	cmpltu	r17,r6,r17
1000c710:	414b883a 	add	r5,r8,r5
1000c714:	2c4b883a 	add	r5,r5,r17
1000c718:	282297fa 	slli	r17,r5,31
1000c71c:	300cd07a 	srli	r6,r6,1
1000c720:	280ad07a 	srli	r5,r5,1
1000c724:	1021883a 	mov	r16,r2
1000c728:	89a2b03a 	or	r17,r17,r6
1000c72c:	003f1806 	br	1000c390 <__alt_data_end+0xf800c390>
1000c730:	0081ffc4 	movi	r2,2047
1000c734:	80bf411e 	bne	r16,r2,1000c43c <__alt_data_end+0xf800c43c>
1000c738:	003f1506 	br	1000c390 <__alt_data_end+0xf800c390>
1000c73c:	80bff844 	addi	r2,r16,-31
1000c740:	00c00804 	movi	r3,32
1000c744:	9884d83a 	srl	r2,r19,r2
1000c748:	28c04a26 	beq	r5,r3,1000c874 <__adddf3+0x560>
1000c74c:	00c00fc4 	movi	r3,63
1000c750:	1c21c83a 	sub	r16,r3,r16
1000c754:	9c26983a 	sll	r19,r19,r16
1000c758:	9c62b03a 	or	r17,r19,r17
1000c75c:	8822c03a 	cmpne	r17,r17,zero
1000c760:	88a2b03a 	or	r17,r17,r2
1000c764:	000b883a 	mov	r5,zero
1000c768:	0021883a 	mov	r16,zero
1000c76c:	003fb406 	br	1000c640 <__alt_data_end+0xf800c640>
1000c770:	18bff804 	addi	r2,r3,-32
1000c774:	01000804 	movi	r4,32
1000c778:	4084d83a 	srl	r2,r8,r2
1000c77c:	19003f26 	beq	r3,r4,1000c87c <__adddf3+0x568>
1000c780:	01001004 	movi	r4,64
1000c784:	20c7c83a 	sub	r3,r4,r3
1000c788:	40d0983a 	sll	r8,r8,r3
1000c78c:	418cb03a 	or	r6,r8,r6
1000c790:	300cc03a 	cmpne	r6,r6,zero
1000c794:	308cb03a 	or	r6,r6,r2
1000c798:	0007883a 	mov	r3,zero
1000c79c:	003f3406 	br	1000c470 <__alt_data_end+0xf800c470>
1000c7a0:	80002326 	beq	r16,zero,1000c830 <__adddf3+0x51c>
1000c7a4:	0101ffc4 	movi	r4,2047
1000c7a8:	11005e26 	beq	r2,r4,1000c924 <__adddf3+0x610>
1000c7ac:	00c7c83a 	sub	r3,zero,r3
1000c7b0:	29402034 	orhi	r5,r5,128
1000c7b4:	01000e04 	movi	r4,56
1000c7b8:	20c07216 	blt	r4,r3,1000c984 <__adddf3+0x670>
1000c7bc:	010007c4 	movi	r4,31
1000c7c0:	20c0ce16 	blt	r4,r3,1000cafc <__adddf3+0x7e8>
1000c7c4:	01000804 	movi	r4,32
1000c7c8:	20c9c83a 	sub	r4,r4,r3
1000c7cc:	2914983a 	sll	r10,r5,r4
1000c7d0:	88d2d83a 	srl	r9,r17,r3
1000c7d4:	8908983a 	sll	r4,r17,r4
1000c7d8:	28c6d83a 	srl	r3,r5,r3
1000c7dc:	5262b03a 	or	r17,r10,r9
1000c7e0:	2008c03a 	cmpne	r4,r4,zero
1000c7e4:	8922b03a 	or	r17,r17,r4
1000c7e8:	3463c83a 	sub	r17,r6,r17
1000c7ec:	40c7c83a 	sub	r3,r8,r3
1000c7f0:	344d803a 	cmpltu	r6,r6,r17
1000c7f4:	198bc83a 	sub	r5,r3,r6
1000c7f8:	1021883a 	mov	r16,r2
1000c7fc:	3825883a 	mov	r18,r7
1000c800:	003f2006 	br	1000c484 <__alt_data_end+0xf800c484>
1000c804:	9886b03a 	or	r3,r19,r2
1000c808:	1800141e 	bne	r3,zero,1000c85c <__adddf3+0x548>
1000c80c:	0007883a 	mov	r3,zero
1000c810:	000b883a 	mov	r5,zero
1000c814:	0023883a 	mov	r17,zero
1000c818:	0021883a 	mov	r16,zero
1000c81c:	003f3c06 	br	1000c510 <__alt_data_end+0xf800c510>
1000c820:	418cb03a 	or	r6,r8,r6
1000c824:	300cc03a 	cmpne	r6,r6,zero
1000c828:	0011883a 	mov	r8,zero
1000c82c:	003f5606 	br	1000c588 <__alt_data_end+0xf800c588>
1000c830:	2c48b03a 	or	r4,r5,r17
1000c834:	20003b26 	beq	r4,zero,1000c924 <__adddf3+0x610>
1000c838:	00c6303a 	nor	r3,zero,r3
1000c83c:	1800371e 	bne	r3,zero,1000c91c <__adddf3+0x608>
1000c840:	3463c83a 	sub	r17,r6,r17
1000c844:	414bc83a 	sub	r5,r8,r5
1000c848:	344d803a 	cmpltu	r6,r6,r17
1000c84c:	298bc83a 	sub	r5,r5,r6
1000c850:	1021883a 	mov	r16,r2
1000c854:	3825883a 	mov	r18,r7
1000c858:	003f0a06 	br	1000c484 <__alt_data_end+0xf800c484>
1000c85c:	1023883a 	mov	r17,r2
1000c860:	003f0d06 	br	1000c498 <__alt_data_end+0xf800c498>
1000c864:	0007883a 	mov	r3,zero
1000c868:	000b883a 	mov	r5,zero
1000c86c:	0023883a 	mov	r17,zero
1000c870:	003f2706 	br	1000c510 <__alt_data_end+0xf800c510>
1000c874:	0027883a 	mov	r19,zero
1000c878:	003fb706 	br	1000c758 <__alt_data_end+0xf800c758>
1000c87c:	0011883a 	mov	r8,zero
1000c880:	003fc206 	br	1000c78c <__alt_data_end+0xf800c78c>
1000c884:	2c44b03a 	or	r2,r5,r17
1000c888:	8000871e 	bne	r16,zero,1000caa8 <__adddf3+0x794>
1000c88c:	1000b126 	beq	r2,zero,1000cb54 <__adddf3+0x840>
1000c890:	4184b03a 	or	r2,r8,r6
1000c894:	103ebe26 	beq	r2,zero,1000c390 <__alt_data_end+0xf800c390>
1000c898:	3445883a 	add	r2,r6,r17
1000c89c:	1463803a 	cmpltu	r17,r2,r17
1000c8a0:	414b883a 	add	r5,r8,r5
1000c8a4:	2c4b883a 	add	r5,r5,r17
1000c8a8:	28c0202c 	andhi	r3,r5,128
1000c8ac:	1023883a 	mov	r17,r2
1000c8b0:	183f6326 	beq	r3,zero,1000c640 <__alt_data_end+0xf800c640>
1000c8b4:	00bfe034 	movhi	r2,65408
1000c8b8:	10bfffc4 	addi	r2,r2,-1
1000c8bc:	2021883a 	mov	r16,r4
1000c8c0:	288a703a 	and	r5,r5,r2
1000c8c4:	003eb206 	br	1000c390 <__alt_data_end+0xf800c390>
1000c8c8:	2c44b03a 	or	r2,r5,r17
1000c8cc:	8000251e 	bne	r16,zero,1000c964 <__adddf3+0x650>
1000c8d0:	10004b1e 	bne	r2,zero,1000ca00 <__adddf3+0x6ec>
1000c8d4:	4184b03a 	or	r2,r8,r6
1000c8d8:	103fe226 	beq	r2,zero,1000c864 <__alt_data_end+0xf800c864>
1000c8dc:	400b883a 	mov	r5,r8
1000c8e0:	3023883a 	mov	r17,r6
1000c8e4:	3825883a 	mov	r18,r7
1000c8e8:	003ea906 	br	1000c390 <__alt_data_end+0xf800c390>
1000c8ec:	20bff804 	addi	r2,r4,-32
1000c8f0:	01c00804 	movi	r7,32
1000c8f4:	4084d83a 	srl	r2,r8,r2
1000c8f8:	21c07e26 	beq	r4,r7,1000caf4 <__adddf3+0x7e0>
1000c8fc:	01c01004 	movi	r7,64
1000c900:	3909c83a 	sub	r4,r7,r4
1000c904:	4110983a 	sll	r8,r8,r4
1000c908:	418cb03a 	or	r6,r8,r6
1000c90c:	300cc03a 	cmpne	r6,r6,zero
1000c910:	308cb03a 	or	r6,r6,r2
1000c914:	0011883a 	mov	r8,zero
1000c918:	003f1b06 	br	1000c588 <__alt_data_end+0xf800c588>
1000c91c:	0101ffc4 	movi	r4,2047
1000c920:	113fa41e 	bne	r2,r4,1000c7b4 <__alt_data_end+0xf800c7b4>
1000c924:	400b883a 	mov	r5,r8
1000c928:	3023883a 	mov	r17,r6
1000c92c:	1021883a 	mov	r16,r2
1000c930:	3825883a 	mov	r18,r7
1000c934:	003e9606 	br	1000c390 <__alt_data_end+0xf800c390>
1000c938:	80001a1e 	bne	r16,zero,1000c9a4 <__adddf3+0x690>
1000c93c:	2c4eb03a 	or	r7,r5,r17
1000c940:	38005526 	beq	r7,zero,1000ca98 <__adddf3+0x784>
1000c944:	0108303a 	nor	r4,zero,r4
1000c948:	2000511e 	bne	r4,zero,1000ca90 <__adddf3+0x77c>
1000c94c:	89a3883a 	add	r17,r17,r6
1000c950:	414b883a 	add	r5,r8,r5
1000c954:	898d803a 	cmpltu	r6,r17,r6
1000c958:	298b883a 	add	r5,r5,r6
1000c95c:	1021883a 	mov	r16,r2
1000c960:	003f0e06 	br	1000c59c <__alt_data_end+0xf800c59c>
1000c964:	1000341e 	bne	r2,zero,1000ca38 <__adddf3+0x724>
1000c968:	4184b03a 	or	r2,r8,r6
1000c96c:	10006f26 	beq	r2,zero,1000cb2c <__adddf3+0x818>
1000c970:	400b883a 	mov	r5,r8
1000c974:	3023883a 	mov	r17,r6
1000c978:	3825883a 	mov	r18,r7
1000c97c:	0401ffc4 	movi	r16,2047
1000c980:	003e8306 	br	1000c390 <__alt_data_end+0xf800c390>
1000c984:	2c62b03a 	or	r17,r5,r17
1000c988:	8822c03a 	cmpne	r17,r17,zero
1000c98c:	0007883a 	mov	r3,zero
1000c990:	003f9506 	br	1000c7e8 <__alt_data_end+0xf800c7e8>
1000c994:	1021883a 	mov	r16,r2
1000c998:	000b883a 	mov	r5,zero
1000c99c:	0023883a 	mov	r17,zero
1000c9a0:	003edb06 	br	1000c510 <__alt_data_end+0xf800c510>
1000c9a4:	01c1ffc4 	movi	r7,2047
1000c9a8:	11c03b26 	beq	r2,r7,1000ca98 <__adddf3+0x784>
1000c9ac:	0109c83a 	sub	r4,zero,r4
1000c9b0:	29402034 	orhi	r5,r5,128
1000c9b4:	01c00e04 	movi	r7,56
1000c9b8:	39006216 	blt	r7,r4,1000cb44 <__adddf3+0x830>
1000c9bc:	01c007c4 	movi	r7,31
1000c9c0:	39006b16 	blt	r7,r4,1000cb70 <__adddf3+0x85c>
1000c9c4:	01c00804 	movi	r7,32
1000c9c8:	390fc83a 	sub	r7,r7,r4
1000c9cc:	29d4983a 	sll	r10,r5,r7
1000c9d0:	8912d83a 	srl	r9,r17,r4
1000c9d4:	89ce983a 	sll	r7,r17,r7
1000c9d8:	2908d83a 	srl	r4,r5,r4
1000c9dc:	5262b03a 	or	r17,r10,r9
1000c9e0:	380ac03a 	cmpne	r5,r7,zero
1000c9e4:	8962b03a 	or	r17,r17,r5
1000c9e8:	89a3883a 	add	r17,r17,r6
1000c9ec:	2211883a 	add	r8,r4,r8
1000c9f0:	898d803a 	cmpltu	r6,r17,r6
1000c9f4:	418b883a 	add	r5,r8,r6
1000c9f8:	1021883a 	mov	r16,r2
1000c9fc:	003ee706 	br	1000c59c <__alt_data_end+0xf800c59c>
1000ca00:	4184b03a 	or	r2,r8,r6
1000ca04:	103e6226 	beq	r2,zero,1000c390 <__alt_data_end+0xf800c390>
1000ca08:	8987c83a 	sub	r3,r17,r6
1000ca0c:	88c9803a 	cmpltu	r4,r17,r3
1000ca10:	2a05c83a 	sub	r2,r5,r8
1000ca14:	1105c83a 	sub	r2,r2,r4
1000ca18:	1100202c 	andhi	r4,r2,128
1000ca1c:	203f0426 	beq	r4,zero,1000c630 <__alt_data_end+0xf800c630>
1000ca20:	3463c83a 	sub	r17,r6,r17
1000ca24:	414bc83a 	sub	r5,r8,r5
1000ca28:	344d803a 	cmpltu	r6,r6,r17
1000ca2c:	298bc83a 	sub	r5,r5,r6
1000ca30:	3825883a 	mov	r18,r7
1000ca34:	003e5606 	br	1000c390 <__alt_data_end+0xf800c390>
1000ca38:	4184b03a 	or	r2,r8,r6
1000ca3c:	10002b26 	beq	r2,zero,1000caec <__adddf3+0x7d8>
1000ca40:	2804d0fa 	srli	r2,r5,3
1000ca44:	8822d0fa 	srli	r17,r17,3
1000ca48:	280a977a 	slli	r5,r5,29
1000ca4c:	10c0022c 	andhi	r3,r2,8
1000ca50:	2c62b03a 	or	r17,r5,r17
1000ca54:	18000826 	beq	r3,zero,1000ca78 <__adddf3+0x764>
1000ca58:	4008d0fa 	srli	r4,r8,3
1000ca5c:	20c0022c 	andhi	r3,r4,8
1000ca60:	1800051e 	bne	r3,zero,1000ca78 <__adddf3+0x764>
1000ca64:	300cd0fa 	srli	r6,r6,3
1000ca68:	4010977a 	slli	r8,r8,29
1000ca6c:	2005883a 	mov	r2,r4
1000ca70:	3825883a 	mov	r18,r7
1000ca74:	41a2b03a 	or	r17,r8,r6
1000ca78:	880ad77a 	srli	r5,r17,29
1000ca7c:	100490fa 	slli	r2,r2,3
1000ca80:	882290fa 	slli	r17,r17,3
1000ca84:	0401ffc4 	movi	r16,2047
1000ca88:	288ab03a 	or	r5,r5,r2
1000ca8c:	003e4006 	br	1000c390 <__alt_data_end+0xf800c390>
1000ca90:	01c1ffc4 	movi	r7,2047
1000ca94:	11ffc71e 	bne	r2,r7,1000c9b4 <__alt_data_end+0xf800c9b4>
1000ca98:	400b883a 	mov	r5,r8
1000ca9c:	3023883a 	mov	r17,r6
1000caa0:	1021883a 	mov	r16,r2
1000caa4:	003e3a06 	br	1000c390 <__alt_data_end+0xf800c390>
1000caa8:	10002d26 	beq	r2,zero,1000cb60 <__adddf3+0x84c>
1000caac:	4184b03a 	or	r2,r8,r6
1000cab0:	10000e26 	beq	r2,zero,1000caec <__adddf3+0x7d8>
1000cab4:	2804d0fa 	srli	r2,r5,3
1000cab8:	8822d0fa 	srli	r17,r17,3
1000cabc:	280a977a 	slli	r5,r5,29
1000cac0:	10c0022c 	andhi	r3,r2,8
1000cac4:	2c62b03a 	or	r17,r5,r17
1000cac8:	183feb26 	beq	r3,zero,1000ca78 <__alt_data_end+0xf800ca78>
1000cacc:	4008d0fa 	srli	r4,r8,3
1000cad0:	20c0022c 	andhi	r3,r4,8
1000cad4:	183fe81e 	bne	r3,zero,1000ca78 <__alt_data_end+0xf800ca78>
1000cad8:	300cd0fa 	srli	r6,r6,3
1000cadc:	4010977a 	slli	r8,r8,29
1000cae0:	2005883a 	mov	r2,r4
1000cae4:	41a2b03a 	or	r17,r8,r6
1000cae8:	003fe306 	br	1000ca78 <__alt_data_end+0xf800ca78>
1000caec:	0401ffc4 	movi	r16,2047
1000caf0:	003e2706 	br	1000c390 <__alt_data_end+0xf800c390>
1000caf4:	0011883a 	mov	r8,zero
1000caf8:	003f8306 	br	1000c908 <__alt_data_end+0xf800c908>
1000cafc:	193ff804 	addi	r4,r3,-32
1000cb00:	02400804 	movi	r9,32
1000cb04:	2908d83a 	srl	r4,r5,r4
1000cb08:	1a402526 	beq	r3,r9,1000cba0 <__adddf3+0x88c>
1000cb0c:	02401004 	movi	r9,64
1000cb10:	48c7c83a 	sub	r3,r9,r3
1000cb14:	28ca983a 	sll	r5,r5,r3
1000cb18:	2c62b03a 	or	r17,r5,r17
1000cb1c:	8822c03a 	cmpne	r17,r17,zero
1000cb20:	8922b03a 	or	r17,r17,r4
1000cb24:	0007883a 	mov	r3,zero
1000cb28:	003f2f06 	br	1000c7e8 <__alt_data_end+0xf800c7e8>
1000cb2c:	01402034 	movhi	r5,128
1000cb30:	0007883a 	mov	r3,zero
1000cb34:	297fffc4 	addi	r5,r5,-1
1000cb38:	047ffe04 	movi	r17,-8
1000cb3c:	0401ffc4 	movi	r16,2047
1000cb40:	003e7306 	br	1000c510 <__alt_data_end+0xf800c510>
1000cb44:	2c62b03a 	or	r17,r5,r17
1000cb48:	8822c03a 	cmpne	r17,r17,zero
1000cb4c:	0009883a 	mov	r4,zero
1000cb50:	003fa506 	br	1000c9e8 <__alt_data_end+0xf800c9e8>
1000cb54:	400b883a 	mov	r5,r8
1000cb58:	3023883a 	mov	r17,r6
1000cb5c:	003e0c06 	br	1000c390 <__alt_data_end+0xf800c390>
1000cb60:	400b883a 	mov	r5,r8
1000cb64:	3023883a 	mov	r17,r6
1000cb68:	0401ffc4 	movi	r16,2047
1000cb6c:	003e0806 	br	1000c390 <__alt_data_end+0xf800c390>
1000cb70:	21fff804 	addi	r7,r4,-32
1000cb74:	02400804 	movi	r9,32
1000cb78:	29ced83a 	srl	r7,r5,r7
1000cb7c:	22400a26 	beq	r4,r9,1000cba8 <__adddf3+0x894>
1000cb80:	02401004 	movi	r9,64
1000cb84:	4909c83a 	sub	r4,r9,r4
1000cb88:	290a983a 	sll	r5,r5,r4
1000cb8c:	2c62b03a 	or	r17,r5,r17
1000cb90:	8822c03a 	cmpne	r17,r17,zero
1000cb94:	89e2b03a 	or	r17,r17,r7
1000cb98:	0009883a 	mov	r4,zero
1000cb9c:	003f9206 	br	1000c9e8 <__alt_data_end+0xf800c9e8>
1000cba0:	000b883a 	mov	r5,zero
1000cba4:	003fdc06 	br	1000cb18 <__alt_data_end+0xf800cb18>
1000cba8:	000b883a 	mov	r5,zero
1000cbac:	003ff706 	br	1000cb8c <__alt_data_end+0xf800cb8c>

1000cbb0 <__divdf3>:
1000cbb0:	defff004 	addi	sp,sp,-64
1000cbb4:	dc800815 	stw	r18,32(sp)
1000cbb8:	2824d53a 	srli	r18,r5,20
1000cbbc:	dd800c15 	stw	r22,48(sp)
1000cbc0:	282cd7fa 	srli	r22,r5,31
1000cbc4:	dc000615 	stw	r16,24(sp)
1000cbc8:	04000434 	movhi	r16,16
1000cbcc:	df000e15 	stw	fp,56(sp)
1000cbd0:	dd000a15 	stw	r20,40(sp)
1000cbd4:	dcc00915 	stw	r19,36(sp)
1000cbd8:	dc400715 	stw	r17,28(sp)
1000cbdc:	843fffc4 	addi	r16,r16,-1
1000cbe0:	dfc00f15 	stw	ra,60(sp)
1000cbe4:	ddc00d15 	stw	r23,52(sp)
1000cbe8:	dd400b15 	stw	r21,44(sp)
1000cbec:	9481ffcc 	andi	r18,r18,2047
1000cbf0:	2029883a 	mov	r20,r4
1000cbf4:	2027883a 	mov	r19,r4
1000cbf8:	2c22703a 	and	r17,r5,r16
1000cbfc:	b7003fcc 	andi	fp,r22,255
1000cc00:	90005e26 	beq	r18,zero,1000cd7c <__divdf3+0x1cc>
1000cc04:	0081ffc4 	movi	r2,2047
1000cc08:	90803526 	beq	r18,r2,1000cce0 <__divdf3+0x130>
1000cc0c:	8c000434 	orhi	r16,r17,16
1000cc10:	2004d77a 	srli	r2,r4,29
1000cc14:	802090fa 	slli	r16,r16,3
1000cc18:	202690fa 	slli	r19,r4,3
1000cc1c:	94bf0044 	addi	r18,r18,-1023
1000cc20:	80a2b03a 	or	r17,r16,r2
1000cc24:	0029883a 	mov	r20,zero
1000cc28:	0011883a 	mov	r8,zero
1000cc2c:	380ad53a 	srli	r5,r7,20
1000cc30:	382ed7fa 	srli	r23,r7,31
1000cc34:	04000434 	movhi	r16,16
1000cc38:	843fffc4 	addi	r16,r16,-1
1000cc3c:	2941ffcc 	andi	r5,r5,2047
1000cc40:	302b883a 	mov	r21,r6
1000cc44:	3c20703a 	and	r16,r7,r16
1000cc48:	ba403fcc 	andi	r9,r23,255
1000cc4c:	28006726 	beq	r5,zero,1000cdec <__divdf3+0x23c>
1000cc50:	0081ffc4 	movi	r2,2047
1000cc54:	28805f26 	beq	r5,r2,1000cdd4 <__divdf3+0x224>
1000cc58:	84000434 	orhi	r16,r16,16
1000cc5c:	3004d77a 	srli	r2,r6,29
1000cc60:	802090fa 	slli	r16,r16,3
1000cc64:	302a90fa 	slli	r21,r6,3
1000cc68:	297f0044 	addi	r5,r5,-1023
1000cc6c:	80a0b03a 	or	r16,r16,r2
1000cc70:	000f883a 	mov	r7,zero
1000cc74:	3d06b03a 	or	r3,r7,r20
1000cc78:	180690ba 	slli	r3,r3,2
1000cc7c:	00840074 	movhi	r2,4097
1000cc80:	10b32804 	addi	r2,r2,-13152
1000cc84:	1885883a 	add	r2,r3,r2
1000cc88:	10800017 	ldw	r2,0(r2)
1000cc8c:	b5c8f03a 	xor	r4,r22,r23
1000cc90:	200d883a 	mov	r6,r4
1000cc94:	25003fcc 	andi	r20,r4,255
1000cc98:	9165c83a 	sub	r18,r18,r5
1000cc9c:	1000683a 	jmp	r2
1000cca0:	1000cee8 	cmpgeui	zero,r2,827
1000cca4:	1000cd18 	cmpnei	zero,r2,820
1000cca8:	1000ceac 	andhi	zero,r2,826
1000ccac:	1000ccfc 	xorhi	zero,r2,819
1000ccb0:	1000ceac 	andhi	zero,r2,826
1000ccb4:	1000ce80 	call	11000ce8 <_gp+0xfe5470>
1000ccb8:	1000ceac 	andhi	zero,r2,826
1000ccbc:	1000ccfc 	xorhi	zero,r2,819
1000ccc0:	1000cd18 	cmpnei	zero,r2,820
1000ccc4:	1000cd18 	cmpnei	zero,r2,820
1000ccc8:	1000ce80 	call	11000ce8 <_gp+0xfe5470>
1000cccc:	1000ccfc 	xorhi	zero,r2,819
1000ccd0:	1000cd0c 	andi	zero,r2,820
1000ccd4:	1000cd0c 	andi	zero,r2,820
1000ccd8:	1000cd0c 	andi	zero,r2,820
1000ccdc:	1000cebc 	xorhi	zero,r2,826
1000cce0:	8904b03a 	or	r2,r17,r4
1000cce4:	1000631e 	bne	r2,zero,1000ce74 <__divdf3+0x2c4>
1000cce8:	05000204 	movi	r20,8
1000ccec:	0023883a 	mov	r17,zero
1000ccf0:	0027883a 	mov	r19,zero
1000ccf4:	02000084 	movi	r8,2
1000ccf8:	003fcc06 	br	1000cc2c <__alt_data_end+0xf800cc2c>
1000ccfc:	8023883a 	mov	r17,r16
1000cd00:	a827883a 	mov	r19,r21
1000cd04:	4839883a 	mov	fp,r9
1000cd08:	3811883a 	mov	r8,r7
1000cd0c:	00800084 	movi	r2,2
1000cd10:	4081531e 	bne	r8,r2,1000d260 <__divdf3+0x6b0>
1000cd14:	e029883a 	mov	r20,fp
1000cd18:	a180004c 	andi	r6,r20,1
1000cd1c:	0201ffc4 	movi	r8,2047
1000cd20:	000b883a 	mov	r5,zero
1000cd24:	0027883a 	mov	r19,zero
1000cd28:	4010953a 	slli	r8,r8,20
1000cd2c:	30c03fcc 	andi	r3,r6,255
1000cd30:	04000434 	movhi	r16,16
1000cd34:	180697fa 	slli	r3,r3,31
1000cd38:	843fffc4 	addi	r16,r16,-1
1000cd3c:	2c20703a 	and	r16,r5,r16
1000cd40:	8220b03a 	or	r16,r16,r8
1000cd44:	80c6b03a 	or	r3,r16,r3
1000cd48:	9805883a 	mov	r2,r19
1000cd4c:	dfc00f17 	ldw	ra,60(sp)
1000cd50:	df000e17 	ldw	fp,56(sp)
1000cd54:	ddc00d17 	ldw	r23,52(sp)
1000cd58:	dd800c17 	ldw	r22,48(sp)
1000cd5c:	dd400b17 	ldw	r21,44(sp)
1000cd60:	dd000a17 	ldw	r20,40(sp)
1000cd64:	dcc00917 	ldw	r19,36(sp)
1000cd68:	dc800817 	ldw	r18,32(sp)
1000cd6c:	dc400717 	ldw	r17,28(sp)
1000cd70:	dc000617 	ldw	r16,24(sp)
1000cd74:	dec01004 	addi	sp,sp,64
1000cd78:	f800283a 	ret
1000cd7c:	8904b03a 	or	r2,r17,r4
1000cd80:	10003726 	beq	r2,zero,1000ce60 <__divdf3+0x2b0>
1000cd84:	88014d26 	beq	r17,zero,1000d2bc <__divdf3+0x70c>
1000cd88:	8809883a 	mov	r4,r17
1000cd8c:	d9800215 	stw	r6,8(sp)
1000cd90:	d9c00515 	stw	r7,20(sp)
1000cd94:	000eaac0 	call	1000eaac <__clzsi2>
1000cd98:	d9800217 	ldw	r6,8(sp)
1000cd9c:	d9c00517 	ldw	r7,20(sp)
1000cda0:	1007883a 	mov	r3,r2
1000cda4:	01000a04 	movi	r4,40
1000cda8:	1cfffe04 	addi	r19,r3,-8
1000cdac:	20c9c83a 	sub	r4,r4,r3
1000cdb0:	8cca983a 	sll	r5,r17,r19
1000cdb4:	a108d83a 	srl	r4,r20,r4
1000cdb8:	a4e6983a 	sll	r19,r20,r19
1000cdbc:	2162b03a 	or	r17,r4,r5
1000cdc0:	04bf0344 	movi	r18,-1011
1000cdc4:	90e5c83a 	sub	r18,r18,r3
1000cdc8:	0029883a 	mov	r20,zero
1000cdcc:	0011883a 	mov	r8,zero
1000cdd0:	003f9606 	br	1000cc2c <__alt_data_end+0xf800cc2c>
1000cdd4:	8184b03a 	or	r2,r16,r6
1000cdd8:	10001f1e 	bne	r2,zero,1000ce58 <__divdf3+0x2a8>
1000cddc:	0021883a 	mov	r16,zero
1000cde0:	002b883a 	mov	r21,zero
1000cde4:	01c00084 	movi	r7,2
1000cde8:	003fa206 	br	1000cc74 <__alt_data_end+0xf800cc74>
1000cdec:	8184b03a 	or	r2,r16,r6
1000cdf0:	10001526 	beq	r2,zero,1000ce48 <__divdf3+0x298>
1000cdf4:	80013d26 	beq	r16,zero,1000d2ec <__divdf3+0x73c>
1000cdf8:	8009883a 	mov	r4,r16
1000cdfc:	d9800215 	stw	r6,8(sp)
1000ce00:	da000315 	stw	r8,12(sp)
1000ce04:	da400415 	stw	r9,16(sp)
1000ce08:	000eaac0 	call	1000eaac <__clzsi2>
1000ce0c:	d9800217 	ldw	r6,8(sp)
1000ce10:	da000317 	ldw	r8,12(sp)
1000ce14:	da400417 	ldw	r9,16(sp)
1000ce18:	1007883a 	mov	r3,r2
1000ce1c:	01000a04 	movi	r4,40
1000ce20:	1d7ffe04 	addi	r21,r3,-8
1000ce24:	20c9c83a 	sub	r4,r4,r3
1000ce28:	8560983a 	sll	r16,r16,r21
1000ce2c:	3108d83a 	srl	r4,r6,r4
1000ce30:	356a983a 	sll	r21,r6,r21
1000ce34:	2420b03a 	or	r16,r4,r16
1000ce38:	017f0344 	movi	r5,-1011
1000ce3c:	28cbc83a 	sub	r5,r5,r3
1000ce40:	000f883a 	mov	r7,zero
1000ce44:	003f8b06 	br	1000cc74 <__alt_data_end+0xf800cc74>
1000ce48:	0021883a 	mov	r16,zero
1000ce4c:	002b883a 	mov	r21,zero
1000ce50:	01c00044 	movi	r7,1
1000ce54:	003f8706 	br	1000cc74 <__alt_data_end+0xf800cc74>
1000ce58:	01c000c4 	movi	r7,3
1000ce5c:	003f8506 	br	1000cc74 <__alt_data_end+0xf800cc74>
1000ce60:	05000104 	movi	r20,4
1000ce64:	0023883a 	mov	r17,zero
1000ce68:	0027883a 	mov	r19,zero
1000ce6c:	02000044 	movi	r8,1
1000ce70:	003f6e06 	br	1000cc2c <__alt_data_end+0xf800cc2c>
1000ce74:	05000304 	movi	r20,12
1000ce78:	020000c4 	movi	r8,3
1000ce7c:	003f6b06 	br	1000cc2c <__alt_data_end+0xf800cc2c>
1000ce80:	01400434 	movhi	r5,16
1000ce84:	000d883a 	mov	r6,zero
1000ce88:	297fffc4 	addi	r5,r5,-1
1000ce8c:	04ffffc4 	movi	r19,-1
1000ce90:	0201ffc4 	movi	r8,2047
1000ce94:	003fa406 	br	1000cd28 <__alt_data_end+0xf800cd28>
1000ce98:	043f0084 	movi	r16,-1022
1000ce9c:	84a1c83a 	sub	r16,r16,r18
1000cea0:	00800e04 	movi	r2,56
1000cea4:	14014d0e 	bge	r2,r16,1000d3dc <__divdf3+0x82c>
1000cea8:	a180004c 	andi	r6,r20,1
1000ceac:	0011883a 	mov	r8,zero
1000ceb0:	000b883a 	mov	r5,zero
1000ceb4:	0027883a 	mov	r19,zero
1000ceb8:	003f9b06 	br	1000cd28 <__alt_data_end+0xf800cd28>
1000cebc:	8880022c 	andhi	r2,r17,8
1000cec0:	1000f026 	beq	r2,zero,1000d284 <__divdf3+0x6d4>
1000cec4:	8080022c 	andhi	r2,r16,8
1000cec8:	1000ee1e 	bne	r2,zero,1000d284 <__divdf3+0x6d4>
1000cecc:	00800434 	movhi	r2,16
1000ced0:	81400234 	orhi	r5,r16,8
1000ced4:	10bfffc4 	addi	r2,r2,-1
1000ced8:	b80d883a 	mov	r6,r23
1000cedc:	288a703a 	and	r5,r5,r2
1000cee0:	a827883a 	mov	r19,r21
1000cee4:	003fea06 	br	1000ce90 <__alt_data_end+0xf800ce90>
1000cee8:	84411c36 	bltu	r16,r17,1000d35c <__divdf3+0x7ac>
1000ceec:	8c011a26 	beq	r17,r16,1000d358 <__divdf3+0x7a8>
1000cef0:	94bfffc4 	addi	r18,r18,-1
1000cef4:	dcc00015 	stw	r19,0(sp)
1000cef8:	8811883a 	mov	r8,r17
1000cefc:	002d883a 	mov	r22,zero
1000cf00:	a80cd63a 	srli	r6,r21,24
1000cf04:	8020923a 	slli	r16,r16,8
1000cf08:	a82a923a 	slli	r21,r21,8
1000cf0c:	4009883a 	mov	r4,r8
1000cf10:	342eb03a 	or	r23,r6,r16
1000cf14:	dd400115 	stw	r21,4(sp)
1000cf18:	b82ad43a 	srli	r21,r23,16
1000cf1c:	da000315 	stw	r8,12(sp)
1000cf20:	bcffffcc 	andi	r19,r23,65535
1000cf24:	a80b883a 	mov	r5,r21
1000cf28:	000c2dc0 	call	1000c2dc <__udivsi3>
1000cf2c:	1009883a 	mov	r4,r2
1000cf30:	980b883a 	mov	r5,r19
1000cf34:	1023883a 	mov	r17,r2
1000cf38:	000c2ec0 	call	1000c2ec <__mulsi3>
1000cf3c:	da000317 	ldw	r8,12(sp)
1000cf40:	a80b883a 	mov	r5,r21
1000cf44:	1039883a 	mov	fp,r2
1000cf48:	4009883a 	mov	r4,r8
1000cf4c:	000c2e40 	call	1000c2e4 <__umodsi3>
1000cf50:	d8c00017 	ldw	r3,0(sp)
1000cf54:	1004943a 	slli	r2,r2,16
1000cf58:	1810d43a 	srli	r8,r3,16
1000cf5c:	120eb03a 	or	r7,r2,r8
1000cf60:	3f00062e 	bgeu	r7,fp,1000cf7c <__divdf3+0x3cc>
1000cf64:	3dcf883a 	add	r7,r7,r23
1000cf68:	88bfffc4 	addi	r2,r17,-1
1000cf6c:	3dc10a36 	bltu	r7,r23,1000d398 <__divdf3+0x7e8>
1000cf70:	3f01092e 	bgeu	r7,fp,1000d398 <__divdf3+0x7e8>
1000cf74:	8c7fff84 	addi	r17,r17,-2
1000cf78:	3dcf883a 	add	r7,r7,r23
1000cf7c:	3f39c83a 	sub	fp,r7,fp
1000cf80:	e009883a 	mov	r4,fp
1000cf84:	a80b883a 	mov	r5,r21
1000cf88:	000c2dc0 	call	1000c2dc <__udivsi3>
1000cf8c:	1009883a 	mov	r4,r2
1000cf90:	980b883a 	mov	r5,r19
1000cf94:	1021883a 	mov	r16,r2
1000cf98:	000c2ec0 	call	1000c2ec <__mulsi3>
1000cf9c:	e009883a 	mov	r4,fp
1000cfa0:	a80b883a 	mov	r5,r21
1000cfa4:	d8800315 	stw	r2,12(sp)
1000cfa8:	000c2e40 	call	1000c2e4 <__umodsi3>
1000cfac:	d9000017 	ldw	r4,0(sp)
1000cfb0:	1004943a 	slli	r2,r2,16
1000cfb4:	da000317 	ldw	r8,12(sp)
1000cfb8:	20ffffcc 	andi	r3,r4,65535
1000cfbc:	10ceb03a 	or	r7,r2,r3
1000cfc0:	3a00062e 	bgeu	r7,r8,1000cfdc <__divdf3+0x42c>
1000cfc4:	3dcf883a 	add	r7,r7,r23
1000cfc8:	80bfffc4 	addi	r2,r16,-1
1000cfcc:	3dc0f036 	bltu	r7,r23,1000d390 <__divdf3+0x7e0>
1000cfd0:	3a00ef2e 	bgeu	r7,r8,1000d390 <__divdf3+0x7e0>
1000cfd4:	843fff84 	addi	r16,r16,-2
1000cfd8:	3dcf883a 	add	r7,r7,r23
1000cfdc:	d8c00117 	ldw	r3,4(sp)
1000cfe0:	8822943a 	slli	r17,r17,16
1000cfe4:	3a0fc83a 	sub	r7,r7,r8
1000cfe8:	1806d43a 	srli	r3,r3,16
1000cfec:	8462b03a 	or	r17,r16,r17
1000cff0:	8affffcc 	andi	r11,r17,65535
1000cff4:	d8c00015 	stw	r3,0(sp)
1000cff8:	d8c00117 	ldw	r3,4(sp)
1000cffc:	8820d43a 	srli	r16,r17,16
1000d000:	5809883a 	mov	r4,r11
1000d004:	1f3fffcc 	andi	fp,r3,65535
1000d008:	e00b883a 	mov	r5,fp
1000d00c:	d9c00515 	stw	r7,20(sp)
1000d010:	dac00215 	stw	r11,8(sp)
1000d014:	000c2ec0 	call	1000c2ec <__mulsi3>
1000d018:	8009883a 	mov	r4,r16
1000d01c:	e00b883a 	mov	r5,fp
1000d020:	d8800415 	stw	r2,16(sp)
1000d024:	000c2ec0 	call	1000c2ec <__mulsi3>
1000d028:	d9400017 	ldw	r5,0(sp)
1000d02c:	8009883a 	mov	r4,r16
1000d030:	d8800315 	stw	r2,12(sp)
1000d034:	000c2ec0 	call	1000c2ec <__mulsi3>
1000d038:	dac00217 	ldw	r11,8(sp)
1000d03c:	d9400017 	ldw	r5,0(sp)
1000d040:	d8800215 	stw	r2,8(sp)
1000d044:	5809883a 	mov	r4,r11
1000d048:	000c2ec0 	call	1000c2ec <__mulsi3>
1000d04c:	da400417 	ldw	r9,16(sp)
1000d050:	da800317 	ldw	r10,12(sp)
1000d054:	d9c00517 	ldw	r7,20(sp)
1000d058:	480ad43a 	srli	r5,r9,16
1000d05c:	5085883a 	add	r2,r10,r2
1000d060:	db000217 	ldw	r12,8(sp)
1000d064:	1151883a 	add	r8,r2,r5
1000d068:	4280022e 	bgeu	r8,r10,1000d074 <__divdf3+0x4c4>
1000d06c:	00800074 	movhi	r2,1
1000d070:	6099883a 	add	r12,r12,r2
1000d074:	400ad43a 	srli	r5,r8,16
1000d078:	4010943a 	slli	r8,r8,16
1000d07c:	4c3fffcc 	andi	r16,r9,65535
1000d080:	6149883a 	add	r4,r12,r5
1000d084:	4411883a 	add	r8,r8,r16
1000d088:	3900a736 	bltu	r7,r4,1000d328 <__divdf3+0x778>
1000d08c:	3900c426 	beq	r7,r4,1000d3a0 <__divdf3+0x7f0>
1000d090:	3909c83a 	sub	r4,r7,r4
1000d094:	b221c83a 	sub	r16,r22,r8
1000d098:	b42d803a 	cmpltu	r22,r22,r16
1000d09c:	25adc83a 	sub	r22,r4,r22
1000d0a0:	b5c0c626 	beq	r22,r23,1000d3bc <__divdf3+0x80c>
1000d0a4:	b009883a 	mov	r4,r22
1000d0a8:	a80b883a 	mov	r5,r21
1000d0ac:	000c2dc0 	call	1000c2dc <__udivsi3>
1000d0b0:	1009883a 	mov	r4,r2
1000d0b4:	980b883a 	mov	r5,r19
1000d0b8:	d8800315 	stw	r2,12(sp)
1000d0bc:	000c2ec0 	call	1000c2ec <__mulsi3>
1000d0c0:	a80b883a 	mov	r5,r21
1000d0c4:	b009883a 	mov	r4,r22
1000d0c8:	d8800415 	stw	r2,16(sp)
1000d0cc:	000c2e40 	call	1000c2e4 <__umodsi3>
1000d0d0:	1004943a 	slli	r2,r2,16
1000d0d4:	800ed43a 	srli	r7,r16,16
1000d0d8:	da400417 	ldw	r9,16(sp)
1000d0dc:	da000317 	ldw	r8,12(sp)
1000d0e0:	11cab03a 	or	r5,r2,r7
1000d0e4:	2a40062e 	bgeu	r5,r9,1000d100 <__divdf3+0x550>
1000d0e8:	2dcb883a 	add	r5,r5,r23
1000d0ec:	40bfffc4 	addi	r2,r8,-1
1000d0f0:	2dc0b436 	bltu	r5,r23,1000d3c4 <__divdf3+0x814>
1000d0f4:	2a40b32e 	bgeu	r5,r9,1000d3c4 <__divdf3+0x814>
1000d0f8:	423fff84 	addi	r8,r8,-2
1000d0fc:	2dcb883a 	add	r5,r5,r23
1000d100:	2a6dc83a 	sub	r22,r5,r9
1000d104:	b009883a 	mov	r4,r22
1000d108:	a80b883a 	mov	r5,r21
1000d10c:	da000315 	stw	r8,12(sp)
1000d110:	000c2dc0 	call	1000c2dc <__udivsi3>
1000d114:	980b883a 	mov	r5,r19
1000d118:	1009883a 	mov	r4,r2
1000d11c:	d8800415 	stw	r2,16(sp)
1000d120:	000c2ec0 	call	1000c2ec <__mulsi3>
1000d124:	b009883a 	mov	r4,r22
1000d128:	a80b883a 	mov	r5,r21
1000d12c:	1027883a 	mov	r19,r2
1000d130:	000c2e40 	call	1000c2e4 <__umodsi3>
1000d134:	1004943a 	slli	r2,r2,16
1000d138:	843fffcc 	andi	r16,r16,65535
1000d13c:	da000317 	ldw	r8,12(sp)
1000d140:	140eb03a 	or	r7,r2,r16
1000d144:	da400417 	ldw	r9,16(sp)
1000d148:	3cc0062e 	bgeu	r7,r19,1000d164 <__divdf3+0x5b4>
1000d14c:	3dcf883a 	add	r7,r7,r23
1000d150:	48bfffc4 	addi	r2,r9,-1
1000d154:	3dc09d36 	bltu	r7,r23,1000d3cc <__divdf3+0x81c>
1000d158:	3cc09c2e 	bgeu	r7,r19,1000d3cc <__divdf3+0x81c>
1000d15c:	4a7fff84 	addi	r9,r9,-2
1000d160:	3dcf883a 	add	r7,r7,r23
1000d164:	4010943a 	slli	r8,r8,16
1000d168:	3cebc83a 	sub	r21,r7,r19
1000d16c:	e00b883a 	mov	r5,fp
1000d170:	4a26b03a 	or	r19,r9,r8
1000d174:	99ffffcc 	andi	r7,r19,65535
1000d178:	9820d43a 	srli	r16,r19,16
1000d17c:	3809883a 	mov	r4,r7
1000d180:	d9c00515 	stw	r7,20(sp)
1000d184:	000c2ec0 	call	1000c2ec <__mulsi3>
1000d188:	8009883a 	mov	r4,r16
1000d18c:	e00b883a 	mov	r5,fp
1000d190:	102d883a 	mov	r22,r2
1000d194:	000c2ec0 	call	1000c2ec <__mulsi3>
1000d198:	d9400017 	ldw	r5,0(sp)
1000d19c:	8009883a 	mov	r4,r16
1000d1a0:	1039883a 	mov	fp,r2
1000d1a4:	000c2ec0 	call	1000c2ec <__mulsi3>
1000d1a8:	d9c00517 	ldw	r7,20(sp)
1000d1ac:	d9400017 	ldw	r5,0(sp)
1000d1b0:	1021883a 	mov	r16,r2
1000d1b4:	3809883a 	mov	r4,r7
1000d1b8:	000c2ec0 	call	1000c2ec <__mulsi3>
1000d1bc:	b008d43a 	srli	r4,r22,16
1000d1c0:	e085883a 	add	r2,fp,r2
1000d1c4:	1109883a 	add	r4,r2,r4
1000d1c8:	2700022e 	bgeu	r4,fp,1000d1d4 <__divdf3+0x624>
1000d1cc:	00800074 	movhi	r2,1
1000d1d0:	80a1883a 	add	r16,r16,r2
1000d1d4:	200ad43a 	srli	r5,r4,16
1000d1d8:	2008943a 	slli	r4,r4,16
1000d1dc:	b5bfffcc 	andi	r22,r22,65535
1000d1e0:	8145883a 	add	r2,r16,r5
1000d1e4:	2589883a 	add	r4,r4,r22
1000d1e8:	a8802c36 	bltu	r21,r2,1000d29c <__divdf3+0x6ec>
1000d1ec:	a880a426 	beq	r21,r2,1000d480 <__divdf3+0x8d0>
1000d1f0:	9cc00054 	ori	r19,r19,1
1000d1f4:	9200ffc4 	addi	r8,r18,1023
1000d1f8:	023f270e 	bge	zero,r8,1000ce98 <__alt_data_end+0xf800ce98>
1000d1fc:	988001cc 	andi	r2,r19,7
1000d200:	10000726 	beq	r2,zero,1000d220 <__divdf3+0x670>
1000d204:	990003cc 	andi	r4,r19,15
1000d208:	00800104 	movi	r2,4
1000d20c:	20800426 	beq	r4,r2,1000d220 <__divdf3+0x670>
1000d210:	9885883a 	add	r2,r19,r2
1000d214:	14e7803a 	cmpltu	r19,r2,r19
1000d218:	8ce3883a 	add	r17,r17,r19
1000d21c:	1027883a 	mov	r19,r2
1000d220:	8880402c 	andhi	r2,r17,256
1000d224:	10000426 	beq	r2,zero,1000d238 <__divdf3+0x688>
1000d228:	00bfc034 	movhi	r2,65280
1000d22c:	10bfffc4 	addi	r2,r2,-1
1000d230:	92010004 	addi	r8,r18,1024
1000d234:	88a2703a 	and	r17,r17,r2
1000d238:	0081ff84 	movi	r2,2046
1000d23c:	123eb616 	blt	r2,r8,1000cd18 <__alt_data_end+0xf800cd18>
1000d240:	9826d0fa 	srli	r19,r19,3
1000d244:	8804977a 	slli	r2,r17,29
1000d248:	8820927a 	slli	r16,r17,9
1000d24c:	4201ffcc 	andi	r8,r8,2047
1000d250:	14e6b03a 	or	r19,r2,r19
1000d254:	800ad33a 	srli	r5,r16,12
1000d258:	a180004c 	andi	r6,r20,1
1000d25c:	003eb206 	br	1000cd28 <__alt_data_end+0xf800cd28>
1000d260:	008000c4 	movi	r2,3
1000d264:	4080ac26 	beq	r8,r2,1000d518 <__divdf3+0x968>
1000d268:	00800044 	movi	r2,1
1000d26c:	4080591e 	bne	r8,r2,1000d3d4 <__divdf3+0x824>
1000d270:	e00d883a 	mov	r6,fp
1000d274:	0011883a 	mov	r8,zero
1000d278:	000b883a 	mov	r5,zero
1000d27c:	0027883a 	mov	r19,zero
1000d280:	003ea906 	br	1000cd28 <__alt_data_end+0xf800cd28>
1000d284:	00800434 	movhi	r2,16
1000d288:	89400234 	orhi	r5,r17,8
1000d28c:	10bfffc4 	addi	r2,r2,-1
1000d290:	b00d883a 	mov	r6,r22
1000d294:	288a703a 	and	r5,r5,r2
1000d298:	003efd06 	br	1000ce90 <__alt_data_end+0xf800ce90>
1000d29c:	adcf883a 	add	r7,r21,r23
1000d2a0:	997fffc4 	addi	r5,r19,-1
1000d2a4:	3dc0412e 	bgeu	r7,r23,1000d3ac <__divdf3+0x7fc>
1000d2a8:	2827883a 	mov	r19,r5
1000d2ac:	38bfd01e 	bne	r7,r2,1000d1f0 <__alt_data_end+0xf800d1f0>
1000d2b0:	d8c00117 	ldw	r3,4(sp)
1000d2b4:	193fce1e 	bne	r3,r4,1000d1f0 <__alt_data_end+0xf800d1f0>
1000d2b8:	003fce06 	br	1000d1f4 <__alt_data_end+0xf800d1f4>
1000d2bc:	d9800215 	stw	r6,8(sp)
1000d2c0:	d9c00515 	stw	r7,20(sp)
1000d2c4:	000eaac0 	call	1000eaac <__clzsi2>
1000d2c8:	10c00804 	addi	r3,r2,32
1000d2cc:	010009c4 	movi	r4,39
1000d2d0:	d9800217 	ldw	r6,8(sp)
1000d2d4:	d9c00517 	ldw	r7,20(sp)
1000d2d8:	20feb20e 	bge	r4,r3,1000cda4 <__alt_data_end+0xf800cda4>
1000d2dc:	117ffe04 	addi	r5,r2,-8
1000d2e0:	a162983a 	sll	r17,r20,r5
1000d2e4:	0027883a 	mov	r19,zero
1000d2e8:	003eb506 	br	1000cdc0 <__alt_data_end+0xf800cdc0>
1000d2ec:	3009883a 	mov	r4,r6
1000d2f0:	d9800215 	stw	r6,8(sp)
1000d2f4:	da000315 	stw	r8,12(sp)
1000d2f8:	da400415 	stw	r9,16(sp)
1000d2fc:	000eaac0 	call	1000eaac <__clzsi2>
1000d300:	10c00804 	addi	r3,r2,32
1000d304:	010009c4 	movi	r4,39
1000d308:	d9800217 	ldw	r6,8(sp)
1000d30c:	da000317 	ldw	r8,12(sp)
1000d310:	da400417 	ldw	r9,16(sp)
1000d314:	20fec10e 	bge	r4,r3,1000ce1c <__alt_data_end+0xf800ce1c>
1000d318:	10bffe04 	addi	r2,r2,-8
1000d31c:	a8a0983a 	sll	r16,r21,r2
1000d320:	002b883a 	mov	r21,zero
1000d324:	003ec406 	br	1000ce38 <__alt_data_end+0xf800ce38>
1000d328:	d8c00117 	ldw	r3,4(sp)
1000d32c:	b0ed883a 	add	r22,r22,r3
1000d330:	b0c5803a 	cmpltu	r2,r22,r3
1000d334:	15c5883a 	add	r2,r2,r23
1000d338:	11cf883a 	add	r7,r2,r7
1000d33c:	88bfffc4 	addi	r2,r17,-1
1000d340:	b9c00d2e 	bgeu	r23,r7,1000d378 <__divdf3+0x7c8>
1000d344:	39003f36 	bltu	r7,r4,1000d444 <__divdf3+0x894>
1000d348:	21c06a26 	beq	r4,r7,1000d4f4 <__divdf3+0x944>
1000d34c:	3909c83a 	sub	r4,r7,r4
1000d350:	1023883a 	mov	r17,r2
1000d354:	003f4f06 	br	1000d094 <__alt_data_end+0xf800d094>
1000d358:	9d7ee536 	bltu	r19,r21,1000cef0 <__alt_data_end+0xf800cef0>
1000d35c:	982ed07a 	srli	r23,r19,1
1000d360:	880497fa 	slli	r2,r17,31
1000d364:	8810d07a 	srli	r8,r17,1
1000d368:	982c97fa 	slli	r22,r19,31
1000d36c:	b884b03a 	or	r2,r23,r2
1000d370:	d8800015 	stw	r2,0(sp)
1000d374:	003ee206 	br	1000cf00 <__alt_data_end+0xf800cf00>
1000d378:	3dfff41e 	bne	r7,r23,1000d34c <__alt_data_end+0xf800d34c>
1000d37c:	d8c00117 	ldw	r3,4(sp)
1000d380:	b0fff02e 	bgeu	r22,r3,1000d344 <__alt_data_end+0xf800d344>
1000d384:	b909c83a 	sub	r4,r23,r4
1000d388:	1023883a 	mov	r17,r2
1000d38c:	003f4106 	br	1000d094 <__alt_data_end+0xf800d094>
1000d390:	1021883a 	mov	r16,r2
1000d394:	003f1106 	br	1000cfdc <__alt_data_end+0xf800cfdc>
1000d398:	1023883a 	mov	r17,r2
1000d39c:	003ef706 	br	1000cf7c <__alt_data_end+0xf800cf7c>
1000d3a0:	b23fe136 	bltu	r22,r8,1000d328 <__alt_data_end+0xf800d328>
1000d3a4:	0009883a 	mov	r4,zero
1000d3a8:	003f3a06 	br	1000d094 <__alt_data_end+0xf800d094>
1000d3ac:	38802c36 	bltu	r7,r2,1000d460 <__divdf3+0x8b0>
1000d3b0:	11c05326 	beq	r2,r7,1000d500 <__divdf3+0x950>
1000d3b4:	2827883a 	mov	r19,r5
1000d3b8:	003f8d06 	br	1000d1f0 <__alt_data_end+0xf800d1f0>
1000d3bc:	04ffffc4 	movi	r19,-1
1000d3c0:	003f8c06 	br	1000d1f4 <__alt_data_end+0xf800d1f4>
1000d3c4:	1011883a 	mov	r8,r2
1000d3c8:	003f4d06 	br	1000d100 <__alt_data_end+0xf800d100>
1000d3cc:	1013883a 	mov	r9,r2
1000d3d0:	003f6406 	br	1000d164 <__alt_data_end+0xf800d164>
1000d3d4:	e029883a 	mov	r20,fp
1000d3d8:	003f8606 	br	1000d1f4 <__alt_data_end+0xf800d1f4>
1000d3dc:	008007c4 	movi	r2,31
1000d3e0:	14002a16 	blt	r2,r16,1000d48c <__divdf3+0x8dc>
1000d3e4:	91410784 	addi	r5,r18,1054
1000d3e8:	9c0cd83a 	srl	r6,r19,r16
1000d3ec:	8948983a 	sll	r4,r17,r5
1000d3f0:	9944983a 	sll	r2,r19,r5
1000d3f4:	8c20d83a 	srl	r16,r17,r16
1000d3f8:	3108b03a 	or	r4,r6,r4
1000d3fc:	1004c03a 	cmpne	r2,r2,zero
1000d400:	2084b03a 	or	r2,r4,r2
1000d404:	110001cc 	andi	r4,r2,7
1000d408:	20000726 	beq	r4,zero,1000d428 <__divdf3+0x878>
1000d40c:	114003cc 	andi	r5,r2,15
1000d410:	01000104 	movi	r4,4
1000d414:	29000426 	beq	r5,r4,1000d428 <__divdf3+0x878>
1000d418:	11000104 	addi	r4,r2,4
1000d41c:	2085803a 	cmpltu	r2,r4,r2
1000d420:	80a1883a 	add	r16,r16,r2
1000d424:	2005883a 	mov	r2,r4
1000d428:	8100202c 	andhi	r4,r16,128
1000d42c:	20002d26 	beq	r4,zero,1000d4e4 <__divdf3+0x934>
1000d430:	a180004c 	andi	r6,r20,1
1000d434:	02000044 	movi	r8,1
1000d438:	000b883a 	mov	r5,zero
1000d43c:	0027883a 	mov	r19,zero
1000d440:	003e3906 	br	1000cd28 <__alt_data_end+0xf800cd28>
1000d444:	d8c00117 	ldw	r3,4(sp)
1000d448:	8c7fff84 	addi	r17,r17,-2
1000d44c:	b0ed883a 	add	r22,r22,r3
1000d450:	b0c5803a 	cmpltu	r2,r22,r3
1000d454:	15c5883a 	add	r2,r2,r23
1000d458:	11cf883a 	add	r7,r2,r7
1000d45c:	003f0c06 	br	1000d090 <__alt_data_end+0xf800d090>
1000d460:	d8c00117 	ldw	r3,4(sp)
1000d464:	997fff84 	addi	r5,r19,-2
1000d468:	18d1883a 	add	r8,r3,r3
1000d46c:	40c7803a 	cmpltu	r3,r8,r3
1000d470:	1dcd883a 	add	r6,r3,r23
1000d474:	398f883a 	add	r7,r7,r6
1000d478:	da000115 	stw	r8,4(sp)
1000d47c:	003f8a06 	br	1000d2a8 <__alt_data_end+0xf800d2a8>
1000d480:	203f861e 	bne	r4,zero,1000d29c <__alt_data_end+0xf800d29c>
1000d484:	d8000115 	stw	zero,4(sp)
1000d488:	003f8906 	br	1000d2b0 <__alt_data_end+0xf800d2b0>
1000d48c:	00bef884 	movi	r2,-1054
1000d490:	1485c83a 	sub	r2,r2,r18
1000d494:	01000804 	movi	r4,32
1000d498:	8884d83a 	srl	r2,r17,r2
1000d49c:	81001c26 	beq	r16,r4,1000d510 <__divdf3+0x960>
1000d4a0:	91010f84 	addi	r4,r18,1086
1000d4a4:	8908983a 	sll	r4,r17,r4
1000d4a8:	24c8b03a 	or	r4,r4,r19
1000d4ac:	2008c03a 	cmpne	r4,r4,zero
1000d4b0:	2084b03a 	or	r2,r4,r2
1000d4b4:	140001cc 	andi	r16,r2,7
1000d4b8:	8000061e 	bne	r16,zero,1000d4d4 <__divdf3+0x924>
1000d4bc:	000b883a 	mov	r5,zero
1000d4c0:	1004d0fa 	srli	r2,r2,3
1000d4c4:	a180004c 	andi	r6,r20,1
1000d4c8:	0011883a 	mov	r8,zero
1000d4cc:	1426b03a 	or	r19,r2,r16
1000d4d0:	003e1506 	br	1000cd28 <__alt_data_end+0xf800cd28>
1000d4d4:	114003cc 	andi	r5,r2,15
1000d4d8:	01000104 	movi	r4,4
1000d4dc:	0021883a 	mov	r16,zero
1000d4e0:	293fcd1e 	bne	r5,r4,1000d418 <__alt_data_end+0xf800d418>
1000d4e4:	800a927a 	slli	r5,r16,9
1000d4e8:	8020977a 	slli	r16,r16,29
1000d4ec:	280ad33a 	srli	r5,r5,12
1000d4f0:	003ff306 	br	1000d4c0 <__alt_data_end+0xf800d4c0>
1000d4f4:	b23fd336 	bltu	r22,r8,1000d444 <__alt_data_end+0xf800d444>
1000d4f8:	1023883a 	mov	r17,r2
1000d4fc:	003fa906 	br	1000d3a4 <__alt_data_end+0xf800d3a4>
1000d500:	d8c00117 	ldw	r3,4(sp)
1000d504:	193fd636 	bltu	r3,r4,1000d460 <__alt_data_end+0xf800d460>
1000d508:	2827883a 	mov	r19,r5
1000d50c:	003f6806 	br	1000d2b0 <__alt_data_end+0xf800d2b0>
1000d510:	0009883a 	mov	r4,zero
1000d514:	003fe406 	br	1000d4a8 <__alt_data_end+0xf800d4a8>
1000d518:	00800434 	movhi	r2,16
1000d51c:	89400234 	orhi	r5,r17,8
1000d520:	10bfffc4 	addi	r2,r2,-1
1000d524:	e00d883a 	mov	r6,fp
1000d528:	288a703a 	and	r5,r5,r2
1000d52c:	003e5806 	br	1000ce90 <__alt_data_end+0xf800ce90>

1000d530 <__eqdf2>:
1000d530:	2804d53a 	srli	r2,r5,20
1000d534:	3806d53a 	srli	r3,r7,20
1000d538:	02000434 	movhi	r8,16
1000d53c:	423fffc4 	addi	r8,r8,-1
1000d540:	1081ffcc 	andi	r2,r2,2047
1000d544:	0241ffc4 	movi	r9,2047
1000d548:	2a14703a 	and	r10,r5,r8
1000d54c:	18c1ffcc 	andi	r3,r3,2047
1000d550:	3a10703a 	and	r8,r7,r8
1000d554:	280ad7fa 	srli	r5,r5,31
1000d558:	380ed7fa 	srli	r7,r7,31
1000d55c:	12400f26 	beq	r2,r9,1000d59c <__eqdf2+0x6c>
1000d560:	0241ffc4 	movi	r9,2047
1000d564:	1a400326 	beq	r3,r9,1000d574 <__eqdf2+0x44>
1000d568:	10c00526 	beq	r2,r3,1000d580 <__eqdf2+0x50>
1000d56c:	00800044 	movi	r2,1
1000d570:	f800283a 	ret
1000d574:	4192b03a 	or	r9,r8,r6
1000d578:	483ffc1e 	bne	r9,zero,1000d56c <__alt_data_end+0xf800d56c>
1000d57c:	10fffb1e 	bne	r2,r3,1000d56c <__alt_data_end+0xf800d56c>
1000d580:	523ffa1e 	bne	r10,r8,1000d56c <__alt_data_end+0xf800d56c>
1000d584:	21bff91e 	bne	r4,r6,1000d56c <__alt_data_end+0xf800d56c>
1000d588:	29c00826 	beq	r5,r7,1000d5ac <__eqdf2+0x7c>
1000d58c:	103ff71e 	bne	r2,zero,1000d56c <__alt_data_end+0xf800d56c>
1000d590:	5104b03a 	or	r2,r10,r4
1000d594:	1004c03a 	cmpne	r2,r2,zero
1000d598:	f800283a 	ret
1000d59c:	5112b03a 	or	r9,r10,r4
1000d5a0:	483fef26 	beq	r9,zero,1000d560 <__alt_data_end+0xf800d560>
1000d5a4:	00800044 	movi	r2,1
1000d5a8:	f800283a 	ret
1000d5ac:	0005883a 	mov	r2,zero
1000d5b0:	f800283a 	ret

1000d5b4 <__gedf2>:
1000d5b4:	2804d53a 	srli	r2,r5,20
1000d5b8:	3806d53a 	srli	r3,r7,20
1000d5bc:	02000434 	movhi	r8,16
1000d5c0:	423fffc4 	addi	r8,r8,-1
1000d5c4:	0241ffc4 	movi	r9,2047
1000d5c8:	1081ffcc 	andi	r2,r2,2047
1000d5cc:	2a14703a 	and	r10,r5,r8
1000d5d0:	1a46703a 	and	r3,r3,r9
1000d5d4:	3a10703a 	and	r8,r7,r8
1000d5d8:	280ad7fa 	srli	r5,r5,31
1000d5dc:	380ed7fa 	srli	r7,r7,31
1000d5e0:	12400b26 	beq	r2,r9,1000d610 <__gedf2+0x5c>
1000d5e4:	1a401626 	beq	r3,r9,1000d640 <__gedf2+0x8c>
1000d5e8:	10000c1e 	bne	r2,zero,1000d61c <__gedf2+0x68>
1000d5ec:	5112b03a 	or	r9,r10,r4
1000d5f0:	4813003a 	cmpeq	r9,r9,zero
1000d5f4:	4817883a 	mov	r11,r9
1000d5f8:	18000c1e 	bne	r3,zero,1000d62c <__gedf2+0x78>
1000d5fc:	4198b03a 	or	r12,r8,r6
1000d600:	60000a1e 	bne	r12,zero,1000d62c <__gedf2+0x78>
1000d604:	48001326 	beq	r9,zero,1000d654 <__gedf2+0xa0>
1000d608:	0005883a 	mov	r2,zero
1000d60c:	f800283a 	ret
1000d610:	5112b03a 	or	r9,r10,r4
1000d614:	4800191e 	bne	r9,zero,1000d67c <__gedf2+0xc8>
1000d618:	18800926 	beq	r3,r2,1000d640 <__gedf2+0x8c>
1000d61c:	18000b1e 	bne	r3,zero,1000d64c <__gedf2+0x98>
1000d620:	4192b03a 	or	r9,r8,r6
1000d624:	0017883a 	mov	r11,zero
1000d628:	48000a26 	beq	r9,zero,1000d654 <__gedf2+0xa0>
1000d62c:	39c03fcc 	andi	r7,r7,255
1000d630:	58000726 	beq	r11,zero,1000d650 <__gedf2+0x9c>
1000d634:	3800081e 	bne	r7,zero,1000d658 <__gedf2+0xa4>
1000d638:	00bfffc4 	movi	r2,-1
1000d63c:	f800283a 	ret
1000d640:	4192b03a 	or	r9,r8,r6
1000d644:	48000d1e 	bne	r9,zero,1000d67c <__gedf2+0xc8>
1000d648:	103fe826 	beq	r2,zero,1000d5ec <__alt_data_end+0xf800d5ec>
1000d64c:	39c03fcc 	andi	r7,r7,255
1000d650:	29c00326 	beq	r5,r7,1000d660 <__gedf2+0xac>
1000d654:	283ff81e 	bne	r5,zero,1000d638 <__alt_data_end+0xf800d638>
1000d658:	00800044 	movi	r2,1
1000d65c:	f800283a 	ret
1000d660:	18bffc16 	blt	r3,r2,1000d654 <__alt_data_end+0xf800d654>
1000d664:	10c00316 	blt	r2,r3,1000d674 <__gedf2+0xc0>
1000d668:	42bffa36 	bltu	r8,r10,1000d654 <__alt_data_end+0xf800d654>
1000d66c:	52000526 	beq	r10,r8,1000d684 <__gedf2+0xd0>
1000d670:	523fe52e 	bgeu	r10,r8,1000d608 <__alt_data_end+0xf800d608>
1000d674:	283ff026 	beq	r5,zero,1000d638 <__alt_data_end+0xf800d638>
1000d678:	003ff706 	br	1000d658 <__alt_data_end+0xf800d658>
1000d67c:	00bfff84 	movi	r2,-2
1000d680:	f800283a 	ret
1000d684:	313ff336 	bltu	r6,r4,1000d654 <__alt_data_end+0xf800d654>
1000d688:	21bfdf2e 	bgeu	r4,r6,1000d608 <__alt_data_end+0xf800d608>
1000d68c:	283fea26 	beq	r5,zero,1000d638 <__alt_data_end+0xf800d638>
1000d690:	003ff106 	br	1000d658 <__alt_data_end+0xf800d658>

1000d694 <__ledf2>:
1000d694:	2804d53a 	srli	r2,r5,20
1000d698:	3810d53a 	srli	r8,r7,20
1000d69c:	00c00434 	movhi	r3,16
1000d6a0:	18ffffc4 	addi	r3,r3,-1
1000d6a4:	0241ffc4 	movi	r9,2047
1000d6a8:	1081ffcc 	andi	r2,r2,2047
1000d6ac:	28d4703a 	and	r10,r5,r3
1000d6b0:	4250703a 	and	r8,r8,r9
1000d6b4:	38c6703a 	and	r3,r7,r3
1000d6b8:	280ad7fa 	srli	r5,r5,31
1000d6bc:	380ed7fa 	srli	r7,r7,31
1000d6c0:	12400b26 	beq	r2,r9,1000d6f0 <__ledf2+0x5c>
1000d6c4:	42401926 	beq	r8,r9,1000d72c <__ledf2+0x98>
1000d6c8:	10000c1e 	bne	r2,zero,1000d6fc <__ledf2+0x68>
1000d6cc:	5112b03a 	or	r9,r10,r4
1000d6d0:	4813003a 	cmpeq	r9,r9,zero
1000d6d4:	4817883a 	mov	r11,r9
1000d6d8:	40000f26 	beq	r8,zero,1000d718 <__ledf2+0x84>
1000d6dc:	39c03fcc 	andi	r7,r7,255
1000d6e0:	58001826 	beq	r11,zero,1000d744 <__ledf2+0xb0>
1000d6e4:	38000a1e 	bne	r7,zero,1000d710 <__ledf2+0x7c>
1000d6e8:	00bfffc4 	movi	r2,-1
1000d6ec:	f800283a 	ret
1000d6f0:	5112b03a 	or	r9,r10,r4
1000d6f4:	48000f1e 	bne	r9,zero,1000d734 <__ledf2+0xa0>
1000d6f8:	40800c26 	beq	r8,r2,1000d72c <__ledf2+0x98>
1000d6fc:	4000101e 	bne	r8,zero,1000d740 <__ledf2+0xac>
1000d700:	1992b03a 	or	r9,r3,r6
1000d704:	0017883a 	mov	r11,zero
1000d708:	483ff41e 	bne	r9,zero,1000d6dc <__alt_data_end+0xf800d6dc>
1000d70c:	283ff61e 	bne	r5,zero,1000d6e8 <__alt_data_end+0xf800d6e8>
1000d710:	00800044 	movi	r2,1
1000d714:	f800283a 	ret
1000d718:	1998b03a 	or	r12,r3,r6
1000d71c:	603fef1e 	bne	r12,zero,1000d6dc <__alt_data_end+0xf800d6dc>
1000d720:	483ffa26 	beq	r9,zero,1000d70c <__alt_data_end+0xf800d70c>
1000d724:	0005883a 	mov	r2,zero
1000d728:	f800283a 	ret
1000d72c:	1992b03a 	or	r9,r3,r6
1000d730:	48000226 	beq	r9,zero,1000d73c <__ledf2+0xa8>
1000d734:	00800084 	movi	r2,2
1000d738:	f800283a 	ret
1000d73c:	103fe326 	beq	r2,zero,1000d6cc <__alt_data_end+0xf800d6cc>
1000d740:	39c03fcc 	andi	r7,r7,255
1000d744:	29fff11e 	bne	r5,r7,1000d70c <__alt_data_end+0xf800d70c>
1000d748:	40bff016 	blt	r8,r2,1000d70c <__alt_data_end+0xf800d70c>
1000d74c:	12000316 	blt	r2,r8,1000d75c <__ledf2+0xc8>
1000d750:	1abfee36 	bltu	r3,r10,1000d70c <__alt_data_end+0xf800d70c>
1000d754:	50c00326 	beq	r10,r3,1000d764 <__ledf2+0xd0>
1000d758:	50fff22e 	bgeu	r10,r3,1000d724 <__alt_data_end+0xf800d724>
1000d75c:	283fe226 	beq	r5,zero,1000d6e8 <__alt_data_end+0xf800d6e8>
1000d760:	003feb06 	br	1000d710 <__alt_data_end+0xf800d710>
1000d764:	313fe936 	bltu	r6,r4,1000d70c <__alt_data_end+0xf800d70c>
1000d768:	21bfee2e 	bgeu	r4,r6,1000d724 <__alt_data_end+0xf800d724>
1000d76c:	283fde26 	beq	r5,zero,1000d6e8 <__alt_data_end+0xf800d6e8>
1000d770:	003fe706 	br	1000d710 <__alt_data_end+0xf800d710>

1000d774 <__muldf3>:
1000d774:	deffee04 	addi	sp,sp,-72
1000d778:	dd000c15 	stw	r20,48(sp)
1000d77c:	2828d53a 	srli	r20,r5,20
1000d780:	dd400d15 	stw	r21,52(sp)
1000d784:	282ad7fa 	srli	r21,r5,31
1000d788:	dc000815 	stw	r16,32(sp)
1000d78c:	04000434 	movhi	r16,16
1000d790:	ddc00f15 	stw	r23,60(sp)
1000d794:	dcc00b15 	stw	r19,44(sp)
1000d798:	dc800a15 	stw	r18,40(sp)
1000d79c:	843fffc4 	addi	r16,r16,-1
1000d7a0:	dfc01115 	stw	ra,68(sp)
1000d7a4:	df001015 	stw	fp,64(sp)
1000d7a8:	dd800e15 	stw	r22,56(sp)
1000d7ac:	dc400915 	stw	r17,36(sp)
1000d7b0:	a501ffcc 	andi	r20,r20,2047
1000d7b4:	2025883a 	mov	r18,r4
1000d7b8:	202f883a 	mov	r23,r4
1000d7bc:	2c20703a 	and	r16,r5,r16
1000d7c0:	a827883a 	mov	r19,r21
1000d7c4:	aa403fcc 	andi	r9,r21,255
1000d7c8:	a0005926 	beq	r20,zero,1000d930 <__muldf3+0x1bc>
1000d7cc:	0081ffc4 	movi	r2,2047
1000d7d0:	a0803426 	beq	r20,r2,1000d8a4 <__muldf3+0x130>
1000d7d4:	84000434 	orhi	r16,r16,16
1000d7d8:	2004d77a 	srli	r2,r4,29
1000d7dc:	802090fa 	slli	r16,r16,3
1000d7e0:	202e90fa 	slli	r23,r4,3
1000d7e4:	a53f0044 	addi	r20,r20,-1023
1000d7e8:	80a0b03a 	or	r16,r16,r2
1000d7ec:	000b883a 	mov	r5,zero
1000d7f0:	0039883a 	mov	fp,zero
1000d7f4:	3806d53a 	srli	r3,r7,20
1000d7f8:	382cd7fa 	srli	r22,r7,31
1000d7fc:	00800434 	movhi	r2,16
1000d800:	10bfffc4 	addi	r2,r2,-1
1000d804:	18c1ffcc 	andi	r3,r3,2047
1000d808:	3025883a 	mov	r18,r6
1000d80c:	38a2703a 	and	r17,r7,r2
1000d810:	b2803fcc 	andi	r10,r22,255
1000d814:	18006426 	beq	r3,zero,1000d9a8 <__muldf3+0x234>
1000d818:	0081ffc4 	movi	r2,2047
1000d81c:	18805c26 	beq	r3,r2,1000d990 <__muldf3+0x21c>
1000d820:	8c400434 	orhi	r17,r17,16
1000d824:	3004d77a 	srli	r2,r6,29
1000d828:	882290fa 	slli	r17,r17,3
1000d82c:	302490fa 	slli	r18,r6,3
1000d830:	18ff0044 	addi	r3,r3,-1023
1000d834:	88a2b03a 	or	r17,r17,r2
1000d838:	000f883a 	mov	r7,zero
1000d83c:	394ab03a 	or	r5,r7,r5
1000d840:	280a90ba 	slli	r5,r5,2
1000d844:	00840074 	movhi	r2,4097
1000d848:	10b61904 	addi	r2,r2,-10140
1000d84c:	288b883a 	add	r5,r5,r2
1000d850:	28800017 	ldw	r2,0(r5)
1000d854:	a0c7883a 	add	r3,r20,r3
1000d858:	b54cf03a 	xor	r6,r22,r21
1000d85c:	1a000044 	addi	r8,r3,1
1000d860:	1000683a 	jmp	r2
1000d864:	1000daa8 	cmpgeui	zero,r2,874
1000d868:	1000da94 	ori	zero,r2,874
1000d86c:	1000da94 	ori	zero,r2,874
1000d870:	1000da80 	call	11000da8 <_gp+0xfe5530>
1000d874:	1000d8c0 	call	11000d8c <_gp+0xfe5514>
1000d878:	1000d8c0 	call	11000d8c <_gp+0xfe5514>
1000d87c:	1000da68 	cmpgeui	zero,r2,873
1000d880:	1000da80 	call	11000da8 <_gp+0xfe5530>
1000d884:	1000d8c0 	call	11000d8c <_gp+0xfe5514>
1000d888:	1000da68 	cmpgeui	zero,r2,873
1000d88c:	1000d8c0 	call	11000d8c <_gp+0xfe5514>
1000d890:	1000da80 	call	11000da8 <_gp+0xfe5530>
1000d894:	1000d8c4 	addi	zero,r2,867
1000d898:	1000d8c4 	addi	zero,r2,867
1000d89c:	1000d8c4 	addi	zero,r2,867
1000d8a0:	1000dde4 	muli	zero,r2,887
1000d8a4:	8104b03a 	or	r2,r16,r4
1000d8a8:	10006c1e 	bne	r2,zero,1000da5c <__muldf3+0x2e8>
1000d8ac:	01400204 	movi	r5,8
1000d8b0:	0021883a 	mov	r16,zero
1000d8b4:	002f883a 	mov	r23,zero
1000d8b8:	07000084 	movi	fp,2
1000d8bc:	003fcd06 	br	1000d7f4 <__alt_data_end+0xf800d7f4>
1000d8c0:	3013883a 	mov	r9,r6
1000d8c4:	00800084 	movi	r2,2
1000d8c8:	e080501e 	bne	fp,r2,1000da0c <__muldf3+0x298>
1000d8cc:	4cc0004c 	andi	r19,r9,1
1000d8d0:	0101ffc4 	movi	r4,2047
1000d8d4:	0021883a 	mov	r16,zero
1000d8d8:	002f883a 	mov	r23,zero
1000d8dc:	2008953a 	slli	r4,r4,20
1000d8e0:	98c03fcc 	andi	r3,r19,255
1000d8e4:	04400434 	movhi	r17,16
1000d8e8:	8c7fffc4 	addi	r17,r17,-1
1000d8ec:	180697fa 	slli	r3,r3,31
1000d8f0:	8460703a 	and	r16,r16,r17
1000d8f4:	8120b03a 	or	r16,r16,r4
1000d8f8:	80c6b03a 	or	r3,r16,r3
1000d8fc:	b805883a 	mov	r2,r23
1000d900:	dfc01117 	ldw	ra,68(sp)
1000d904:	df001017 	ldw	fp,64(sp)
1000d908:	ddc00f17 	ldw	r23,60(sp)
1000d90c:	dd800e17 	ldw	r22,56(sp)
1000d910:	dd400d17 	ldw	r21,52(sp)
1000d914:	dd000c17 	ldw	r20,48(sp)
1000d918:	dcc00b17 	ldw	r19,44(sp)
1000d91c:	dc800a17 	ldw	r18,40(sp)
1000d920:	dc400917 	ldw	r17,36(sp)
1000d924:	dc000817 	ldw	r16,32(sp)
1000d928:	dec01204 	addi	sp,sp,72
1000d92c:	f800283a 	ret
1000d930:	8104b03a 	or	r2,r16,r4
1000d934:	10004426 	beq	r2,zero,1000da48 <__muldf3+0x2d4>
1000d938:	80014b26 	beq	r16,zero,1000de68 <__muldf3+0x6f4>
1000d93c:	8009883a 	mov	r4,r16
1000d940:	d9800715 	stw	r6,28(sp)
1000d944:	d9c00215 	stw	r7,8(sp)
1000d948:	da400415 	stw	r9,16(sp)
1000d94c:	000eaac0 	call	1000eaac <__clzsi2>
1000d950:	d9800717 	ldw	r6,28(sp)
1000d954:	d9c00217 	ldw	r7,8(sp)
1000d958:	da400417 	ldw	r9,16(sp)
1000d95c:	1007883a 	mov	r3,r2
1000d960:	01000a04 	movi	r4,40
1000d964:	1dfffe04 	addi	r23,r3,-8
1000d968:	20c9c83a 	sub	r4,r4,r3
1000d96c:	85e0983a 	sll	r16,r16,r23
1000d970:	9108d83a 	srl	r4,r18,r4
1000d974:	95ee983a 	sll	r23,r18,r23
1000d978:	2420b03a 	or	r16,r4,r16
1000d97c:	053f0344 	movi	r20,-1011
1000d980:	a0e9c83a 	sub	r20,r20,r3
1000d984:	000b883a 	mov	r5,zero
1000d988:	0039883a 	mov	fp,zero
1000d98c:	003f9906 	br	1000d7f4 <__alt_data_end+0xf800d7f4>
1000d990:	8984b03a 	or	r2,r17,r6
1000d994:	10002a1e 	bne	r2,zero,1000da40 <__muldf3+0x2cc>
1000d998:	0023883a 	mov	r17,zero
1000d99c:	0025883a 	mov	r18,zero
1000d9a0:	01c00084 	movi	r7,2
1000d9a4:	003fa506 	br	1000d83c <__alt_data_end+0xf800d83c>
1000d9a8:	8984b03a 	or	r2,r17,r6
1000d9ac:	10002026 	beq	r2,zero,1000da30 <__muldf3+0x2bc>
1000d9b0:	88011c26 	beq	r17,zero,1000de24 <__muldf3+0x6b0>
1000d9b4:	8809883a 	mov	r4,r17
1000d9b8:	d9400215 	stw	r5,8(sp)
1000d9bc:	d9800715 	stw	r6,28(sp)
1000d9c0:	da400415 	stw	r9,16(sp)
1000d9c4:	da800315 	stw	r10,12(sp)
1000d9c8:	000eaac0 	call	1000eaac <__clzsi2>
1000d9cc:	d9400217 	ldw	r5,8(sp)
1000d9d0:	d9800717 	ldw	r6,28(sp)
1000d9d4:	da400417 	ldw	r9,16(sp)
1000d9d8:	da800317 	ldw	r10,12(sp)
1000d9dc:	1007883a 	mov	r3,r2
1000d9e0:	01000a04 	movi	r4,40
1000d9e4:	1cbffe04 	addi	r18,r3,-8
1000d9e8:	20c9c83a 	sub	r4,r4,r3
1000d9ec:	8ca2983a 	sll	r17,r17,r18
1000d9f0:	3108d83a 	srl	r4,r6,r4
1000d9f4:	34a4983a 	sll	r18,r6,r18
1000d9f8:	2462b03a 	or	r17,r4,r17
1000d9fc:	00bf0344 	movi	r2,-1011
1000da00:	10c7c83a 	sub	r3,r2,r3
1000da04:	000f883a 	mov	r7,zero
1000da08:	003f8c06 	br	1000d83c <__alt_data_end+0xf800d83c>
1000da0c:	008000c4 	movi	r2,3
1000da10:	e0816d26 	beq	fp,r2,1000dfc8 <__muldf3+0x854>
1000da14:	00800044 	movi	r2,1
1000da18:	e081321e 	bne	fp,r2,1000dee4 <__muldf3+0x770>
1000da1c:	48a6703a 	and	r19,r9,r2
1000da20:	0009883a 	mov	r4,zero
1000da24:	0021883a 	mov	r16,zero
1000da28:	002f883a 	mov	r23,zero
1000da2c:	003fab06 	br	1000d8dc <__alt_data_end+0xf800d8dc>
1000da30:	0023883a 	mov	r17,zero
1000da34:	0025883a 	mov	r18,zero
1000da38:	01c00044 	movi	r7,1
1000da3c:	003f7f06 	br	1000d83c <__alt_data_end+0xf800d83c>
1000da40:	01c000c4 	movi	r7,3
1000da44:	003f7d06 	br	1000d83c <__alt_data_end+0xf800d83c>
1000da48:	01400104 	movi	r5,4
1000da4c:	0021883a 	mov	r16,zero
1000da50:	002f883a 	mov	r23,zero
1000da54:	07000044 	movi	fp,1
1000da58:	003f6606 	br	1000d7f4 <__alt_data_end+0xf800d7f4>
1000da5c:	01400304 	movi	r5,12
1000da60:	070000c4 	movi	fp,3
1000da64:	003f6306 	br	1000d7f4 <__alt_data_end+0xf800d7f4>
1000da68:	04000434 	movhi	r16,16
1000da6c:	0027883a 	mov	r19,zero
1000da70:	843fffc4 	addi	r16,r16,-1
1000da74:	05ffffc4 	movi	r23,-1
1000da78:	0101ffc4 	movi	r4,2047
1000da7c:	003f9706 	br	1000d8dc <__alt_data_end+0xf800d8dc>
1000da80:	8821883a 	mov	r16,r17
1000da84:	902f883a 	mov	r23,r18
1000da88:	5013883a 	mov	r9,r10
1000da8c:	3839883a 	mov	fp,r7
1000da90:	003f8c06 	br	1000d8c4 <__alt_data_end+0xf800d8c4>
1000da94:	8821883a 	mov	r16,r17
1000da98:	902f883a 	mov	r23,r18
1000da9c:	3013883a 	mov	r9,r6
1000daa0:	3839883a 	mov	fp,r7
1000daa4:	003f8706 	br	1000d8c4 <__alt_data_end+0xf800d8c4>
1000daa8:	b82ad43a 	srli	r21,r23,16
1000daac:	9038d43a 	srli	fp,r18,16
1000dab0:	bdffffcc 	andi	r23,r23,65535
1000dab4:	94bfffcc 	andi	r18,r18,65535
1000dab8:	9009883a 	mov	r4,r18
1000dabc:	b80b883a 	mov	r5,r23
1000dac0:	d8c00515 	stw	r3,20(sp)
1000dac4:	d9800715 	stw	r6,28(sp)
1000dac8:	da000615 	stw	r8,24(sp)
1000dacc:	000c2ec0 	call	1000c2ec <__mulsi3>
1000dad0:	9009883a 	mov	r4,r18
1000dad4:	a80b883a 	mov	r5,r21
1000dad8:	1029883a 	mov	r20,r2
1000dadc:	000c2ec0 	call	1000c2ec <__mulsi3>
1000dae0:	e009883a 	mov	r4,fp
1000dae4:	a80b883a 	mov	r5,r21
1000dae8:	102d883a 	mov	r22,r2
1000daec:	000c2ec0 	call	1000c2ec <__mulsi3>
1000daf0:	e009883a 	mov	r4,fp
1000daf4:	b80b883a 	mov	r5,r23
1000daf8:	1027883a 	mov	r19,r2
1000dafc:	000c2ec0 	call	1000c2ec <__mulsi3>
1000db00:	a008d43a 	srli	r4,r20,16
1000db04:	b085883a 	add	r2,r22,r2
1000db08:	d8c00517 	ldw	r3,20(sp)
1000db0c:	110f883a 	add	r7,r2,r4
1000db10:	d9800717 	ldw	r6,28(sp)
1000db14:	da000617 	ldw	r8,24(sp)
1000db18:	3d80022e 	bgeu	r7,r22,1000db24 <__muldf3+0x3b0>
1000db1c:	00800074 	movhi	r2,1
1000db20:	98a7883a 	add	r19,r19,r2
1000db24:	3804943a 	slli	r2,r7,16
1000db28:	380ed43a 	srli	r7,r7,16
1000db2c:	882cd43a 	srli	r22,r17,16
1000db30:	a53fffcc 	andi	r20,r20,65535
1000db34:	8c7fffcc 	andi	r17,r17,65535
1000db38:	1529883a 	add	r20,r2,r20
1000db3c:	8809883a 	mov	r4,r17
1000db40:	b80b883a 	mov	r5,r23
1000db44:	d8c00515 	stw	r3,20(sp)
1000db48:	d9800715 	stw	r6,28(sp)
1000db4c:	da000615 	stw	r8,24(sp)
1000db50:	d9c00015 	stw	r7,0(sp)
1000db54:	dd000115 	stw	r20,4(sp)
1000db58:	000c2ec0 	call	1000c2ec <__mulsi3>
1000db5c:	a80b883a 	mov	r5,r21
1000db60:	8809883a 	mov	r4,r17
1000db64:	d8800415 	stw	r2,16(sp)
1000db68:	000c2ec0 	call	1000c2ec <__mulsi3>
1000db6c:	a80b883a 	mov	r5,r21
1000db70:	b009883a 	mov	r4,r22
1000db74:	1029883a 	mov	r20,r2
1000db78:	000c2ec0 	call	1000c2ec <__mulsi3>
1000db7c:	b009883a 	mov	r4,r22
1000db80:	b80b883a 	mov	r5,r23
1000db84:	102b883a 	mov	r21,r2
1000db88:	000c2ec0 	call	1000c2ec <__mulsi3>
1000db8c:	da400417 	ldw	r9,16(sp)
1000db90:	a085883a 	add	r2,r20,r2
1000db94:	d8c00517 	ldw	r3,20(sp)
1000db98:	4808d43a 	srli	r4,r9,16
1000db9c:	d9800717 	ldw	r6,28(sp)
1000dba0:	da000617 	ldw	r8,24(sp)
1000dba4:	1109883a 	add	r4,r2,r4
1000dba8:	2500022e 	bgeu	r4,r20,1000dbb4 <__muldf3+0x440>
1000dbac:	00800074 	movhi	r2,1
1000dbb0:	a8ab883a 	add	r21,r21,r2
1000dbb4:	200e943a 	slli	r7,r4,16
1000dbb8:	2004d43a 	srli	r2,r4,16
1000dbbc:	802ed43a 	srli	r23,r16,16
1000dbc0:	843fffcc 	andi	r16,r16,65535
1000dbc4:	4d3fffcc 	andi	r20,r9,65535
1000dbc8:	9009883a 	mov	r4,r18
1000dbcc:	800b883a 	mov	r5,r16
1000dbd0:	3d29883a 	add	r20,r7,r20
1000dbd4:	d8c00515 	stw	r3,20(sp)
1000dbd8:	d9800715 	stw	r6,28(sp)
1000dbdc:	da000615 	stw	r8,24(sp)
1000dbe0:	a8ab883a 	add	r21,r21,r2
1000dbe4:	000c2ec0 	call	1000c2ec <__mulsi3>
1000dbe8:	9009883a 	mov	r4,r18
1000dbec:	b80b883a 	mov	r5,r23
1000dbf0:	d8800315 	stw	r2,12(sp)
1000dbf4:	000c2ec0 	call	1000c2ec <__mulsi3>
1000dbf8:	e009883a 	mov	r4,fp
1000dbfc:	b80b883a 	mov	r5,r23
1000dc00:	1025883a 	mov	r18,r2
1000dc04:	000c2ec0 	call	1000c2ec <__mulsi3>
1000dc08:	e009883a 	mov	r4,fp
1000dc0c:	800b883a 	mov	r5,r16
1000dc10:	d8800215 	stw	r2,8(sp)
1000dc14:	000c2ec0 	call	1000c2ec <__mulsi3>
1000dc18:	da800317 	ldw	r10,12(sp)
1000dc1c:	d9400017 	ldw	r5,0(sp)
1000dc20:	9085883a 	add	r2,r18,r2
1000dc24:	5008d43a 	srli	r4,r10,16
1000dc28:	a153883a 	add	r9,r20,r5
1000dc2c:	d8c00517 	ldw	r3,20(sp)
1000dc30:	1109883a 	add	r4,r2,r4
1000dc34:	d9800717 	ldw	r6,28(sp)
1000dc38:	da000617 	ldw	r8,24(sp)
1000dc3c:	dac00217 	ldw	r11,8(sp)
1000dc40:	2480022e 	bgeu	r4,r18,1000dc4c <__muldf3+0x4d8>
1000dc44:	00800074 	movhi	r2,1
1000dc48:	5897883a 	add	r11,r11,r2
1000dc4c:	200e943a 	slli	r7,r4,16
1000dc50:	2038d43a 	srli	fp,r4,16
1000dc54:	52bfffcc 	andi	r10,r10,65535
1000dc58:	3a8f883a 	add	r7,r7,r10
1000dc5c:	8809883a 	mov	r4,r17
1000dc60:	800b883a 	mov	r5,r16
1000dc64:	d8c00515 	stw	r3,20(sp)
1000dc68:	d9800715 	stw	r6,28(sp)
1000dc6c:	d9c00215 	stw	r7,8(sp)
1000dc70:	da000615 	stw	r8,24(sp)
1000dc74:	da400415 	stw	r9,16(sp)
1000dc78:	5f39883a 	add	fp,r11,fp
1000dc7c:	000c2ec0 	call	1000c2ec <__mulsi3>
1000dc80:	8809883a 	mov	r4,r17
1000dc84:	b80b883a 	mov	r5,r23
1000dc88:	1025883a 	mov	r18,r2
1000dc8c:	000c2ec0 	call	1000c2ec <__mulsi3>
1000dc90:	b009883a 	mov	r4,r22
1000dc94:	b80b883a 	mov	r5,r23
1000dc98:	d8800315 	stw	r2,12(sp)
1000dc9c:	000c2ec0 	call	1000c2ec <__mulsi3>
1000dca0:	b009883a 	mov	r4,r22
1000dca4:	800b883a 	mov	r5,r16
1000dca8:	1023883a 	mov	r17,r2
1000dcac:	000c2ec0 	call	1000c2ec <__mulsi3>
1000dcb0:	da800317 	ldw	r10,12(sp)
1000dcb4:	9008d43a 	srli	r4,r18,16
1000dcb8:	d8c00517 	ldw	r3,20(sp)
1000dcbc:	5085883a 	add	r2,r10,r2
1000dcc0:	1109883a 	add	r4,r2,r4
1000dcc4:	d9800717 	ldw	r6,28(sp)
1000dcc8:	d9c00217 	ldw	r7,8(sp)
1000dccc:	da000617 	ldw	r8,24(sp)
1000dcd0:	da400417 	ldw	r9,16(sp)
1000dcd4:	2280022e 	bgeu	r4,r10,1000dce0 <__muldf3+0x56c>
1000dcd8:	00800074 	movhi	r2,1
1000dcdc:	88a3883a 	add	r17,r17,r2
1000dce0:	2004943a 	slli	r2,r4,16
1000dce4:	94bfffcc 	andi	r18,r18,65535
1000dce8:	4ce7883a 	add	r19,r9,r19
1000dcec:	14a5883a 	add	r18,r2,r18
1000dcf0:	9d29803a 	cmpltu	r20,r19,r20
1000dcf4:	9565883a 	add	r18,r18,r21
1000dcf8:	9505883a 	add	r2,r18,r20
1000dcfc:	99e7883a 	add	r19,r19,r7
1000dd00:	99cf803a 	cmpltu	r7,r19,r7
1000dd04:	e08b883a 	add	r5,fp,r2
1000dd08:	2008d43a 	srli	r4,r4,16
1000dd0c:	29ef883a 	add	r23,r5,r7
1000dd10:	1529803a 	cmpltu	r20,r2,r20
1000dd14:	956b803a 	cmpltu	r21,r18,r21
1000dd18:	b9cf803a 	cmpltu	r7,r23,r7
1000dd1c:	a564b03a 	or	r18,r20,r21
1000dd20:	2f39803a 	cmpltu	fp,r5,fp
1000dd24:	9125883a 	add	r18,r18,r4
1000dd28:	3f38b03a 	or	fp,r7,fp
1000dd2c:	9725883a 	add	r18,r18,fp
1000dd30:	9804927a 	slli	r2,r19,9
1000dd34:	9463883a 	add	r17,r18,r17
1000dd38:	d9000117 	ldw	r4,4(sp)
1000dd3c:	b820d5fa 	srli	r16,r23,23
1000dd40:	8822927a 	slli	r17,r17,9
1000dd44:	9826d5fa 	srli	r19,r19,23
1000dd48:	1104b03a 	or	r2,r2,r4
1000dd4c:	b82e927a 	slli	r23,r23,9
1000dd50:	1004c03a 	cmpne	r2,r2,zero
1000dd54:	8c20b03a 	or	r16,r17,r16
1000dd58:	14e6b03a 	or	r19,r2,r19
1000dd5c:	8080402c 	andhi	r2,r16,256
1000dd60:	9deeb03a 	or	r23,r19,r23
1000dd64:	10000726 	beq	r2,zero,1000dd84 <__muldf3+0x610>
1000dd68:	b804d07a 	srli	r2,r23,1
1000dd6c:	800697fa 	slli	r3,r16,31
1000dd70:	bdc0004c 	andi	r23,r23,1
1000dd74:	8020d07a 	srli	r16,r16,1
1000dd78:	b8aeb03a 	or	r23,r23,r2
1000dd7c:	b8eeb03a 	or	r23,r23,r3
1000dd80:	4007883a 	mov	r3,r8
1000dd84:	1900ffc4 	addi	r4,r3,1023
1000dd88:	01004d0e 	bge	zero,r4,1000dec0 <__muldf3+0x74c>
1000dd8c:	b88001cc 	andi	r2,r23,7
1000dd90:	10000726 	beq	r2,zero,1000ddb0 <__muldf3+0x63c>
1000dd94:	b94003cc 	andi	r5,r23,15
1000dd98:	00800104 	movi	r2,4
1000dd9c:	28800426 	beq	r5,r2,1000ddb0 <__muldf3+0x63c>
1000dda0:	b885883a 	add	r2,r23,r2
1000dda4:	15ef803a 	cmpltu	r23,r2,r23
1000dda8:	85e1883a 	add	r16,r16,r23
1000ddac:	102f883a 	mov	r23,r2
1000ddb0:	8080402c 	andhi	r2,r16,256
1000ddb4:	10000426 	beq	r2,zero,1000ddc8 <__muldf3+0x654>
1000ddb8:	00bfc034 	movhi	r2,65280
1000ddbc:	10bfffc4 	addi	r2,r2,-1
1000ddc0:	19010004 	addi	r4,r3,1024
1000ddc4:	80a0703a 	and	r16,r16,r2
1000ddc8:	0081ff84 	movi	r2,2046
1000ddcc:	1100340e 	bge	r2,r4,1000dea0 <__muldf3+0x72c>
1000ddd0:	34c0004c 	andi	r19,r6,1
1000ddd4:	0101ffc4 	movi	r4,2047
1000ddd8:	0021883a 	mov	r16,zero
1000dddc:	002f883a 	mov	r23,zero
1000dde0:	003ebe06 	br	1000d8dc <__alt_data_end+0xf800d8dc>
1000dde4:	8080022c 	andhi	r2,r16,8
1000dde8:	10000926 	beq	r2,zero,1000de10 <__muldf3+0x69c>
1000ddec:	8880022c 	andhi	r2,r17,8
1000ddf0:	1000071e 	bne	r2,zero,1000de10 <__muldf3+0x69c>
1000ddf4:	00800434 	movhi	r2,16
1000ddf8:	8c000234 	orhi	r16,r17,8
1000ddfc:	10bfffc4 	addi	r2,r2,-1
1000de00:	b027883a 	mov	r19,r22
1000de04:	80a0703a 	and	r16,r16,r2
1000de08:	902f883a 	mov	r23,r18
1000de0c:	003f1a06 	br	1000da78 <__alt_data_end+0xf800da78>
1000de10:	00800434 	movhi	r2,16
1000de14:	84000234 	orhi	r16,r16,8
1000de18:	10bfffc4 	addi	r2,r2,-1
1000de1c:	80a0703a 	and	r16,r16,r2
1000de20:	003f1506 	br	1000da78 <__alt_data_end+0xf800da78>
1000de24:	3009883a 	mov	r4,r6
1000de28:	d9400215 	stw	r5,8(sp)
1000de2c:	d9800715 	stw	r6,28(sp)
1000de30:	da400415 	stw	r9,16(sp)
1000de34:	da800315 	stw	r10,12(sp)
1000de38:	000eaac0 	call	1000eaac <__clzsi2>
1000de3c:	10c00804 	addi	r3,r2,32
1000de40:	010009c4 	movi	r4,39
1000de44:	d9400217 	ldw	r5,8(sp)
1000de48:	d9800717 	ldw	r6,28(sp)
1000de4c:	da400417 	ldw	r9,16(sp)
1000de50:	da800317 	ldw	r10,12(sp)
1000de54:	20fee20e 	bge	r4,r3,1000d9e0 <__alt_data_end+0xf800d9e0>
1000de58:	147ffe04 	addi	r17,r2,-8
1000de5c:	9462983a 	sll	r17,r18,r17
1000de60:	0025883a 	mov	r18,zero
1000de64:	003ee506 	br	1000d9fc <__alt_data_end+0xf800d9fc>
1000de68:	d9800715 	stw	r6,28(sp)
1000de6c:	d9c00215 	stw	r7,8(sp)
1000de70:	da400415 	stw	r9,16(sp)
1000de74:	000eaac0 	call	1000eaac <__clzsi2>
1000de78:	10c00804 	addi	r3,r2,32
1000de7c:	010009c4 	movi	r4,39
1000de80:	d9800717 	ldw	r6,28(sp)
1000de84:	d9c00217 	ldw	r7,8(sp)
1000de88:	da400417 	ldw	r9,16(sp)
1000de8c:	20feb40e 	bge	r4,r3,1000d960 <__alt_data_end+0xf800d960>
1000de90:	143ffe04 	addi	r16,r2,-8
1000de94:	9420983a 	sll	r16,r18,r16
1000de98:	002f883a 	mov	r23,zero
1000de9c:	003eb706 	br	1000d97c <__alt_data_end+0xf800d97c>
1000dea0:	8004977a 	slli	r2,r16,29
1000dea4:	b82ed0fa 	srli	r23,r23,3
1000dea8:	8020927a 	slli	r16,r16,9
1000deac:	2101ffcc 	andi	r4,r4,2047
1000deb0:	15eeb03a 	or	r23,r2,r23
1000deb4:	8020d33a 	srli	r16,r16,12
1000deb8:	34c0004c 	andi	r19,r6,1
1000debc:	003e8706 	br	1000d8dc <__alt_data_end+0xf800d8dc>
1000dec0:	00bf0084 	movi	r2,-1022
1000dec4:	10c5c83a 	sub	r2,r2,r3
1000dec8:	01000e04 	movi	r4,56
1000decc:	2080080e 	bge	r4,r2,1000def0 <__muldf3+0x77c>
1000ded0:	34c0004c 	andi	r19,r6,1
1000ded4:	0009883a 	mov	r4,zero
1000ded8:	0021883a 	mov	r16,zero
1000dedc:	002f883a 	mov	r23,zero
1000dee0:	003e7e06 	br	1000d8dc <__alt_data_end+0xf800d8dc>
1000dee4:	4007883a 	mov	r3,r8
1000dee8:	480d883a 	mov	r6,r9
1000deec:	003fa506 	br	1000dd84 <__alt_data_end+0xf800dd84>
1000def0:	010007c4 	movi	r4,31
1000def4:	20801816 	blt	r4,r2,1000df58 <__muldf3+0x7e4>
1000def8:	18c10784 	addi	r3,r3,1054
1000defc:	80c8983a 	sll	r4,r16,r3
1000df00:	b88ad83a 	srl	r5,r23,r2
1000df04:	b8c6983a 	sll	r3,r23,r3
1000df08:	80a0d83a 	srl	r16,r16,r2
1000df0c:	2908b03a 	or	r4,r5,r4
1000df10:	1804c03a 	cmpne	r2,r3,zero
1000df14:	2088b03a 	or	r4,r4,r2
1000df18:	208001cc 	andi	r2,r4,7
1000df1c:	10000726 	beq	r2,zero,1000df3c <__muldf3+0x7c8>
1000df20:	20c003cc 	andi	r3,r4,15
1000df24:	00800104 	movi	r2,4
1000df28:	18800426 	beq	r3,r2,1000df3c <__muldf3+0x7c8>
1000df2c:	20c00104 	addi	r3,r4,4
1000df30:	1905803a 	cmpltu	r2,r3,r4
1000df34:	80a1883a 	add	r16,r16,r2
1000df38:	1809883a 	mov	r4,r3
1000df3c:	8080202c 	andhi	r2,r16,128
1000df40:	10001b26 	beq	r2,zero,1000dfb0 <__muldf3+0x83c>
1000df44:	34c0004c 	andi	r19,r6,1
1000df48:	01000044 	movi	r4,1
1000df4c:	0021883a 	mov	r16,zero
1000df50:	002f883a 	mov	r23,zero
1000df54:	003e6106 	br	1000d8dc <__alt_data_end+0xf800d8dc>
1000df58:	013ef884 	movi	r4,-1054
1000df5c:	20c9c83a 	sub	r4,r4,r3
1000df60:	01400804 	movi	r5,32
1000df64:	8108d83a 	srl	r4,r16,r4
1000df68:	11401526 	beq	r2,r5,1000dfc0 <__muldf3+0x84c>
1000df6c:	18c10f84 	addi	r3,r3,1086
1000df70:	80e0983a 	sll	r16,r16,r3
1000df74:	85eeb03a 	or	r23,r16,r23
1000df78:	b804c03a 	cmpne	r2,r23,zero
1000df7c:	1108b03a 	or	r4,r2,r4
1000df80:	20c001cc 	andi	r3,r4,7
1000df84:	1800061e 	bne	r3,zero,1000dfa0 <__muldf3+0x82c>
1000df88:	0021883a 	mov	r16,zero
1000df8c:	202ed0fa 	srli	r23,r4,3
1000df90:	34c0004c 	andi	r19,r6,1
1000df94:	0009883a 	mov	r4,zero
1000df98:	b8eeb03a 	or	r23,r23,r3
1000df9c:	003e4f06 	br	1000d8dc <__alt_data_end+0xf800d8dc>
1000dfa0:	20c003cc 	andi	r3,r4,15
1000dfa4:	00800104 	movi	r2,4
1000dfa8:	0021883a 	mov	r16,zero
1000dfac:	18bfdf1e 	bne	r3,r2,1000df2c <__alt_data_end+0xf800df2c>
1000dfb0:	8004927a 	slli	r2,r16,9
1000dfb4:	8006977a 	slli	r3,r16,29
1000dfb8:	1020d33a 	srli	r16,r2,12
1000dfbc:	003ff306 	br	1000df8c <__alt_data_end+0xf800df8c>
1000dfc0:	0021883a 	mov	r16,zero
1000dfc4:	003feb06 	br	1000df74 <__alt_data_end+0xf800df74>
1000dfc8:	00800434 	movhi	r2,16
1000dfcc:	84000234 	orhi	r16,r16,8
1000dfd0:	10bfffc4 	addi	r2,r2,-1
1000dfd4:	4cc0004c 	andi	r19,r9,1
1000dfd8:	80a0703a 	and	r16,r16,r2
1000dfdc:	003ea606 	br	1000da78 <__alt_data_end+0xf800da78>

1000dfe0 <__subdf3>:
1000dfe0:	00c00434 	movhi	r3,16
1000dfe4:	18ffffc4 	addi	r3,r3,-1
1000dfe8:	defffb04 	addi	sp,sp,-20
1000dfec:	28d2703a 	and	r9,r5,r3
1000dff0:	3814d53a 	srli	r10,r7,20
1000dff4:	38c6703a 	and	r3,r7,r3
1000dff8:	3004d77a 	srli	r2,r6,29
1000dffc:	dc800215 	stw	r18,8(sp)
1000e000:	dc000015 	stw	r16,0(sp)
1000e004:	2824d7fa 	srli	r18,r5,31
1000e008:	2820d53a 	srli	r16,r5,20
1000e00c:	481290fa 	slli	r9,r9,3
1000e010:	200ad77a 	srli	r5,r4,29
1000e014:	180690fa 	slli	r3,r3,3
1000e018:	dc400115 	stw	r17,4(sp)
1000e01c:	dfc00415 	stw	ra,16(sp)
1000e020:	202290fa 	slli	r17,r4,3
1000e024:	dcc00315 	stw	r19,12(sp)
1000e028:	5281ffcc 	andi	r10,r10,2047
1000e02c:	0101ffc4 	movi	r4,2047
1000e030:	9011883a 	mov	r8,r18
1000e034:	8401ffcc 	andi	r16,r16,2047
1000e038:	94803fcc 	andi	r18,r18,255
1000e03c:	494ab03a 	or	r5,r9,r5
1000e040:	380ed7fa 	srli	r7,r7,31
1000e044:	1886b03a 	or	r3,r3,r2
1000e048:	300c90fa 	slli	r6,r6,3
1000e04c:	51009026 	beq	r10,r4,1000e290 <__subdf3+0x2b0>
1000e050:	39c0005c 	xori	r7,r7,1
1000e054:	8285c83a 	sub	r2,r16,r10
1000e058:	91c06f26 	beq	r18,r7,1000e218 <__subdf3+0x238>
1000e05c:	0080b10e 	bge	zero,r2,1000e324 <__subdf3+0x344>
1000e060:	50002a1e 	bne	r10,zero,1000e10c <__subdf3+0x12c>
1000e064:	1988b03a 	or	r4,r3,r6
1000e068:	2000941e 	bne	r4,zero,1000e2bc <__subdf3+0x2dc>
1000e06c:	888001cc 	andi	r2,r17,7
1000e070:	10005b26 	beq	r2,zero,1000e1e0 <__subdf3+0x200>
1000e074:	88c003cc 	andi	r3,r17,15
1000e078:	00800104 	movi	r2,4
1000e07c:	18805826 	beq	r3,r2,1000e1e0 <__subdf3+0x200>
1000e080:	88c00104 	addi	r3,r17,4
1000e084:	1c63803a 	cmpltu	r17,r3,r17
1000e088:	2c4b883a 	add	r5,r5,r17
1000e08c:	2880202c 	andhi	r2,r5,128
1000e090:	9200004c 	andi	r8,r18,1
1000e094:	1823883a 	mov	r17,r3
1000e098:	10005426 	beq	r2,zero,1000e1ec <__subdf3+0x20c>
1000e09c:	84000044 	addi	r16,r16,1
1000e0a0:	0081ffc4 	movi	r2,2047
1000e0a4:	8080bf26 	beq	r16,r2,1000e3a4 <__subdf3+0x3c4>
1000e0a8:	013fe034 	movhi	r4,65408
1000e0ac:	213fffc4 	addi	r4,r4,-1
1000e0b0:	290a703a 	and	r5,r5,r4
1000e0b4:	2804977a 	slli	r2,r5,29
1000e0b8:	280a927a 	slli	r5,r5,9
1000e0bc:	8822d0fa 	srli	r17,r17,3
1000e0c0:	8401ffcc 	andi	r16,r16,2047
1000e0c4:	2808d33a 	srli	r4,r5,12
1000e0c8:	1444b03a 	or	r2,r2,r17
1000e0cc:	8401ffcc 	andi	r16,r16,2047
1000e0d0:	800a953a 	slli	r5,r16,20
1000e0d4:	40c03fcc 	andi	r3,r8,255
1000e0d8:	04000434 	movhi	r16,16
1000e0dc:	180697fa 	slli	r3,r3,31
1000e0e0:	843fffc4 	addi	r16,r16,-1
1000e0e4:	2420703a 	and	r16,r4,r16
1000e0e8:	8160b03a 	or	r16,r16,r5
1000e0ec:	80c6b03a 	or	r3,r16,r3
1000e0f0:	dfc00417 	ldw	ra,16(sp)
1000e0f4:	dcc00317 	ldw	r19,12(sp)
1000e0f8:	dc800217 	ldw	r18,8(sp)
1000e0fc:	dc400117 	ldw	r17,4(sp)
1000e100:	dc000017 	ldw	r16,0(sp)
1000e104:	dec00504 	addi	sp,sp,20
1000e108:	f800283a 	ret
1000e10c:	0101ffc4 	movi	r4,2047
1000e110:	813fd626 	beq	r16,r4,1000e06c <__alt_data_end+0xf800e06c>
1000e114:	18c02034 	orhi	r3,r3,128
1000e118:	01000e04 	movi	r4,56
1000e11c:	2080a416 	blt	r4,r2,1000e3b0 <__subdf3+0x3d0>
1000e120:	010007c4 	movi	r4,31
1000e124:	2080c716 	blt	r4,r2,1000e444 <__subdf3+0x464>
1000e128:	01000804 	movi	r4,32
1000e12c:	2089c83a 	sub	r4,r4,r2
1000e130:	1910983a 	sll	r8,r3,r4
1000e134:	308ed83a 	srl	r7,r6,r2
1000e138:	3108983a 	sll	r4,r6,r4
1000e13c:	1884d83a 	srl	r2,r3,r2
1000e140:	41ccb03a 	or	r6,r8,r7
1000e144:	2008c03a 	cmpne	r4,r4,zero
1000e148:	310cb03a 	or	r6,r6,r4
1000e14c:	898dc83a 	sub	r6,r17,r6
1000e150:	89a3803a 	cmpltu	r17,r17,r6
1000e154:	288bc83a 	sub	r5,r5,r2
1000e158:	2c4bc83a 	sub	r5,r5,r17
1000e15c:	3023883a 	mov	r17,r6
1000e160:	2880202c 	andhi	r2,r5,128
1000e164:	10006b26 	beq	r2,zero,1000e314 <__subdf3+0x334>
1000e168:	04c02034 	movhi	r19,128
1000e16c:	9cffffc4 	addi	r19,r19,-1
1000e170:	2ce6703a 	and	r19,r5,r19
1000e174:	98007c26 	beq	r19,zero,1000e368 <__subdf3+0x388>
1000e178:	9809883a 	mov	r4,r19
1000e17c:	000eaac0 	call	1000eaac <__clzsi2>
1000e180:	10fffe04 	addi	r3,r2,-8
1000e184:	010007c4 	movi	r4,31
1000e188:	20c07d16 	blt	r4,r3,1000e380 <__subdf3+0x3a0>
1000e18c:	01400a04 	movi	r5,40
1000e190:	2885c83a 	sub	r2,r5,r2
1000e194:	888ad83a 	srl	r5,r17,r2
1000e198:	98e6983a 	sll	r19,r19,r3
1000e19c:	88e2983a 	sll	r17,r17,r3
1000e1a0:	2ce6b03a 	or	r19,r5,r19
1000e1a4:	1c007a16 	blt	r3,r16,1000e390 <__subdf3+0x3b0>
1000e1a8:	1c21c83a 	sub	r16,r3,r16
1000e1ac:	81400044 	addi	r5,r16,1
1000e1b0:	00c007c4 	movi	r3,31
1000e1b4:	19409616 	blt	r3,r5,1000e410 <__subdf3+0x430>
1000e1b8:	1c21c83a 	sub	r16,r3,r16
1000e1bc:	8c08983a 	sll	r4,r17,r16
1000e1c0:	8946d83a 	srl	r3,r17,r5
1000e1c4:	9c20983a 	sll	r16,r19,r16
1000e1c8:	2008c03a 	cmpne	r4,r4,zero
1000e1cc:	994ad83a 	srl	r5,r19,r5
1000e1d0:	1c06b03a 	or	r3,r3,r16
1000e1d4:	1922b03a 	or	r17,r3,r4
1000e1d8:	0021883a 	mov	r16,zero
1000e1dc:	003fa306 	br	1000e06c <__alt_data_end+0xf800e06c>
1000e1e0:	2880202c 	andhi	r2,r5,128
1000e1e4:	9200004c 	andi	r8,r18,1
1000e1e8:	103fac1e 	bne	r2,zero,1000e09c <__alt_data_end+0xf800e09c>
1000e1ec:	2804977a 	slli	r2,r5,29
1000e1f0:	8822d0fa 	srli	r17,r17,3
1000e1f4:	00c1ffc4 	movi	r3,2047
1000e1f8:	280ad0fa 	srli	r5,r5,3
1000e1fc:	1444b03a 	or	r2,r2,r17
1000e200:	80c02726 	beq	r16,r3,1000e2a0 <__subdf3+0x2c0>
1000e204:	01000434 	movhi	r4,16
1000e208:	213fffc4 	addi	r4,r4,-1
1000e20c:	80e0703a 	and	r16,r16,r3
1000e210:	2908703a 	and	r4,r5,r4
1000e214:	003fad06 	br	1000e0cc <__alt_data_end+0xf800e0cc>
1000e218:	0080690e 	bge	zero,r2,1000e3c0 <__subdf3+0x3e0>
1000e21c:	50002f26 	beq	r10,zero,1000e2dc <__subdf3+0x2fc>
1000e220:	0101ffc4 	movi	r4,2047
1000e224:	813f9126 	beq	r16,r4,1000e06c <__alt_data_end+0xf800e06c>
1000e228:	18c02034 	orhi	r3,r3,128
1000e22c:	01000e04 	movi	r4,56
1000e230:	2080b00e 	bge	r4,r2,1000e4f4 <__subdf3+0x514>
1000e234:	198cb03a 	or	r6,r3,r6
1000e238:	300ec03a 	cmpne	r7,r6,zero
1000e23c:	0005883a 	mov	r2,zero
1000e240:	3c4f883a 	add	r7,r7,r17
1000e244:	3c63803a 	cmpltu	r17,r7,r17
1000e248:	114b883a 	add	r5,r2,r5
1000e24c:	2c4b883a 	add	r5,r5,r17
1000e250:	3823883a 	mov	r17,r7
1000e254:	2880202c 	andhi	r2,r5,128
1000e258:	10002e26 	beq	r2,zero,1000e314 <__subdf3+0x334>
1000e25c:	84000044 	addi	r16,r16,1
1000e260:	0081ffc4 	movi	r2,2047
1000e264:	8080de26 	beq	r16,r2,1000e5e0 <__subdf3+0x600>
1000e268:	00bfe034 	movhi	r2,65408
1000e26c:	10bfffc4 	addi	r2,r2,-1
1000e270:	288a703a 	and	r5,r5,r2
1000e274:	880cd07a 	srli	r6,r17,1
1000e278:	280897fa 	slli	r4,r5,31
1000e27c:	88c0004c 	andi	r3,r17,1
1000e280:	30e2b03a 	or	r17,r6,r3
1000e284:	280ad07a 	srli	r5,r5,1
1000e288:	8922b03a 	or	r17,r17,r4
1000e28c:	003f7706 	br	1000e06c <__alt_data_end+0xf800e06c>
1000e290:	1984b03a 	or	r2,r3,r6
1000e294:	103f6e26 	beq	r2,zero,1000e050 <__alt_data_end+0xf800e050>
1000e298:	39c03fcc 	andi	r7,r7,255
1000e29c:	003f6d06 	br	1000e054 <__alt_data_end+0xf800e054>
1000e2a0:	1146b03a 	or	r3,r2,r5
1000e2a4:	18003f26 	beq	r3,zero,1000e3a4 <__subdf3+0x3c4>
1000e2a8:	00c00434 	movhi	r3,16
1000e2ac:	29000234 	orhi	r4,r5,8
1000e2b0:	18ffffc4 	addi	r3,r3,-1
1000e2b4:	20c8703a 	and	r4,r4,r3
1000e2b8:	003f8406 	br	1000e0cc <__alt_data_end+0xf800e0cc>
1000e2bc:	10bfffc4 	addi	r2,r2,-1
1000e2c0:	1000501e 	bne	r2,zero,1000e404 <__subdf3+0x424>
1000e2c4:	898fc83a 	sub	r7,r17,r6
1000e2c8:	89e3803a 	cmpltu	r17,r17,r7
1000e2cc:	28cbc83a 	sub	r5,r5,r3
1000e2d0:	2c4bc83a 	sub	r5,r5,r17
1000e2d4:	3823883a 	mov	r17,r7
1000e2d8:	003fa106 	br	1000e160 <__alt_data_end+0xf800e160>
1000e2dc:	1988b03a 	or	r4,r3,r6
1000e2e0:	203f6226 	beq	r4,zero,1000e06c <__alt_data_end+0xf800e06c>
1000e2e4:	10bfffc4 	addi	r2,r2,-1
1000e2e8:	10009b1e 	bne	r2,zero,1000e558 <__subdf3+0x578>
1000e2ec:	344d883a 	add	r6,r6,r17
1000e2f0:	3463803a 	cmpltu	r17,r6,r17
1000e2f4:	194b883a 	add	r5,r3,r5
1000e2f8:	2c4b883a 	add	r5,r5,r17
1000e2fc:	3023883a 	mov	r17,r6
1000e300:	003fd406 	br	1000e254 <__alt_data_end+0xf800e254>
1000e304:	1106b03a 	or	r3,r2,r4
1000e308:	1800b426 	beq	r3,zero,1000e5dc <__subdf3+0x5fc>
1000e30c:	100b883a 	mov	r5,r2
1000e310:	2023883a 	mov	r17,r4
1000e314:	888001cc 	andi	r2,r17,7
1000e318:	103f561e 	bne	r2,zero,1000e074 <__alt_data_end+0xf800e074>
1000e31c:	9200004c 	andi	r8,r18,1
1000e320:	003fb206 	br	1000e1ec <__alt_data_end+0xf800e1ec>
1000e324:	1000531e 	bne	r2,zero,1000e474 <__subdf3+0x494>
1000e328:	80800044 	addi	r2,r16,1
1000e32c:	1081ffcc 	andi	r2,r2,2047
1000e330:	01000044 	movi	r4,1
1000e334:	2080a00e 	bge	r4,r2,1000e5b8 <__subdf3+0x5d8>
1000e338:	8985c83a 	sub	r2,r17,r6
1000e33c:	8889803a 	cmpltu	r4,r17,r2
1000e340:	28e7c83a 	sub	r19,r5,r3
1000e344:	9927c83a 	sub	r19,r19,r4
1000e348:	9900202c 	andhi	r4,r19,128
1000e34c:	20006226 	beq	r4,zero,1000e4d8 <__subdf3+0x4f8>
1000e350:	3463c83a 	sub	r17,r6,r17
1000e354:	194bc83a 	sub	r5,r3,r5
1000e358:	344d803a 	cmpltu	r6,r6,r17
1000e35c:	29a7c83a 	sub	r19,r5,r6
1000e360:	3825883a 	mov	r18,r7
1000e364:	983f841e 	bne	r19,zero,1000e178 <__alt_data_end+0xf800e178>
1000e368:	8809883a 	mov	r4,r17
1000e36c:	000eaac0 	call	1000eaac <__clzsi2>
1000e370:	10800804 	addi	r2,r2,32
1000e374:	10fffe04 	addi	r3,r2,-8
1000e378:	010007c4 	movi	r4,31
1000e37c:	20ff830e 	bge	r4,r3,1000e18c <__alt_data_end+0xf800e18c>
1000e380:	14fff604 	addi	r19,r2,-40
1000e384:	8ce6983a 	sll	r19,r17,r19
1000e388:	0023883a 	mov	r17,zero
1000e38c:	1c3f860e 	bge	r3,r16,1000e1a8 <__alt_data_end+0xf800e1a8>
1000e390:	017fe034 	movhi	r5,65408
1000e394:	297fffc4 	addi	r5,r5,-1
1000e398:	80e1c83a 	sub	r16,r16,r3
1000e39c:	994a703a 	and	r5,r19,r5
1000e3a0:	003f3206 	br	1000e06c <__alt_data_end+0xf800e06c>
1000e3a4:	0009883a 	mov	r4,zero
1000e3a8:	0005883a 	mov	r2,zero
1000e3ac:	003f4706 	br	1000e0cc <__alt_data_end+0xf800e0cc>
1000e3b0:	198cb03a 	or	r6,r3,r6
1000e3b4:	300cc03a 	cmpne	r6,r6,zero
1000e3b8:	0005883a 	mov	r2,zero
1000e3bc:	003f6306 	br	1000e14c <__alt_data_end+0xf800e14c>
1000e3c0:	10009d1e 	bne	r2,zero,1000e638 <__subdf3+0x658>
1000e3c4:	81c00044 	addi	r7,r16,1
1000e3c8:	3881ffcc 	andi	r2,r7,2047
1000e3cc:	02400044 	movi	r9,1
1000e3d0:	4880680e 	bge	r9,r2,1000e574 <__subdf3+0x594>
1000e3d4:	0081ffc4 	movi	r2,2047
1000e3d8:	3880ae26 	beq	r7,r2,1000e694 <__subdf3+0x6b4>
1000e3dc:	344d883a 	add	r6,r6,r17
1000e3e0:	3463803a 	cmpltu	r17,r6,r17
1000e3e4:	194b883a 	add	r5,r3,r5
1000e3e8:	2c4b883a 	add	r5,r5,r17
1000e3ec:	282297fa 	slli	r17,r5,31
1000e3f0:	300cd07a 	srli	r6,r6,1
1000e3f4:	280ad07a 	srli	r5,r5,1
1000e3f8:	3821883a 	mov	r16,r7
1000e3fc:	89a2b03a 	or	r17,r17,r6
1000e400:	003f1a06 	br	1000e06c <__alt_data_end+0xf800e06c>
1000e404:	0101ffc4 	movi	r4,2047
1000e408:	813f431e 	bne	r16,r4,1000e118 <__alt_data_end+0xf800e118>
1000e40c:	003f1706 	br	1000e06c <__alt_data_end+0xf800e06c>
1000e410:	80bff844 	addi	r2,r16,-31
1000e414:	00c00804 	movi	r3,32
1000e418:	9884d83a 	srl	r2,r19,r2
1000e41c:	28c05126 	beq	r5,r3,1000e564 <__subdf3+0x584>
1000e420:	00c00fc4 	movi	r3,63
1000e424:	1c21c83a 	sub	r16,r3,r16
1000e428:	9c26983a 	sll	r19,r19,r16
1000e42c:	9c62b03a 	or	r17,r19,r17
1000e430:	8822c03a 	cmpne	r17,r17,zero
1000e434:	88a2b03a 	or	r17,r17,r2
1000e438:	000b883a 	mov	r5,zero
1000e43c:	0021883a 	mov	r16,zero
1000e440:	003fb406 	br	1000e314 <__alt_data_end+0xf800e314>
1000e444:	113ff804 	addi	r4,r2,-32
1000e448:	01c00804 	movi	r7,32
1000e44c:	1908d83a 	srl	r4,r3,r4
1000e450:	11c04626 	beq	r2,r7,1000e56c <__subdf3+0x58c>
1000e454:	01c01004 	movi	r7,64
1000e458:	3885c83a 	sub	r2,r7,r2
1000e45c:	1884983a 	sll	r2,r3,r2
1000e460:	118cb03a 	or	r6,r2,r6
1000e464:	300cc03a 	cmpne	r6,r6,zero
1000e468:	310cb03a 	or	r6,r6,r4
1000e46c:	0005883a 	mov	r2,zero
1000e470:	003f3606 	br	1000e14c <__alt_data_end+0xf800e14c>
1000e474:	80002b26 	beq	r16,zero,1000e524 <__subdf3+0x544>
1000e478:	0101ffc4 	movi	r4,2047
1000e47c:	51006926 	beq	r10,r4,1000e624 <__subdf3+0x644>
1000e480:	0085c83a 	sub	r2,zero,r2
1000e484:	29402034 	orhi	r5,r5,128
1000e488:	01000e04 	movi	r4,56
1000e48c:	20807d16 	blt	r4,r2,1000e684 <__subdf3+0x6a4>
1000e490:	010007c4 	movi	r4,31
1000e494:	2080d916 	blt	r4,r2,1000e7fc <__subdf3+0x81c>
1000e498:	01000804 	movi	r4,32
1000e49c:	2089c83a 	sub	r4,r4,r2
1000e4a0:	2912983a 	sll	r9,r5,r4
1000e4a4:	8890d83a 	srl	r8,r17,r2
1000e4a8:	8908983a 	sll	r4,r17,r4
1000e4ac:	2884d83a 	srl	r2,r5,r2
1000e4b0:	4a22b03a 	or	r17,r9,r8
1000e4b4:	2008c03a 	cmpne	r4,r4,zero
1000e4b8:	8922b03a 	or	r17,r17,r4
1000e4bc:	3463c83a 	sub	r17,r6,r17
1000e4c0:	1885c83a 	sub	r2,r3,r2
1000e4c4:	344d803a 	cmpltu	r6,r6,r17
1000e4c8:	118bc83a 	sub	r5,r2,r6
1000e4cc:	5021883a 	mov	r16,r10
1000e4d0:	3825883a 	mov	r18,r7
1000e4d4:	003f2206 	br	1000e160 <__alt_data_end+0xf800e160>
1000e4d8:	9886b03a 	or	r3,r19,r2
1000e4dc:	18001c1e 	bne	r3,zero,1000e550 <__subdf3+0x570>
1000e4e0:	0011883a 	mov	r8,zero
1000e4e4:	000b883a 	mov	r5,zero
1000e4e8:	0023883a 	mov	r17,zero
1000e4ec:	0021883a 	mov	r16,zero
1000e4f0:	003f3e06 	br	1000e1ec <__alt_data_end+0xf800e1ec>
1000e4f4:	010007c4 	movi	r4,31
1000e4f8:	20803c16 	blt	r4,r2,1000e5ec <__subdf3+0x60c>
1000e4fc:	01000804 	movi	r4,32
1000e500:	2089c83a 	sub	r4,r4,r2
1000e504:	1912983a 	sll	r9,r3,r4
1000e508:	308ed83a 	srl	r7,r6,r2
1000e50c:	3108983a 	sll	r4,r6,r4
1000e510:	1884d83a 	srl	r2,r3,r2
1000e514:	49ceb03a 	or	r7,r9,r7
1000e518:	2008c03a 	cmpne	r4,r4,zero
1000e51c:	390eb03a 	or	r7,r7,r4
1000e520:	003f4706 	br	1000e240 <__alt_data_end+0xf800e240>
1000e524:	2c48b03a 	or	r4,r5,r17
1000e528:	20003e26 	beq	r4,zero,1000e624 <__subdf3+0x644>
1000e52c:	0084303a 	nor	r2,zero,r2
1000e530:	10003a1e 	bne	r2,zero,1000e61c <__subdf3+0x63c>
1000e534:	3463c83a 	sub	r17,r6,r17
1000e538:	194bc83a 	sub	r5,r3,r5
1000e53c:	344d803a 	cmpltu	r6,r6,r17
1000e540:	298bc83a 	sub	r5,r5,r6
1000e544:	5021883a 	mov	r16,r10
1000e548:	3825883a 	mov	r18,r7
1000e54c:	003f0406 	br	1000e160 <__alt_data_end+0xf800e160>
1000e550:	1023883a 	mov	r17,r2
1000e554:	003f0706 	br	1000e174 <__alt_data_end+0xf800e174>
1000e558:	0101ffc4 	movi	r4,2047
1000e55c:	813f331e 	bne	r16,r4,1000e22c <__alt_data_end+0xf800e22c>
1000e560:	003ec206 	br	1000e06c <__alt_data_end+0xf800e06c>
1000e564:	0027883a 	mov	r19,zero
1000e568:	003fb006 	br	1000e42c <__alt_data_end+0xf800e42c>
1000e56c:	0005883a 	mov	r2,zero
1000e570:	003fbb06 	br	1000e460 <__alt_data_end+0xf800e460>
1000e574:	2c44b03a 	or	r2,r5,r17
1000e578:	80008b1e 	bne	r16,zero,1000e7a8 <__subdf3+0x7c8>
1000e57c:	1000b526 	beq	r2,zero,1000e854 <__subdf3+0x874>
1000e580:	1984b03a 	or	r2,r3,r6
1000e584:	103eb926 	beq	r2,zero,1000e06c <__alt_data_end+0xf800e06c>
1000e588:	3449883a 	add	r4,r6,r17
1000e58c:	2463803a 	cmpltu	r17,r4,r17
1000e590:	194b883a 	add	r5,r3,r5
1000e594:	2c4b883a 	add	r5,r5,r17
1000e598:	2880202c 	andhi	r2,r5,128
1000e59c:	2023883a 	mov	r17,r4
1000e5a0:	103f5c26 	beq	r2,zero,1000e314 <__alt_data_end+0xf800e314>
1000e5a4:	00bfe034 	movhi	r2,65408
1000e5a8:	10bfffc4 	addi	r2,r2,-1
1000e5ac:	4821883a 	mov	r16,r9
1000e5b0:	288a703a 	and	r5,r5,r2
1000e5b4:	003ead06 	br	1000e06c <__alt_data_end+0xf800e06c>
1000e5b8:	2c44b03a 	or	r2,r5,r17
1000e5bc:	8000291e 	bne	r16,zero,1000e664 <__subdf3+0x684>
1000e5c0:	10004f1e 	bne	r2,zero,1000e700 <__subdf3+0x720>
1000e5c4:	1984b03a 	or	r2,r3,r6
1000e5c8:	10000426 	beq	r2,zero,1000e5dc <__subdf3+0x5fc>
1000e5cc:	180b883a 	mov	r5,r3
1000e5d0:	3023883a 	mov	r17,r6
1000e5d4:	3825883a 	mov	r18,r7
1000e5d8:	003ea406 	br	1000e06c <__alt_data_end+0xf800e06c>
1000e5dc:	0011883a 	mov	r8,zero
1000e5e0:	000b883a 	mov	r5,zero
1000e5e4:	0023883a 	mov	r17,zero
1000e5e8:	003f0006 	br	1000e1ec <__alt_data_end+0xf800e1ec>
1000e5ec:	11fff804 	addi	r7,r2,-32
1000e5f0:	19c8d83a 	srl	r4,r3,r7
1000e5f4:	01c00804 	movi	r7,32
1000e5f8:	11c07e26 	beq	r2,r7,1000e7f4 <__subdf3+0x814>
1000e5fc:	01c01004 	movi	r7,64
1000e600:	3885c83a 	sub	r2,r7,r2
1000e604:	1884983a 	sll	r2,r3,r2
1000e608:	118cb03a 	or	r6,r2,r6
1000e60c:	300ec03a 	cmpne	r7,r6,zero
1000e610:	390eb03a 	or	r7,r7,r4
1000e614:	0005883a 	mov	r2,zero
1000e618:	003f0906 	br	1000e240 <__alt_data_end+0xf800e240>
1000e61c:	0101ffc4 	movi	r4,2047
1000e620:	513f991e 	bne	r10,r4,1000e488 <__alt_data_end+0xf800e488>
1000e624:	180b883a 	mov	r5,r3
1000e628:	3023883a 	mov	r17,r6
1000e62c:	5021883a 	mov	r16,r10
1000e630:	3825883a 	mov	r18,r7
1000e634:	003e8d06 	br	1000e06c <__alt_data_end+0xf800e06c>
1000e638:	80001a1e 	bne	r16,zero,1000e6a4 <__subdf3+0x6c4>
1000e63c:	2c48b03a 	or	r4,r5,r17
1000e640:	20005526 	beq	r4,zero,1000e798 <__subdf3+0x7b8>
1000e644:	0084303a 	nor	r2,zero,r2
1000e648:	1000511e 	bne	r2,zero,1000e790 <__subdf3+0x7b0>
1000e64c:	89a3883a 	add	r17,r17,r6
1000e650:	194b883a 	add	r5,r3,r5
1000e654:	898d803a 	cmpltu	r6,r17,r6
1000e658:	298b883a 	add	r5,r5,r6
1000e65c:	5021883a 	mov	r16,r10
1000e660:	003efc06 	br	1000e254 <__alt_data_end+0xf800e254>
1000e664:	1000341e 	bne	r2,zero,1000e738 <__subdf3+0x758>
1000e668:	1984b03a 	or	r2,r3,r6
1000e66c:	10006f26 	beq	r2,zero,1000e82c <__subdf3+0x84c>
1000e670:	180b883a 	mov	r5,r3
1000e674:	3023883a 	mov	r17,r6
1000e678:	3825883a 	mov	r18,r7
1000e67c:	0401ffc4 	movi	r16,2047
1000e680:	003e7a06 	br	1000e06c <__alt_data_end+0xf800e06c>
1000e684:	2c62b03a 	or	r17,r5,r17
1000e688:	8822c03a 	cmpne	r17,r17,zero
1000e68c:	0005883a 	mov	r2,zero
1000e690:	003f8a06 	br	1000e4bc <__alt_data_end+0xf800e4bc>
1000e694:	3821883a 	mov	r16,r7
1000e698:	000b883a 	mov	r5,zero
1000e69c:	0023883a 	mov	r17,zero
1000e6a0:	003ed206 	br	1000e1ec <__alt_data_end+0xf800e1ec>
1000e6a4:	0101ffc4 	movi	r4,2047
1000e6a8:	51003b26 	beq	r10,r4,1000e798 <__subdf3+0x7b8>
1000e6ac:	0085c83a 	sub	r2,zero,r2
1000e6b0:	29402034 	orhi	r5,r5,128
1000e6b4:	01000e04 	movi	r4,56
1000e6b8:	20806216 	blt	r4,r2,1000e844 <__subdf3+0x864>
1000e6bc:	010007c4 	movi	r4,31
1000e6c0:	20806b16 	blt	r4,r2,1000e870 <__subdf3+0x890>
1000e6c4:	01000804 	movi	r4,32
1000e6c8:	2089c83a 	sub	r4,r4,r2
1000e6cc:	2912983a 	sll	r9,r5,r4
1000e6d0:	888ed83a 	srl	r7,r17,r2
1000e6d4:	8908983a 	sll	r4,r17,r4
1000e6d8:	2884d83a 	srl	r2,r5,r2
1000e6dc:	49e2b03a 	or	r17,r9,r7
1000e6e0:	2008c03a 	cmpne	r4,r4,zero
1000e6e4:	8922b03a 	or	r17,r17,r4
1000e6e8:	89a3883a 	add	r17,r17,r6
1000e6ec:	10c5883a 	add	r2,r2,r3
1000e6f0:	898d803a 	cmpltu	r6,r17,r6
1000e6f4:	118b883a 	add	r5,r2,r6
1000e6f8:	5021883a 	mov	r16,r10
1000e6fc:	003ed506 	br	1000e254 <__alt_data_end+0xf800e254>
1000e700:	1984b03a 	or	r2,r3,r6
1000e704:	103e5926 	beq	r2,zero,1000e06c <__alt_data_end+0xf800e06c>
1000e708:	8989c83a 	sub	r4,r17,r6
1000e70c:	8911803a 	cmpltu	r8,r17,r4
1000e710:	28c5c83a 	sub	r2,r5,r3
1000e714:	1205c83a 	sub	r2,r2,r8
1000e718:	1200202c 	andhi	r8,r2,128
1000e71c:	403ef926 	beq	r8,zero,1000e304 <__alt_data_end+0xf800e304>
1000e720:	3463c83a 	sub	r17,r6,r17
1000e724:	194bc83a 	sub	r5,r3,r5
1000e728:	344d803a 	cmpltu	r6,r6,r17
1000e72c:	298bc83a 	sub	r5,r5,r6
1000e730:	3825883a 	mov	r18,r7
1000e734:	003e4d06 	br	1000e06c <__alt_data_end+0xf800e06c>
1000e738:	1984b03a 	or	r2,r3,r6
1000e73c:	10002b26 	beq	r2,zero,1000e7ec <__subdf3+0x80c>
1000e740:	2808d0fa 	srli	r4,r5,3
1000e744:	8822d0fa 	srli	r17,r17,3
1000e748:	280a977a 	slli	r5,r5,29
1000e74c:	2080022c 	andhi	r2,r4,8
1000e750:	2c62b03a 	or	r17,r5,r17
1000e754:	10000826 	beq	r2,zero,1000e778 <__subdf3+0x798>
1000e758:	1810d0fa 	srli	r8,r3,3
1000e75c:	4080022c 	andhi	r2,r8,8
1000e760:	1000051e 	bne	r2,zero,1000e778 <__subdf3+0x798>
1000e764:	300cd0fa 	srli	r6,r6,3
1000e768:	1804977a 	slli	r2,r3,29
1000e76c:	4009883a 	mov	r4,r8
1000e770:	3825883a 	mov	r18,r7
1000e774:	11a2b03a 	or	r17,r2,r6
1000e778:	880ad77a 	srli	r5,r17,29
1000e77c:	200890fa 	slli	r4,r4,3
1000e780:	882290fa 	slli	r17,r17,3
1000e784:	0401ffc4 	movi	r16,2047
1000e788:	290ab03a 	or	r5,r5,r4
1000e78c:	003e3706 	br	1000e06c <__alt_data_end+0xf800e06c>
1000e790:	0101ffc4 	movi	r4,2047
1000e794:	513fc71e 	bne	r10,r4,1000e6b4 <__alt_data_end+0xf800e6b4>
1000e798:	180b883a 	mov	r5,r3
1000e79c:	3023883a 	mov	r17,r6
1000e7a0:	5021883a 	mov	r16,r10
1000e7a4:	003e3106 	br	1000e06c <__alt_data_end+0xf800e06c>
1000e7a8:	10002d26 	beq	r2,zero,1000e860 <__subdf3+0x880>
1000e7ac:	1984b03a 	or	r2,r3,r6
1000e7b0:	10000e26 	beq	r2,zero,1000e7ec <__subdf3+0x80c>
1000e7b4:	2808d0fa 	srli	r4,r5,3
1000e7b8:	8822d0fa 	srli	r17,r17,3
1000e7bc:	280a977a 	slli	r5,r5,29
1000e7c0:	2080022c 	andhi	r2,r4,8
1000e7c4:	2c62b03a 	or	r17,r5,r17
1000e7c8:	103feb26 	beq	r2,zero,1000e778 <__alt_data_end+0xf800e778>
1000e7cc:	180ed0fa 	srli	r7,r3,3
1000e7d0:	3880022c 	andhi	r2,r7,8
1000e7d4:	103fe81e 	bne	r2,zero,1000e778 <__alt_data_end+0xf800e778>
1000e7d8:	300cd0fa 	srli	r6,r6,3
1000e7dc:	1804977a 	slli	r2,r3,29
1000e7e0:	3809883a 	mov	r4,r7
1000e7e4:	11a2b03a 	or	r17,r2,r6
1000e7e8:	003fe306 	br	1000e778 <__alt_data_end+0xf800e778>
1000e7ec:	0401ffc4 	movi	r16,2047
1000e7f0:	003e1e06 	br	1000e06c <__alt_data_end+0xf800e06c>
1000e7f4:	0005883a 	mov	r2,zero
1000e7f8:	003f8306 	br	1000e608 <__alt_data_end+0xf800e608>
1000e7fc:	113ff804 	addi	r4,r2,-32
1000e800:	02000804 	movi	r8,32
1000e804:	2908d83a 	srl	r4,r5,r4
1000e808:	12002526 	beq	r2,r8,1000e8a0 <__subdf3+0x8c0>
1000e80c:	02001004 	movi	r8,64
1000e810:	4085c83a 	sub	r2,r8,r2
1000e814:	288a983a 	sll	r5,r5,r2
1000e818:	2c62b03a 	or	r17,r5,r17
1000e81c:	8822c03a 	cmpne	r17,r17,zero
1000e820:	8922b03a 	or	r17,r17,r4
1000e824:	0005883a 	mov	r2,zero
1000e828:	003f2406 	br	1000e4bc <__alt_data_end+0xf800e4bc>
1000e82c:	01402034 	movhi	r5,128
1000e830:	0011883a 	mov	r8,zero
1000e834:	297fffc4 	addi	r5,r5,-1
1000e838:	047ffe04 	movi	r17,-8
1000e83c:	0401ffc4 	movi	r16,2047
1000e840:	003e6a06 	br	1000e1ec <__alt_data_end+0xf800e1ec>
1000e844:	2c62b03a 	or	r17,r5,r17
1000e848:	8822c03a 	cmpne	r17,r17,zero
1000e84c:	0005883a 	mov	r2,zero
1000e850:	003fa506 	br	1000e6e8 <__alt_data_end+0xf800e6e8>
1000e854:	180b883a 	mov	r5,r3
1000e858:	3023883a 	mov	r17,r6
1000e85c:	003e0306 	br	1000e06c <__alt_data_end+0xf800e06c>
1000e860:	180b883a 	mov	r5,r3
1000e864:	3023883a 	mov	r17,r6
1000e868:	0401ffc4 	movi	r16,2047
1000e86c:	003dff06 	br	1000e06c <__alt_data_end+0xf800e06c>
1000e870:	113ff804 	addi	r4,r2,-32
1000e874:	01c00804 	movi	r7,32
1000e878:	2908d83a 	srl	r4,r5,r4
1000e87c:	11c00a26 	beq	r2,r7,1000e8a8 <__subdf3+0x8c8>
1000e880:	01c01004 	movi	r7,64
1000e884:	3885c83a 	sub	r2,r7,r2
1000e888:	288a983a 	sll	r5,r5,r2
1000e88c:	2c62b03a 	or	r17,r5,r17
1000e890:	8822c03a 	cmpne	r17,r17,zero
1000e894:	8922b03a 	or	r17,r17,r4
1000e898:	0005883a 	mov	r2,zero
1000e89c:	003f9206 	br	1000e6e8 <__alt_data_end+0xf800e6e8>
1000e8a0:	000b883a 	mov	r5,zero
1000e8a4:	003fdc06 	br	1000e818 <__alt_data_end+0xf800e818>
1000e8a8:	000b883a 	mov	r5,zero
1000e8ac:	003ff706 	br	1000e88c <__alt_data_end+0xf800e88c>

1000e8b0 <__fixdfsi>:
1000e8b0:	2806d53a 	srli	r3,r5,20
1000e8b4:	00800434 	movhi	r2,16
1000e8b8:	10bfffc4 	addi	r2,r2,-1
1000e8bc:	18c1ffcc 	andi	r3,r3,2047
1000e8c0:	0180ff84 	movi	r6,1022
1000e8c4:	2884703a 	and	r2,r5,r2
1000e8c8:	280ad7fa 	srli	r5,r5,31
1000e8cc:	30c0130e 	bge	r6,r3,1000e91c <__fixdfsi+0x6c>
1000e8d0:	01810744 	movi	r6,1053
1000e8d4:	30c00d16 	blt	r6,r3,1000e90c <__fixdfsi+0x5c>
1000e8d8:	01810cc4 	movi	r6,1075
1000e8dc:	30cdc83a 	sub	r6,r6,r3
1000e8e0:	01c007c4 	movi	r7,31
1000e8e4:	10800434 	orhi	r2,r2,16
1000e8e8:	39800e0e 	bge	r7,r6,1000e924 <__fixdfsi+0x74>
1000e8ec:	010104c4 	movi	r4,1043
1000e8f0:	20c7c83a 	sub	r3,r4,r3
1000e8f4:	10c6d83a 	srl	r3,r2,r3
1000e8f8:	29403fcc 	andi	r5,r5,255
1000e8fc:	0145c83a 	sub	r2,zero,r5
1000e900:	1884f03a 	xor	r2,r3,r2
1000e904:	1145883a 	add	r2,r2,r5
1000e908:	f800283a 	ret
1000e90c:	00a00034 	movhi	r2,32768
1000e910:	10bfffc4 	addi	r2,r2,-1
1000e914:	2885883a 	add	r2,r5,r2
1000e918:	f800283a 	ret
1000e91c:	0005883a 	mov	r2,zero
1000e920:	f800283a 	ret
1000e924:	18fefb44 	addi	r3,r3,-1043
1000e928:	2188d83a 	srl	r4,r4,r6
1000e92c:	10c6983a 	sll	r3,r2,r3
1000e930:	20c6b03a 	or	r3,r4,r3
1000e934:	003ff006 	br	1000e8f8 <__alt_data_end+0xf800e8f8>

1000e938 <__floatsidf>:
1000e938:	defffd04 	addi	sp,sp,-12
1000e93c:	dc400115 	stw	r17,4(sp)
1000e940:	dfc00215 	stw	ra,8(sp)
1000e944:	dc000015 	stw	r16,0(sp)
1000e948:	2023883a 	mov	r17,r4
1000e94c:	20001426 	beq	r4,zero,1000e9a0 <__floatsidf+0x68>
1000e950:	2020d7fa 	srli	r16,r4,31
1000e954:	80000126 	beq	r16,zero,1000e95c <__floatsidf+0x24>
1000e958:	0123c83a 	sub	r17,zero,r4
1000e95c:	8809883a 	mov	r4,r17
1000e960:	000eaac0 	call	1000eaac <__clzsi2>
1000e964:	01410784 	movi	r5,1054
1000e968:	00c00284 	movi	r3,10
1000e96c:	288bc83a 	sub	r5,r5,r2
1000e970:	18801c16 	blt	r3,r2,1000e9e4 <__floatsidf+0xac>
1000e974:	00c002c4 	movi	r3,11
1000e978:	1887c83a 	sub	r3,r3,r2
1000e97c:	88c8d83a 	srl	r4,r17,r3
1000e980:	00c00434 	movhi	r3,16
1000e984:	18ffffc4 	addi	r3,r3,-1
1000e988:	10800544 	addi	r2,r2,21
1000e98c:	20c8703a 	and	r4,r4,r3
1000e990:	8884983a 	sll	r2,r17,r2
1000e994:	28c1ffcc 	andi	r3,r5,2047
1000e998:	800d883a 	mov	r6,r16
1000e99c:	00000406 	br	1000e9b0 <__floatsidf+0x78>
1000e9a0:	000d883a 	mov	r6,zero
1000e9a4:	0007883a 	mov	r3,zero
1000e9a8:	0009883a 	mov	r4,zero
1000e9ac:	0005883a 	mov	r2,zero
1000e9b0:	180a953a 	slli	r5,r3,20
1000e9b4:	31803fcc 	andi	r6,r6,255
1000e9b8:	00c00434 	movhi	r3,16
1000e9bc:	300c97fa 	slli	r6,r6,31
1000e9c0:	18ffffc4 	addi	r3,r3,-1
1000e9c4:	20c6703a 	and	r3,r4,r3
1000e9c8:	1946b03a 	or	r3,r3,r5
1000e9cc:	1986b03a 	or	r3,r3,r6
1000e9d0:	dfc00217 	ldw	ra,8(sp)
1000e9d4:	dc400117 	ldw	r17,4(sp)
1000e9d8:	dc000017 	ldw	r16,0(sp)
1000e9dc:	dec00304 	addi	sp,sp,12
1000e9e0:	f800283a 	ret
1000e9e4:	10fffd44 	addi	r3,r2,-11
1000e9e8:	88c8983a 	sll	r4,r17,r3
1000e9ec:	00800434 	movhi	r2,16
1000e9f0:	10bfffc4 	addi	r2,r2,-1
1000e9f4:	2088703a 	and	r4,r4,r2
1000e9f8:	28c1ffcc 	andi	r3,r5,2047
1000e9fc:	800d883a 	mov	r6,r16
1000ea00:	0005883a 	mov	r2,zero
1000ea04:	003fea06 	br	1000e9b0 <__alt_data_end+0xf800e9b0>

1000ea08 <__floatunsidf>:
1000ea08:	defffe04 	addi	sp,sp,-8
1000ea0c:	dc000015 	stw	r16,0(sp)
1000ea10:	dfc00115 	stw	ra,4(sp)
1000ea14:	2021883a 	mov	r16,r4
1000ea18:	20001026 	beq	r4,zero,1000ea5c <__floatunsidf+0x54>
1000ea1c:	000eaac0 	call	1000eaac <__clzsi2>
1000ea20:	01410784 	movi	r5,1054
1000ea24:	100d883a 	mov	r6,r2
1000ea28:	288bc83a 	sub	r5,r5,r2
1000ea2c:	00800284 	movi	r2,10
1000ea30:	11801616 	blt	r2,r6,1000ea8c <__floatunsidf+0x84>
1000ea34:	008002c4 	movi	r2,11
1000ea38:	1185c83a 	sub	r2,r2,r6
1000ea3c:	8084d83a 	srl	r2,r16,r2
1000ea40:	00c00434 	movhi	r3,16
1000ea44:	31c00544 	addi	r7,r6,21
1000ea48:	18ffffc4 	addi	r3,r3,-1
1000ea4c:	81e0983a 	sll	r16,r16,r7
1000ea50:	10cc703a 	and	r6,r2,r3
1000ea54:	2941ffcc 	andi	r5,r5,2047
1000ea58:	00000206 	br	1000ea64 <__floatunsidf+0x5c>
1000ea5c:	000b883a 	mov	r5,zero
1000ea60:	000d883a 	mov	r6,zero
1000ea64:	280a953a 	slli	r5,r5,20
1000ea68:	00c00434 	movhi	r3,16
1000ea6c:	18ffffc4 	addi	r3,r3,-1
1000ea70:	30c6703a 	and	r3,r6,r3
1000ea74:	8005883a 	mov	r2,r16
1000ea78:	1946b03a 	or	r3,r3,r5
1000ea7c:	dfc00117 	ldw	ra,4(sp)
1000ea80:	dc000017 	ldw	r16,0(sp)
1000ea84:	dec00204 	addi	sp,sp,8
1000ea88:	f800283a 	ret
1000ea8c:	31bffd44 	addi	r6,r6,-11
1000ea90:	818c983a 	sll	r6,r16,r6
1000ea94:	00800434 	movhi	r2,16
1000ea98:	10bfffc4 	addi	r2,r2,-1
1000ea9c:	2941ffcc 	andi	r5,r5,2047
1000eaa0:	0021883a 	mov	r16,zero
1000eaa4:	308c703a 	and	r6,r6,r2
1000eaa8:	003fee06 	br	1000ea64 <__alt_data_end+0xf800ea64>

1000eaac <__clzsi2>:
1000eaac:	00bfffd4 	movui	r2,65535
1000eab0:	11000b36 	bltu	r2,r4,1000eae0 <__clzsi2+0x34>
1000eab4:	00803fc4 	movi	r2,255
1000eab8:	1100122e 	bgeu	r2,r4,1000eb04 <__clzsi2+0x58>
1000eabc:	00c00204 	movi	r3,8
1000eac0:	01400604 	movi	r5,24
1000eac4:	20c8d83a 	srl	r4,r4,r3
1000eac8:	00840074 	movhi	r2,4097
1000eacc:	10872604 	addi	r2,r2,7320
1000ead0:	1109883a 	add	r4,r2,r4
1000ead4:	20800003 	ldbu	r2,0(r4)
1000ead8:	2885c83a 	sub	r2,r5,r2
1000eadc:	f800283a 	ret
1000eae0:	00804034 	movhi	r2,256
1000eae4:	10bfffc4 	addi	r2,r2,-1
1000eae8:	11000336 	bltu	r2,r4,1000eaf8 <__clzsi2+0x4c>
1000eaec:	00c00404 	movi	r3,16
1000eaf0:	180b883a 	mov	r5,r3
1000eaf4:	003ff306 	br	1000eac4 <__alt_data_end+0xf800eac4>
1000eaf8:	00c00604 	movi	r3,24
1000eafc:	01400204 	movi	r5,8
1000eb00:	003ff006 	br	1000eac4 <__alt_data_end+0xf800eac4>
1000eb04:	0007883a 	mov	r3,zero
1000eb08:	01400804 	movi	r5,32
1000eb0c:	003fed06 	br	1000eac4 <__alt_data_end+0xf800eac4>

1000eb10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000eb10:	defffe04 	addi	sp,sp,-8
1000eb14:	dfc00115 	stw	ra,4(sp)
1000eb18:	df000015 	stw	fp,0(sp)
1000eb1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000eb20:	00840074 	movhi	r2,4097
1000eb24:	108e2904 	addi	r2,r2,14500
1000eb28:	10800017 	ldw	r2,0(r2)
1000eb2c:	10000526 	beq	r2,zero,1000eb44 <alt_get_errno+0x34>
1000eb30:	00840074 	movhi	r2,4097
1000eb34:	108e2904 	addi	r2,r2,14500
1000eb38:	10800017 	ldw	r2,0(r2)
1000eb3c:	103ee83a 	callr	r2
1000eb40:	00000206 	br	1000eb4c <alt_get_errno+0x3c>
1000eb44:	00840074 	movhi	r2,4097
1000eb48:	1094f004 	addi	r2,r2,21440
}
1000eb4c:	e037883a 	mov	sp,fp
1000eb50:	dfc00117 	ldw	ra,4(sp)
1000eb54:	df000017 	ldw	fp,0(sp)
1000eb58:	dec00204 	addi	sp,sp,8
1000eb5c:	f800283a 	ret

1000eb60 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000eb60:	defffb04 	addi	sp,sp,-20
1000eb64:	dfc00415 	stw	ra,16(sp)
1000eb68:	df000315 	stw	fp,12(sp)
1000eb6c:	df000304 	addi	fp,sp,12
1000eb70:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000eb74:	e0bfff17 	ldw	r2,-4(fp)
1000eb78:	10000816 	blt	r2,zero,1000eb9c <close+0x3c>
1000eb7c:	e13fff17 	ldw	r4,-4(fp)
1000eb80:	01400304 	movi	r5,12
1000eb84:	000c2ec0 	call	1000c2ec <__mulsi3>
1000eb88:	1007883a 	mov	r3,r2
1000eb8c:	00840074 	movhi	r2,4097
1000eb90:	1089a604 	addi	r2,r2,9880
1000eb94:	1885883a 	add	r2,r3,r2
1000eb98:	00000106 	br	1000eba0 <close+0x40>
1000eb9c:	0005883a 	mov	r2,zero
1000eba0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000eba4:	e0bffd17 	ldw	r2,-12(fp)
1000eba8:	10001926 	beq	r2,zero,1000ec10 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000ebac:	e0bffd17 	ldw	r2,-12(fp)
1000ebb0:	10800017 	ldw	r2,0(r2)
1000ebb4:	10800417 	ldw	r2,16(r2)
1000ebb8:	10000626 	beq	r2,zero,1000ebd4 <close+0x74>
1000ebbc:	e0bffd17 	ldw	r2,-12(fp)
1000ebc0:	10800017 	ldw	r2,0(r2)
1000ebc4:	10800417 	ldw	r2,16(r2)
1000ebc8:	e13ffd17 	ldw	r4,-12(fp)
1000ebcc:	103ee83a 	callr	r2
1000ebd0:	00000106 	br	1000ebd8 <close+0x78>
1000ebd4:	0005883a 	mov	r2,zero
1000ebd8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000ebdc:	e13fff17 	ldw	r4,-4(fp)
1000ebe0:	000f2840 	call	1000f284 <alt_release_fd>
    if (rval < 0)
1000ebe4:	e0bffe17 	ldw	r2,-8(fp)
1000ebe8:	1000070e 	bge	r2,zero,1000ec08 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000ebec:	000eb100 	call	1000eb10 <alt_get_errno>
1000ebf0:	1007883a 	mov	r3,r2
1000ebf4:	e0bffe17 	ldw	r2,-8(fp)
1000ebf8:	0085c83a 	sub	r2,zero,r2
1000ebfc:	18800015 	stw	r2,0(r3)
      return -1;
1000ec00:	00bfffc4 	movi	r2,-1
1000ec04:	00000706 	br	1000ec24 <close+0xc4>
    }
    return 0;
1000ec08:	0005883a 	mov	r2,zero
1000ec0c:	00000506 	br	1000ec24 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000ec10:	000eb100 	call	1000eb10 <alt_get_errno>
1000ec14:	1007883a 	mov	r3,r2
1000ec18:	00801444 	movi	r2,81
1000ec1c:	18800015 	stw	r2,0(r3)
    return -1;
1000ec20:	00bfffc4 	movi	r2,-1
  }
}
1000ec24:	e037883a 	mov	sp,fp
1000ec28:	dfc00117 	ldw	ra,4(sp)
1000ec2c:	df000017 	ldw	fp,0(sp)
1000ec30:	dec00204 	addi	sp,sp,8
1000ec34:	f800283a 	ret

1000ec38 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000ec38:	defffc04 	addi	sp,sp,-16
1000ec3c:	df000315 	stw	fp,12(sp)
1000ec40:	df000304 	addi	fp,sp,12
1000ec44:	e13ffd15 	stw	r4,-12(fp)
1000ec48:	e17ffe15 	stw	r5,-8(fp)
1000ec4c:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000ec50:	e0bfff17 	ldw	r2,-4(fp)
}
1000ec54:	e037883a 	mov	sp,fp
1000ec58:	df000017 	ldw	fp,0(sp)
1000ec5c:	dec00104 	addi	sp,sp,4
1000ec60:	f800283a 	ret

1000ec64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ec64:	defffe04 	addi	sp,sp,-8
1000ec68:	dfc00115 	stw	ra,4(sp)
1000ec6c:	df000015 	stw	fp,0(sp)
1000ec70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ec74:	00840074 	movhi	r2,4097
1000ec78:	108e2904 	addi	r2,r2,14500
1000ec7c:	10800017 	ldw	r2,0(r2)
1000ec80:	10000526 	beq	r2,zero,1000ec98 <alt_get_errno+0x34>
1000ec84:	00840074 	movhi	r2,4097
1000ec88:	108e2904 	addi	r2,r2,14500
1000ec8c:	10800017 	ldw	r2,0(r2)
1000ec90:	103ee83a 	callr	r2
1000ec94:	00000206 	br	1000eca0 <alt_get_errno+0x3c>
1000ec98:	00840074 	movhi	r2,4097
1000ec9c:	1094f004 	addi	r2,r2,21440
}
1000eca0:	e037883a 	mov	sp,fp
1000eca4:	dfc00117 	ldw	ra,4(sp)
1000eca8:	df000017 	ldw	fp,0(sp)
1000ecac:	dec00204 	addi	sp,sp,8
1000ecb0:	f800283a 	ret

1000ecb4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000ecb4:	defffb04 	addi	sp,sp,-20
1000ecb8:	dfc00415 	stw	ra,16(sp)
1000ecbc:	df000315 	stw	fp,12(sp)
1000ecc0:	df000304 	addi	fp,sp,12
1000ecc4:	e13ffe15 	stw	r4,-8(fp)
1000ecc8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000eccc:	e0bffe17 	ldw	r2,-8(fp)
1000ecd0:	10000816 	blt	r2,zero,1000ecf4 <fstat+0x40>
1000ecd4:	e13ffe17 	ldw	r4,-8(fp)
1000ecd8:	01400304 	movi	r5,12
1000ecdc:	000c2ec0 	call	1000c2ec <__mulsi3>
1000ece0:	1007883a 	mov	r3,r2
1000ece4:	00840074 	movhi	r2,4097
1000ece8:	1089a604 	addi	r2,r2,9880
1000ecec:	1885883a 	add	r2,r3,r2
1000ecf0:	00000106 	br	1000ecf8 <fstat+0x44>
1000ecf4:	0005883a 	mov	r2,zero
1000ecf8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000ecfc:	e0bffd17 	ldw	r2,-12(fp)
1000ed00:	10001026 	beq	r2,zero,1000ed44 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000ed04:	e0bffd17 	ldw	r2,-12(fp)
1000ed08:	10800017 	ldw	r2,0(r2)
1000ed0c:	10800817 	ldw	r2,32(r2)
1000ed10:	10000726 	beq	r2,zero,1000ed30 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000ed14:	e0bffd17 	ldw	r2,-12(fp)
1000ed18:	10800017 	ldw	r2,0(r2)
1000ed1c:	10800817 	ldw	r2,32(r2)
1000ed20:	e13ffd17 	ldw	r4,-12(fp)
1000ed24:	e17fff17 	ldw	r5,-4(fp)
1000ed28:	103ee83a 	callr	r2
1000ed2c:	00000a06 	br	1000ed58 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000ed30:	e0bfff17 	ldw	r2,-4(fp)
1000ed34:	00c80004 	movi	r3,8192
1000ed38:	10c00115 	stw	r3,4(r2)
      return 0;
1000ed3c:	0005883a 	mov	r2,zero
1000ed40:	00000506 	br	1000ed58 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000ed44:	000ec640 	call	1000ec64 <alt_get_errno>
1000ed48:	1007883a 	mov	r3,r2
1000ed4c:	00801444 	movi	r2,81
1000ed50:	18800015 	stw	r2,0(r3)
    return -1;
1000ed54:	00bfffc4 	movi	r2,-1
  }
}
1000ed58:	e037883a 	mov	sp,fp
1000ed5c:	dfc00117 	ldw	ra,4(sp)
1000ed60:	df000017 	ldw	fp,0(sp)
1000ed64:	dec00204 	addi	sp,sp,8
1000ed68:	f800283a 	ret

1000ed6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ed6c:	defffe04 	addi	sp,sp,-8
1000ed70:	dfc00115 	stw	ra,4(sp)
1000ed74:	df000015 	stw	fp,0(sp)
1000ed78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ed7c:	00840074 	movhi	r2,4097
1000ed80:	108e2904 	addi	r2,r2,14500
1000ed84:	10800017 	ldw	r2,0(r2)
1000ed88:	10000526 	beq	r2,zero,1000eda0 <alt_get_errno+0x34>
1000ed8c:	00840074 	movhi	r2,4097
1000ed90:	108e2904 	addi	r2,r2,14500
1000ed94:	10800017 	ldw	r2,0(r2)
1000ed98:	103ee83a 	callr	r2
1000ed9c:	00000206 	br	1000eda8 <alt_get_errno+0x3c>
1000eda0:	00840074 	movhi	r2,4097
1000eda4:	1094f004 	addi	r2,r2,21440
}
1000eda8:	e037883a 	mov	sp,fp
1000edac:	dfc00117 	ldw	ra,4(sp)
1000edb0:	df000017 	ldw	fp,0(sp)
1000edb4:	dec00204 	addi	sp,sp,8
1000edb8:	f800283a 	ret

1000edbc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000edbc:	deffed04 	addi	sp,sp,-76
1000edc0:	dfc01215 	stw	ra,72(sp)
1000edc4:	df001115 	stw	fp,68(sp)
1000edc8:	df001104 	addi	fp,sp,68
1000edcc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000edd0:	e0bfff17 	ldw	r2,-4(fp)
1000edd4:	10000816 	blt	r2,zero,1000edf8 <isatty+0x3c>
1000edd8:	e13fff17 	ldw	r4,-4(fp)
1000eddc:	01400304 	movi	r5,12
1000ede0:	000c2ec0 	call	1000c2ec <__mulsi3>
1000ede4:	1007883a 	mov	r3,r2
1000ede8:	00840074 	movhi	r2,4097
1000edec:	1089a604 	addi	r2,r2,9880
1000edf0:	1885883a 	add	r2,r3,r2
1000edf4:	00000106 	br	1000edfc <isatty+0x40>
1000edf8:	0005883a 	mov	r2,zero
1000edfc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000ee00:	e0bfef17 	ldw	r2,-68(fp)
1000ee04:	10000e26 	beq	r2,zero,1000ee40 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000ee08:	e0bfef17 	ldw	r2,-68(fp)
1000ee0c:	10800017 	ldw	r2,0(r2)
1000ee10:	10800817 	ldw	r2,32(r2)
1000ee14:	1000021e 	bne	r2,zero,1000ee20 <isatty+0x64>
    {
      return 1;
1000ee18:	00800044 	movi	r2,1
1000ee1c:	00000d06 	br	1000ee54 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000ee20:	e0bff004 	addi	r2,fp,-64
1000ee24:	e13fff17 	ldw	r4,-4(fp)
1000ee28:	100b883a 	mov	r5,r2
1000ee2c:	000ecb40 	call	1000ecb4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000ee30:	e0bff117 	ldw	r2,-60(fp)
1000ee34:	10880020 	cmpeqi	r2,r2,8192
1000ee38:	10803fcc 	andi	r2,r2,255
1000ee3c:	00000506 	br	1000ee54 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000ee40:	000ed6c0 	call	1000ed6c <alt_get_errno>
1000ee44:	1007883a 	mov	r3,r2
1000ee48:	00801444 	movi	r2,81
1000ee4c:	18800015 	stw	r2,0(r3)
    return 0;
1000ee50:	0005883a 	mov	r2,zero
  }
}
1000ee54:	e037883a 	mov	sp,fp
1000ee58:	dfc00117 	ldw	ra,4(sp)
1000ee5c:	df000017 	ldw	fp,0(sp)
1000ee60:	dec00204 	addi	sp,sp,8
1000ee64:	f800283a 	ret

1000ee68 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000ee68:	defffc04 	addi	sp,sp,-16
1000ee6c:	df000315 	stw	fp,12(sp)
1000ee70:	df000304 	addi	fp,sp,12
1000ee74:	e13ffd15 	stw	r4,-12(fp)
1000ee78:	e17ffe15 	stw	r5,-8(fp)
1000ee7c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000ee80:	e0fffe17 	ldw	r3,-8(fp)
1000ee84:	e0bffd17 	ldw	r2,-12(fp)
1000ee88:	18800c26 	beq	r3,r2,1000eebc <alt_load_section+0x54>
  {
    while( to != end )
1000ee8c:	00000806 	br	1000eeb0 <alt_load_section+0x48>
    {
      *to++ = *from++;
1000ee90:	e0bffe17 	ldw	r2,-8(fp)
1000ee94:	10c00104 	addi	r3,r2,4
1000ee98:	e0fffe15 	stw	r3,-8(fp)
1000ee9c:	e0fffd17 	ldw	r3,-12(fp)
1000eea0:	19000104 	addi	r4,r3,4
1000eea4:	e13ffd15 	stw	r4,-12(fp)
1000eea8:	18c00017 	ldw	r3,0(r3)
1000eeac:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000eeb0:	e0fffe17 	ldw	r3,-8(fp)
1000eeb4:	e0bfff17 	ldw	r2,-4(fp)
1000eeb8:	18bff51e 	bne	r3,r2,1000ee90 <__alt_data_end+0xf800ee90>
    {
      *to++ = *from++;
    }
  }
}
1000eebc:	e037883a 	mov	sp,fp
1000eec0:	df000017 	ldw	fp,0(sp)
1000eec4:	dec00104 	addi	sp,sp,4
1000eec8:	f800283a 	ret

1000eecc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000eecc:	defffe04 	addi	sp,sp,-8
1000eed0:	dfc00115 	stw	ra,4(sp)
1000eed4:	df000015 	stw	fp,0(sp)
1000eed8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000eedc:	01040074 	movhi	r4,4097
1000eee0:	210e2e04 	addi	r4,r4,14520
1000eee4:	01440074 	movhi	r5,4097
1000eee8:	29477304 	addi	r5,r5,7628
1000eeec:	01840074 	movhi	r6,4097
1000eef0:	318e2e04 	addi	r6,r6,14520
1000eef4:	000ee680 	call	1000ee68 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000eef8:	01040034 	movhi	r4,4096
1000eefc:	21000804 	addi	r4,r4,32
1000ef00:	01440034 	movhi	r5,4096
1000ef04:	29400804 	addi	r5,r5,32
1000ef08:	01840034 	movhi	r6,4096
1000ef0c:	31806f04 	addi	r6,r6,444
1000ef10:	000ee680 	call	1000ee68 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000ef14:	01040074 	movhi	r4,4097
1000ef18:	2104d504 	addi	r4,r4,4948
1000ef1c:	01440074 	movhi	r5,4097
1000ef20:	2944d504 	addi	r5,r5,4948
1000ef24:	01840074 	movhi	r6,4097
1000ef28:	31877304 	addi	r6,r6,7628
1000ef2c:	000ee680 	call	1000ee68 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000ef30:	00102cc0 	call	100102cc <alt_dcache_flush_all>
  alt_icache_flush_all();
1000ef34:	00104940 	call	10010494 <alt_icache_flush_all>
}
1000ef38:	e037883a 	mov	sp,fp
1000ef3c:	dfc00117 	ldw	ra,4(sp)
1000ef40:	df000017 	ldw	fp,0(sp)
1000ef44:	dec00204 	addi	sp,sp,8
1000ef48:	f800283a 	ret

1000ef4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ef4c:	defffe04 	addi	sp,sp,-8
1000ef50:	dfc00115 	stw	ra,4(sp)
1000ef54:	df000015 	stw	fp,0(sp)
1000ef58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ef5c:	00840074 	movhi	r2,4097
1000ef60:	108e2904 	addi	r2,r2,14500
1000ef64:	10800017 	ldw	r2,0(r2)
1000ef68:	10000526 	beq	r2,zero,1000ef80 <alt_get_errno+0x34>
1000ef6c:	00840074 	movhi	r2,4097
1000ef70:	108e2904 	addi	r2,r2,14500
1000ef74:	10800017 	ldw	r2,0(r2)
1000ef78:	103ee83a 	callr	r2
1000ef7c:	00000206 	br	1000ef88 <alt_get_errno+0x3c>
1000ef80:	00840074 	movhi	r2,4097
1000ef84:	1094f004 	addi	r2,r2,21440
}
1000ef88:	e037883a 	mov	sp,fp
1000ef8c:	dfc00117 	ldw	ra,4(sp)
1000ef90:	df000017 	ldw	fp,0(sp)
1000ef94:	dec00204 	addi	sp,sp,8
1000ef98:	f800283a 	ret

1000ef9c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000ef9c:	defff904 	addi	sp,sp,-28
1000efa0:	dfc00615 	stw	ra,24(sp)
1000efa4:	df000515 	stw	fp,20(sp)
1000efa8:	df000504 	addi	fp,sp,20
1000efac:	e13ffd15 	stw	r4,-12(fp)
1000efb0:	e17ffe15 	stw	r5,-8(fp)
1000efb4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000efb8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000efbc:	e0bffd17 	ldw	r2,-12(fp)
1000efc0:	10000816 	blt	r2,zero,1000efe4 <lseek+0x48>
1000efc4:	e13ffd17 	ldw	r4,-12(fp)
1000efc8:	01400304 	movi	r5,12
1000efcc:	000c2ec0 	call	1000c2ec <__mulsi3>
1000efd0:	1007883a 	mov	r3,r2
1000efd4:	00840074 	movhi	r2,4097
1000efd8:	1089a604 	addi	r2,r2,9880
1000efdc:	1885883a 	add	r2,r3,r2
1000efe0:	00000106 	br	1000efe8 <lseek+0x4c>
1000efe4:	0005883a 	mov	r2,zero
1000efe8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000efec:	e0bffc17 	ldw	r2,-16(fp)
1000eff0:	10001026 	beq	r2,zero,1000f034 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000eff4:	e0bffc17 	ldw	r2,-16(fp)
1000eff8:	10800017 	ldw	r2,0(r2)
1000effc:	10800717 	ldw	r2,28(r2)
1000f000:	10000926 	beq	r2,zero,1000f028 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000f004:	e0bffc17 	ldw	r2,-16(fp)
1000f008:	10800017 	ldw	r2,0(r2)
1000f00c:	10800717 	ldw	r2,28(r2)
1000f010:	e13ffc17 	ldw	r4,-16(fp)
1000f014:	e17ffe17 	ldw	r5,-8(fp)
1000f018:	e1bfff17 	ldw	r6,-4(fp)
1000f01c:	103ee83a 	callr	r2
1000f020:	e0bffb15 	stw	r2,-20(fp)
1000f024:	00000506 	br	1000f03c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000f028:	00bfde84 	movi	r2,-134
1000f02c:	e0bffb15 	stw	r2,-20(fp)
1000f030:	00000206 	br	1000f03c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000f034:	00bfebc4 	movi	r2,-81
1000f038:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000f03c:	e0bffb17 	ldw	r2,-20(fp)
1000f040:	1000070e 	bge	r2,zero,1000f060 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000f044:	000ef4c0 	call	1000ef4c <alt_get_errno>
1000f048:	1007883a 	mov	r3,r2
1000f04c:	e0bffb17 	ldw	r2,-20(fp)
1000f050:	0085c83a 	sub	r2,zero,r2
1000f054:	18800015 	stw	r2,0(r3)
    rc = -1;
1000f058:	00bfffc4 	movi	r2,-1
1000f05c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000f060:	e0bffb17 	ldw	r2,-20(fp)
}
1000f064:	e037883a 	mov	sp,fp
1000f068:	dfc00117 	ldw	ra,4(sp)
1000f06c:	df000017 	ldw	fp,0(sp)
1000f070:	dec00204 	addi	sp,sp,8
1000f074:	f800283a 	ret

1000f078 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000f078:	defffd04 	addi	sp,sp,-12
1000f07c:	dfc00215 	stw	ra,8(sp)
1000f080:	df000115 	stw	fp,4(sp)
1000f084:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000f088:	0009883a 	mov	r4,zero
1000f08c:	000f56c0 	call	1000f56c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000f090:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000f094:	000f5a00 	call	1000f5a0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000f098:	01040074 	movhi	r4,4097
1000f09c:	21076904 	addi	r4,r4,7588
1000f0a0:	01440074 	movhi	r5,4097
1000f0a4:	29476904 	addi	r5,r5,7588
1000f0a8:	01840074 	movhi	r6,4097
1000f0ac:	31876904 	addi	r6,r6,7588
1000f0b0:	00108600 	call	10010860 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000f0b4:	00103dc0 	call	100103dc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000f0b8:	01040074 	movhi	r4,4097
1000f0bc:	21010e04 	addi	r4,r4,1080
1000f0c0:	0010fb00 	call	10010fb0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000f0c4:	d126d317 	ldw	r4,-25780(gp)
1000f0c8:	d0e6d417 	ldw	r3,-25776(gp)
1000f0cc:	d0a6d517 	ldw	r2,-25772(gp)
1000f0d0:	180b883a 	mov	r5,r3
1000f0d4:	100d883a 	mov	r6,r2
1000f0d8:	000031c0 	call	1000031c <main>
1000f0dc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000f0e0:	01000044 	movi	r4,1
1000f0e4:	000eb600 	call	1000eb60 <close>
  exit (result);
1000f0e8:	e13fff17 	ldw	r4,-4(fp)
1000f0ec:	0010fc40 	call	10010fc4 <exit>

1000f0f0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000f0f0:	defffe04 	addi	sp,sp,-8
1000f0f4:	df000115 	stw	fp,4(sp)
1000f0f8:	df000104 	addi	fp,sp,4
1000f0fc:	e13fff15 	stw	r4,-4(fp)
}
1000f100:	e037883a 	mov	sp,fp
1000f104:	df000017 	ldw	fp,0(sp)
1000f108:	dec00104 	addi	sp,sp,4
1000f10c:	f800283a 	ret

1000f110 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000f110:	defffe04 	addi	sp,sp,-8
1000f114:	df000115 	stw	fp,4(sp)
1000f118:	df000104 	addi	fp,sp,4
1000f11c:	e13fff15 	stw	r4,-4(fp)
}
1000f120:	e037883a 	mov	sp,fp
1000f124:	df000017 	ldw	fp,0(sp)
1000f128:	dec00104 	addi	sp,sp,4
1000f12c:	f800283a 	ret

1000f130 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f130:	defffe04 	addi	sp,sp,-8
1000f134:	dfc00115 	stw	ra,4(sp)
1000f138:	df000015 	stw	fp,0(sp)
1000f13c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f140:	00840074 	movhi	r2,4097
1000f144:	108e2904 	addi	r2,r2,14500
1000f148:	10800017 	ldw	r2,0(r2)
1000f14c:	10000526 	beq	r2,zero,1000f164 <alt_get_errno+0x34>
1000f150:	00840074 	movhi	r2,4097
1000f154:	108e2904 	addi	r2,r2,14500
1000f158:	10800017 	ldw	r2,0(r2)
1000f15c:	103ee83a 	callr	r2
1000f160:	00000206 	br	1000f16c <alt_get_errno+0x3c>
1000f164:	00840074 	movhi	r2,4097
1000f168:	1094f004 	addi	r2,r2,21440
}
1000f16c:	e037883a 	mov	sp,fp
1000f170:	dfc00117 	ldw	ra,4(sp)
1000f174:	df000017 	ldw	fp,0(sp)
1000f178:	dec00204 	addi	sp,sp,8
1000f17c:	f800283a 	ret

1000f180 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000f180:	defff904 	addi	sp,sp,-28
1000f184:	dfc00615 	stw	ra,24(sp)
1000f188:	df000515 	stw	fp,20(sp)
1000f18c:	df000504 	addi	fp,sp,20
1000f190:	e13ffd15 	stw	r4,-12(fp)
1000f194:	e17ffe15 	stw	r5,-8(fp)
1000f198:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f19c:	e0bffd17 	ldw	r2,-12(fp)
1000f1a0:	10000816 	blt	r2,zero,1000f1c4 <read+0x44>
1000f1a4:	e13ffd17 	ldw	r4,-12(fp)
1000f1a8:	01400304 	movi	r5,12
1000f1ac:	000c2ec0 	call	1000c2ec <__mulsi3>
1000f1b0:	1007883a 	mov	r3,r2
1000f1b4:	00840074 	movhi	r2,4097
1000f1b8:	1089a604 	addi	r2,r2,9880
1000f1bc:	1885883a 	add	r2,r3,r2
1000f1c0:	00000106 	br	1000f1c8 <read+0x48>
1000f1c4:	0005883a 	mov	r2,zero
1000f1c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000f1cc:	e0bffb17 	ldw	r2,-20(fp)
1000f1d0:	10002226 	beq	r2,zero,1000f25c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f1d4:	e0bffb17 	ldw	r2,-20(fp)
1000f1d8:	10800217 	ldw	r2,8(r2)
1000f1dc:	108000cc 	andi	r2,r2,3
1000f1e0:	10800060 	cmpeqi	r2,r2,1
1000f1e4:	1000181e 	bne	r2,zero,1000f248 <read+0xc8>
        (fd->dev->read))
1000f1e8:	e0bffb17 	ldw	r2,-20(fp)
1000f1ec:	10800017 	ldw	r2,0(r2)
1000f1f0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f1f4:	10001426 	beq	r2,zero,1000f248 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000f1f8:	e0bffb17 	ldw	r2,-20(fp)
1000f1fc:	10800017 	ldw	r2,0(r2)
1000f200:	10800517 	ldw	r2,20(r2)
1000f204:	e0ffff17 	ldw	r3,-4(fp)
1000f208:	e13ffb17 	ldw	r4,-20(fp)
1000f20c:	e17ffe17 	ldw	r5,-8(fp)
1000f210:	180d883a 	mov	r6,r3
1000f214:	103ee83a 	callr	r2
1000f218:	e0bffc15 	stw	r2,-16(fp)
1000f21c:	e0bffc17 	ldw	r2,-16(fp)
1000f220:	1000070e 	bge	r2,zero,1000f240 <read+0xc0>
        {
          ALT_ERRNO = -rval;
1000f224:	000f1300 	call	1000f130 <alt_get_errno>
1000f228:	1007883a 	mov	r3,r2
1000f22c:	e0bffc17 	ldw	r2,-16(fp)
1000f230:	0085c83a 	sub	r2,zero,r2
1000f234:	18800015 	stw	r2,0(r3)
          return -1;
1000f238:	00bfffc4 	movi	r2,-1
1000f23c:	00000c06 	br	1000f270 <read+0xf0>
        }
        return rval;
1000f240:	e0bffc17 	ldw	r2,-16(fp)
1000f244:	00000a06 	br	1000f270 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000f248:	000f1300 	call	1000f130 <alt_get_errno>
1000f24c:	1007883a 	mov	r3,r2
1000f250:	00800344 	movi	r2,13
1000f254:	18800015 	stw	r2,0(r3)
1000f258:	00000406 	br	1000f26c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000f25c:	000f1300 	call	1000f130 <alt_get_errno>
1000f260:	1007883a 	mov	r3,r2
1000f264:	00801444 	movi	r2,81
1000f268:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000f26c:	00bfffc4 	movi	r2,-1
}
1000f270:	e037883a 	mov	sp,fp
1000f274:	dfc00117 	ldw	ra,4(sp)
1000f278:	df000017 	ldw	fp,0(sp)
1000f27c:	dec00204 	addi	sp,sp,8
1000f280:	f800283a 	ret

1000f284 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000f284:	defffc04 	addi	sp,sp,-16
1000f288:	dfc00315 	stw	ra,12(sp)
1000f28c:	df000215 	stw	fp,8(sp)
1000f290:	dc000115 	stw	r16,4(sp)
1000f294:	df000204 	addi	fp,sp,8
1000f298:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000f29c:	e0bffe17 	ldw	r2,-8(fp)
1000f2a0:	108000d0 	cmplti	r2,r2,3
1000f2a4:	1000111e 	bne	r2,zero,1000f2ec <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000f2a8:	04040074 	movhi	r16,4097
1000f2ac:	8409a604 	addi	r16,r16,9880
1000f2b0:	e0bffe17 	ldw	r2,-8(fp)
1000f2b4:	1009883a 	mov	r4,r2
1000f2b8:	01400304 	movi	r5,12
1000f2bc:	000c2ec0 	call	1000c2ec <__mulsi3>
1000f2c0:	8085883a 	add	r2,r16,r2
1000f2c4:	10800204 	addi	r2,r2,8
1000f2c8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000f2cc:	04040074 	movhi	r16,4097
1000f2d0:	8409a604 	addi	r16,r16,9880
1000f2d4:	e0bffe17 	ldw	r2,-8(fp)
1000f2d8:	1009883a 	mov	r4,r2
1000f2dc:	01400304 	movi	r5,12
1000f2e0:	000c2ec0 	call	1000c2ec <__mulsi3>
1000f2e4:	8085883a 	add	r2,r16,r2
1000f2e8:	10000015 	stw	zero,0(r2)
  }
}
1000f2ec:	e6ffff04 	addi	sp,fp,-4
1000f2f0:	dfc00217 	ldw	ra,8(sp)
1000f2f4:	df000117 	ldw	fp,4(sp)
1000f2f8:	dc000017 	ldw	r16,0(sp)
1000f2fc:	dec00304 	addi	sp,sp,12
1000f300:	f800283a 	ret

1000f304 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000f304:	defff904 	addi	sp,sp,-28
1000f308:	df000615 	stw	fp,24(sp)
1000f30c:	df000604 	addi	fp,sp,24
1000f310:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f314:	0005303a 	rdctl	r2,status
1000f318:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f31c:	e0fffc17 	ldw	r3,-16(fp)
1000f320:	00bfff84 	movi	r2,-2
1000f324:	1884703a 	and	r2,r3,r2
1000f328:	1001703a 	wrctl	status,r2
  
  return context;
1000f32c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000f330:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000f334:	d0a00c17 	ldw	r2,-32720(gp)
1000f338:	10c000c4 	addi	r3,r2,3
1000f33c:	00bfff04 	movi	r2,-4
1000f340:	1884703a 	and	r2,r3,r2
1000f344:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000f348:	d0e00c17 	ldw	r3,-32720(gp)
1000f34c:	e0bfff17 	ldw	r2,-4(fp)
1000f350:	1887883a 	add	r3,r3,r2
1000f354:	00860034 	movhi	r2,6144
1000f358:	10800004 	addi	r2,r2,0
1000f35c:	10c0062e 	bgeu	r2,r3,1000f378 <sbrk+0x74>
1000f360:	e0bffa17 	ldw	r2,-24(fp)
1000f364:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f368:	e0bffd17 	ldw	r2,-12(fp)
1000f36c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000f370:	00bfffc4 	movi	r2,-1
1000f374:	00000b06 	br	1000f3a4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000f378:	d0a00c17 	ldw	r2,-32720(gp)
1000f37c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
1000f380:	d0e00c17 	ldw	r3,-32720(gp)
1000f384:	e0bfff17 	ldw	r2,-4(fp)
1000f388:	1885883a 	add	r2,r3,r2
1000f38c:	d0a00c15 	stw	r2,-32720(gp)
1000f390:	e0bffa17 	ldw	r2,-24(fp)
1000f394:	e0bffe15 	stw	r2,-8(fp)
1000f398:	e0bffe17 	ldw	r2,-8(fp)
1000f39c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000f3a0:	e0bffb17 	ldw	r2,-20(fp)
} 
1000f3a4:	e037883a 	mov	sp,fp
1000f3a8:	df000017 	ldw	fp,0(sp)
1000f3ac:	dec00104 	addi	sp,sp,4
1000f3b0:	f800283a 	ret

1000f3b4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1000f3b4:	defffd04 	addi	sp,sp,-12
1000f3b8:	dfc00215 	stw	ra,8(sp)
1000f3bc:	df000115 	stw	fp,4(sp)
1000f3c0:	df000104 	addi	fp,sp,4
1000f3c4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1000f3c8:	e13fff17 	ldw	r4,-4(fp)
1000f3cc:	00101740 	call	10010174 <alt_busy_sleep>
}
1000f3d0:	e037883a 	mov	sp,fp
1000f3d4:	dfc00117 	ldw	ra,4(sp)
1000f3d8:	df000017 	ldw	fp,0(sp)
1000f3dc:	dec00204 	addi	sp,sp,8
1000f3e0:	f800283a 	ret

1000f3e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f3e4:	defffe04 	addi	sp,sp,-8
1000f3e8:	dfc00115 	stw	ra,4(sp)
1000f3ec:	df000015 	stw	fp,0(sp)
1000f3f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f3f4:	00840074 	movhi	r2,4097
1000f3f8:	108e2904 	addi	r2,r2,14500
1000f3fc:	10800017 	ldw	r2,0(r2)
1000f400:	10000526 	beq	r2,zero,1000f418 <alt_get_errno+0x34>
1000f404:	00840074 	movhi	r2,4097
1000f408:	108e2904 	addi	r2,r2,14500
1000f40c:	10800017 	ldw	r2,0(r2)
1000f410:	103ee83a 	callr	r2
1000f414:	00000206 	br	1000f420 <alt_get_errno+0x3c>
1000f418:	00840074 	movhi	r2,4097
1000f41c:	1094f004 	addi	r2,r2,21440
}
1000f420:	e037883a 	mov	sp,fp
1000f424:	dfc00117 	ldw	ra,4(sp)
1000f428:	df000017 	ldw	fp,0(sp)
1000f42c:	dec00204 	addi	sp,sp,8
1000f430:	f800283a 	ret

1000f434 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000f434:	defff904 	addi	sp,sp,-28
1000f438:	dfc00615 	stw	ra,24(sp)
1000f43c:	df000515 	stw	fp,20(sp)
1000f440:	df000504 	addi	fp,sp,20
1000f444:	e13ffd15 	stw	r4,-12(fp)
1000f448:	e17ffe15 	stw	r5,-8(fp)
1000f44c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f450:	e0bffd17 	ldw	r2,-12(fp)
1000f454:	10000816 	blt	r2,zero,1000f478 <write+0x44>
1000f458:	e13ffd17 	ldw	r4,-12(fp)
1000f45c:	01400304 	movi	r5,12
1000f460:	000c2ec0 	call	1000c2ec <__mulsi3>
1000f464:	1007883a 	mov	r3,r2
1000f468:	00840074 	movhi	r2,4097
1000f46c:	1089a604 	addi	r2,r2,9880
1000f470:	1885883a 	add	r2,r3,r2
1000f474:	00000106 	br	1000f47c <write+0x48>
1000f478:	0005883a 	mov	r2,zero
1000f47c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000f480:	e0bffb17 	ldw	r2,-20(fp)
1000f484:	10002126 	beq	r2,zero,1000f50c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000f488:	e0bffb17 	ldw	r2,-20(fp)
1000f48c:	10800217 	ldw	r2,8(r2)
1000f490:	108000cc 	andi	r2,r2,3
1000f494:	10001826 	beq	r2,zero,1000f4f8 <write+0xc4>
1000f498:	e0bffb17 	ldw	r2,-20(fp)
1000f49c:	10800017 	ldw	r2,0(r2)
1000f4a0:	10800617 	ldw	r2,24(r2)
1000f4a4:	10001426 	beq	r2,zero,1000f4f8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000f4a8:	e0bffb17 	ldw	r2,-20(fp)
1000f4ac:	10800017 	ldw	r2,0(r2)
1000f4b0:	10800617 	ldw	r2,24(r2)
1000f4b4:	e0ffff17 	ldw	r3,-4(fp)
1000f4b8:	e13ffb17 	ldw	r4,-20(fp)
1000f4bc:	e17ffe17 	ldw	r5,-8(fp)
1000f4c0:	180d883a 	mov	r6,r3
1000f4c4:	103ee83a 	callr	r2
1000f4c8:	e0bffc15 	stw	r2,-16(fp)
1000f4cc:	e0bffc17 	ldw	r2,-16(fp)
1000f4d0:	1000070e 	bge	r2,zero,1000f4f0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
1000f4d4:	000f3e40 	call	1000f3e4 <alt_get_errno>
1000f4d8:	1007883a 	mov	r3,r2
1000f4dc:	e0bffc17 	ldw	r2,-16(fp)
1000f4e0:	0085c83a 	sub	r2,zero,r2
1000f4e4:	18800015 	stw	r2,0(r3)
        return -1;
1000f4e8:	00bfffc4 	movi	r2,-1
1000f4ec:	00000c06 	br	1000f520 <write+0xec>
      }
      return rval;
1000f4f0:	e0bffc17 	ldw	r2,-16(fp)
1000f4f4:	00000a06 	br	1000f520 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000f4f8:	000f3e40 	call	1000f3e4 <alt_get_errno>
1000f4fc:	1007883a 	mov	r3,r2
1000f500:	00800344 	movi	r2,13
1000f504:	18800015 	stw	r2,0(r3)
1000f508:	00000406 	br	1000f51c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000f50c:	000f3e40 	call	1000f3e4 <alt_get_errno>
1000f510:	1007883a 	mov	r3,r2
1000f514:	00801444 	movi	r2,81
1000f518:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000f51c:	00bfffc4 	movi	r2,-1
}
1000f520:	e037883a 	mov	sp,fp
1000f524:	dfc00117 	ldw	ra,4(sp)
1000f528:	df000017 	ldw	fp,0(sp)
1000f52c:	dec00204 	addi	sp,sp,8
1000f530:	f800283a 	ret

1000f534 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000f534:	defffd04 	addi	sp,sp,-12
1000f538:	dfc00215 	stw	ra,8(sp)
1000f53c:	df000115 	stw	fp,4(sp)
1000f540:	df000104 	addi	fp,sp,4
1000f544:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000f548:	e13fff17 	ldw	r4,-4(fp)
1000f54c:	01440074 	movhi	r5,4097
1000f550:	294e2604 	addi	r5,r5,14488
1000f554:	00103380 	call	10010338 <alt_dev_llist_insert>
}
1000f558:	e037883a 	mov	sp,fp
1000f55c:	dfc00117 	ldw	ra,4(sp)
1000f560:	df000017 	ldw	fp,0(sp)
1000f564:	dec00204 	addi	sp,sp,8
1000f568:	f800283a 	ret

1000f56c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000f56c:	defffd04 	addi	sp,sp,-12
1000f570:	dfc00215 	stw	ra,8(sp)
1000f574:	df000115 	stw	fp,4(sp)
1000f578:	df000104 	addi	fp,sp,4
1000f57c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
1000f580:	0010d180 	call	10010d18 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000f584:	00800044 	movi	r2,1
1000f588:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000f58c:	e037883a 	mov	sp,fp
1000f590:	dfc00117 	ldw	ra,4(sp)
1000f594:	df000017 	ldw	fp,0(sp)
1000f598:	dec00204 	addi	sp,sp,8
1000f59c:	f800283a 	ret

1000f5a0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000f5a0:	defffe04 	addi	sp,sp,-8
1000f5a4:	dfc00115 	stw	ra,4(sp)
1000f5a8:	df000015 	stw	fp,0(sp)
1000f5ac:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000f5b0:	01040074 	movhi	r4,4097
1000f5b4:	210a1004 	addi	r4,r4,10304
1000f5b8:	000b883a 	mov	r5,zero
1000f5bc:	01800144 	movi	r6,5
1000f5c0:	000f74c0 	call	1000f74c <altera_avalon_jtag_uart_init>
1000f5c4:	01040074 	movhi	r4,4097
1000f5c8:	210a0604 	addi	r4,r4,10264
1000f5cc:	000f5340 	call	1000f534 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000f5d0:	0001883a 	nop
}
1000f5d4:	e037883a 	mov	sp,fp
1000f5d8:	dfc00117 	ldw	ra,4(sp)
1000f5dc:	df000017 	ldw	fp,0(sp)
1000f5e0:	dec00204 	addi	sp,sp,8
1000f5e4:	f800283a 	ret

1000f5e8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000f5e8:	defffa04 	addi	sp,sp,-24
1000f5ec:	dfc00515 	stw	ra,20(sp)
1000f5f0:	df000415 	stw	fp,16(sp)
1000f5f4:	df000404 	addi	fp,sp,16
1000f5f8:	e13ffd15 	stw	r4,-12(fp)
1000f5fc:	e17ffe15 	stw	r5,-8(fp)
1000f600:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f604:	e0bffd17 	ldw	r2,-12(fp)
1000f608:	10800017 	ldw	r2,0(r2)
1000f60c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000f610:	e0bffc17 	ldw	r2,-16(fp)
1000f614:	10c00a04 	addi	r3,r2,40
1000f618:	e0bffd17 	ldw	r2,-12(fp)
1000f61c:	10800217 	ldw	r2,8(r2)
1000f620:	1809883a 	mov	r4,r3
1000f624:	e17ffe17 	ldw	r5,-8(fp)
1000f628:	e1bfff17 	ldw	r6,-4(fp)
1000f62c:	100f883a 	mov	r7,r2
1000f630:	000fc100 	call	1000fc10 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000f634:	e037883a 	mov	sp,fp
1000f638:	dfc00117 	ldw	ra,4(sp)
1000f63c:	df000017 	ldw	fp,0(sp)
1000f640:	dec00204 	addi	sp,sp,8
1000f644:	f800283a 	ret

1000f648 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000f648:	defffa04 	addi	sp,sp,-24
1000f64c:	dfc00515 	stw	ra,20(sp)
1000f650:	df000415 	stw	fp,16(sp)
1000f654:	df000404 	addi	fp,sp,16
1000f658:	e13ffd15 	stw	r4,-12(fp)
1000f65c:	e17ffe15 	stw	r5,-8(fp)
1000f660:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f664:	e0bffd17 	ldw	r2,-12(fp)
1000f668:	10800017 	ldw	r2,0(r2)
1000f66c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000f670:	e0bffc17 	ldw	r2,-16(fp)
1000f674:	10c00a04 	addi	r3,r2,40
1000f678:	e0bffd17 	ldw	r2,-12(fp)
1000f67c:	10800217 	ldw	r2,8(r2)
1000f680:	1809883a 	mov	r4,r3
1000f684:	e17ffe17 	ldw	r5,-8(fp)
1000f688:	e1bfff17 	ldw	r6,-4(fp)
1000f68c:	100f883a 	mov	r7,r2
1000f690:	000fe1c0 	call	1000fe1c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000f694:	e037883a 	mov	sp,fp
1000f698:	dfc00117 	ldw	ra,4(sp)
1000f69c:	df000017 	ldw	fp,0(sp)
1000f6a0:	dec00204 	addi	sp,sp,8
1000f6a4:	f800283a 	ret

1000f6a8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000f6a8:	defffc04 	addi	sp,sp,-16
1000f6ac:	dfc00315 	stw	ra,12(sp)
1000f6b0:	df000215 	stw	fp,8(sp)
1000f6b4:	df000204 	addi	fp,sp,8
1000f6b8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f6bc:	e0bfff17 	ldw	r2,-4(fp)
1000f6c0:	10800017 	ldw	r2,0(r2)
1000f6c4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000f6c8:	e0bffe17 	ldw	r2,-8(fp)
1000f6cc:	10c00a04 	addi	r3,r2,40
1000f6d0:	e0bfff17 	ldw	r2,-4(fp)
1000f6d4:	10800217 	ldw	r2,8(r2)
1000f6d8:	1809883a 	mov	r4,r3
1000f6dc:	100b883a 	mov	r5,r2
1000f6e0:	000fabc0 	call	1000fabc <altera_avalon_jtag_uart_close>
}
1000f6e4:	e037883a 	mov	sp,fp
1000f6e8:	dfc00117 	ldw	ra,4(sp)
1000f6ec:	df000017 	ldw	fp,0(sp)
1000f6f0:	dec00204 	addi	sp,sp,8
1000f6f4:	f800283a 	ret

1000f6f8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000f6f8:	defffa04 	addi	sp,sp,-24
1000f6fc:	dfc00515 	stw	ra,20(sp)
1000f700:	df000415 	stw	fp,16(sp)
1000f704:	df000404 	addi	fp,sp,16
1000f708:	e13ffd15 	stw	r4,-12(fp)
1000f70c:	e17ffe15 	stw	r5,-8(fp)
1000f710:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000f714:	e0bffd17 	ldw	r2,-12(fp)
1000f718:	10800017 	ldw	r2,0(r2)
1000f71c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000f720:	e0bffc17 	ldw	r2,-16(fp)
1000f724:	10800a04 	addi	r2,r2,40
1000f728:	1009883a 	mov	r4,r2
1000f72c:	e17ffe17 	ldw	r5,-8(fp)
1000f730:	e1bfff17 	ldw	r6,-4(fp)
1000f734:	000fb240 	call	1000fb24 <altera_avalon_jtag_uart_ioctl>
}
1000f738:	e037883a 	mov	sp,fp
1000f73c:	dfc00117 	ldw	ra,4(sp)
1000f740:	df000017 	ldw	fp,0(sp)
1000f744:	dec00204 	addi	sp,sp,8
1000f748:	f800283a 	ret

1000f74c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000f74c:	defffa04 	addi	sp,sp,-24
1000f750:	dfc00515 	stw	ra,20(sp)
1000f754:	df000415 	stw	fp,16(sp)
1000f758:	df000404 	addi	fp,sp,16
1000f75c:	e13ffd15 	stw	r4,-12(fp)
1000f760:	e17ffe15 	stw	r5,-8(fp)
1000f764:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000f768:	e0bffd17 	ldw	r2,-12(fp)
1000f76c:	00c00044 	movi	r3,1
1000f770:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000f774:	e0bffd17 	ldw	r2,-12(fp)
1000f778:	10800017 	ldw	r2,0(r2)
1000f77c:	10800104 	addi	r2,r2,4
1000f780:	1007883a 	mov	r3,r2
1000f784:	e0bffd17 	ldw	r2,-12(fp)
1000f788:	10800817 	ldw	r2,32(r2)
1000f78c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000f790:	e0fffe17 	ldw	r3,-8(fp)
1000f794:	e0bfff17 	ldw	r2,-4(fp)
1000f798:	d8000015 	stw	zero,0(sp)
1000f79c:	1809883a 	mov	r4,r3
1000f7a0:	100b883a 	mov	r5,r2
1000f7a4:	01840074 	movhi	r6,4097
1000f7a8:	31be0404 	addi	r6,r6,-2032
1000f7ac:	e1fffd17 	ldw	r7,-12(fp)
1000f7b0:	00104b00 	call	100104b0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000f7b4:	e0bffd17 	ldw	r2,-12(fp)
1000f7b8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000f7bc:	e0bffd17 	ldw	r2,-12(fp)
1000f7c0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000f7c4:	00840074 	movhi	r2,4097
1000f7c8:	1094f504 	addi	r2,r2,21460
1000f7cc:	10800017 	ldw	r2,0(r2)
1000f7d0:	1809883a 	mov	r4,r3
1000f7d4:	100b883a 	mov	r5,r2
1000f7d8:	01840074 	movhi	r6,4097
1000f7dc:	31be8504 	addi	r6,r6,-1516
1000f7e0:	e1fffd17 	ldw	r7,-12(fp)
1000f7e4:	00100340 	call	10010034 <alt_alarm_start>
1000f7e8:	1000040e 	bge	r2,zero,1000f7fc <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000f7ec:	e0fffd17 	ldw	r3,-12(fp)
1000f7f0:	00a00034 	movhi	r2,32768
1000f7f4:	10bfffc4 	addi	r2,r2,-1
1000f7f8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000f7fc:	e037883a 	mov	sp,fp
1000f800:	dfc00117 	ldw	ra,4(sp)
1000f804:	df000017 	ldw	fp,0(sp)
1000f808:	dec00204 	addi	sp,sp,8
1000f80c:	f800283a 	ret

1000f810 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000f810:	defff804 	addi	sp,sp,-32
1000f814:	df000715 	stw	fp,28(sp)
1000f818:	df000704 	addi	fp,sp,28
1000f81c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000f820:	e0bfff17 	ldw	r2,-4(fp)
1000f824:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000f828:	e0bffb17 	ldw	r2,-20(fp)
1000f82c:	10800017 	ldw	r2,0(r2)
1000f830:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000f834:	e0bffc17 	ldw	r2,-16(fp)
1000f838:	10800104 	addi	r2,r2,4
1000f83c:	10800037 	ldwio	r2,0(r2)
1000f840:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000f844:	e0bffd17 	ldw	r2,-12(fp)
1000f848:	1080c00c 	andi	r2,r2,768
1000f84c:	1000011e 	bne	r2,zero,1000f854 <altera_avalon_jtag_uart_irq+0x44>
      break;
1000f850:	00006c06 	br	1000fa04 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000f854:	e0bffd17 	ldw	r2,-12(fp)
1000f858:	1080400c 	andi	r2,r2,256
1000f85c:	10003426 	beq	r2,zero,1000f930 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000f860:	00800074 	movhi	r2,1
1000f864:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f868:	e0bffb17 	ldw	r2,-20(fp)
1000f86c:	10800a17 	ldw	r2,40(r2)
1000f870:	10800044 	addi	r2,r2,1
1000f874:	1081ffcc 	andi	r2,r2,2047
1000f878:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000f87c:	e0bffb17 	ldw	r2,-20(fp)
1000f880:	10c00b17 	ldw	r3,44(r2)
1000f884:	e0bffe17 	ldw	r2,-8(fp)
1000f888:	1880011e 	bne	r3,r2,1000f890 <altera_avalon_jtag_uart_irq+0x80>
          break;
1000f88c:	00001606 	br	1000f8e8 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000f890:	e0bffc17 	ldw	r2,-16(fp)
1000f894:	10800037 	ldwio	r2,0(r2)
1000f898:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000f89c:	e0bff917 	ldw	r2,-28(fp)
1000f8a0:	10a0000c 	andi	r2,r2,32768
1000f8a4:	1000011e 	bne	r2,zero,1000f8ac <altera_avalon_jtag_uart_irq+0x9c>
          break;
1000f8a8:	00000f06 	br	1000f8e8 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000f8ac:	e0bffb17 	ldw	r2,-20(fp)
1000f8b0:	10800a17 	ldw	r2,40(r2)
1000f8b4:	e0fff917 	ldw	r3,-28(fp)
1000f8b8:	1809883a 	mov	r4,r3
1000f8bc:	e0fffb17 	ldw	r3,-20(fp)
1000f8c0:	1885883a 	add	r2,r3,r2
1000f8c4:	10800e04 	addi	r2,r2,56
1000f8c8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f8cc:	e0bffb17 	ldw	r2,-20(fp)
1000f8d0:	10800a17 	ldw	r2,40(r2)
1000f8d4:	10800044 	addi	r2,r2,1
1000f8d8:	10c1ffcc 	andi	r3,r2,2047
1000f8dc:	e0bffb17 	ldw	r2,-20(fp)
1000f8e0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000f8e4:	003fe006 	br	1000f868 <__alt_data_end+0xf800f868>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000f8e8:	e0bff917 	ldw	r2,-28(fp)
1000f8ec:	10bfffec 	andhi	r2,r2,65535
1000f8f0:	10000f26 	beq	r2,zero,1000f930 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000f8f4:	e0bffb17 	ldw	r2,-20(fp)
1000f8f8:	10c00817 	ldw	r3,32(r2)
1000f8fc:	00bfff84 	movi	r2,-2
1000f900:	1886703a 	and	r3,r3,r2
1000f904:	e0bffb17 	ldw	r2,-20(fp)
1000f908:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000f90c:	e0bffc17 	ldw	r2,-16(fp)
1000f910:	10800104 	addi	r2,r2,4
1000f914:	1007883a 	mov	r3,r2
1000f918:	e0bffb17 	ldw	r2,-20(fp)
1000f91c:	10800817 	ldw	r2,32(r2)
1000f920:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000f924:	e0bffc17 	ldw	r2,-16(fp)
1000f928:	10800104 	addi	r2,r2,4
1000f92c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000f930:	e0bffd17 	ldw	r2,-12(fp)
1000f934:	1080800c 	andi	r2,r2,512
1000f938:	10003126 	beq	r2,zero,1000fa00 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000f93c:	e0bffd17 	ldw	r2,-12(fp)
1000f940:	1004d43a 	srli	r2,r2,16
1000f944:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000f948:	00001406 	br	1000f99c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000f94c:	e0bffc17 	ldw	r2,-16(fp)
1000f950:	e0fffb17 	ldw	r3,-20(fp)
1000f954:	18c00d17 	ldw	r3,52(r3)
1000f958:	e13ffb17 	ldw	r4,-20(fp)
1000f95c:	20c7883a 	add	r3,r4,r3
1000f960:	18c20e04 	addi	r3,r3,2104
1000f964:	18c00003 	ldbu	r3,0(r3)
1000f968:	18c03fcc 	andi	r3,r3,255
1000f96c:	18c0201c 	xori	r3,r3,128
1000f970:	18ffe004 	addi	r3,r3,-128
1000f974:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f978:	e0bffb17 	ldw	r2,-20(fp)
1000f97c:	10800d17 	ldw	r2,52(r2)
1000f980:	10800044 	addi	r2,r2,1
1000f984:	10c1ffcc 	andi	r3,r2,2047
1000f988:	e0bffb17 	ldw	r2,-20(fp)
1000f98c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000f990:	e0bffa17 	ldw	r2,-24(fp)
1000f994:	10bfffc4 	addi	r2,r2,-1
1000f998:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000f99c:	e0bffa17 	ldw	r2,-24(fp)
1000f9a0:	10000526 	beq	r2,zero,1000f9b8 <altera_avalon_jtag_uart_irq+0x1a8>
1000f9a4:	e0bffb17 	ldw	r2,-20(fp)
1000f9a8:	10c00d17 	ldw	r3,52(r2)
1000f9ac:	e0bffb17 	ldw	r2,-20(fp)
1000f9b0:	10800c17 	ldw	r2,48(r2)
1000f9b4:	18bfe51e 	bne	r3,r2,1000f94c <__alt_data_end+0xf800f94c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000f9b8:	e0bffa17 	ldw	r2,-24(fp)
1000f9bc:	10001026 	beq	r2,zero,1000fa00 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000f9c0:	e0bffb17 	ldw	r2,-20(fp)
1000f9c4:	10c00817 	ldw	r3,32(r2)
1000f9c8:	00bfff44 	movi	r2,-3
1000f9cc:	1886703a 	and	r3,r3,r2
1000f9d0:	e0bffb17 	ldw	r2,-20(fp)
1000f9d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000f9d8:	e0bffb17 	ldw	r2,-20(fp)
1000f9dc:	10800017 	ldw	r2,0(r2)
1000f9e0:	10800104 	addi	r2,r2,4
1000f9e4:	1007883a 	mov	r3,r2
1000f9e8:	e0bffb17 	ldw	r2,-20(fp)
1000f9ec:	10800817 	ldw	r2,32(r2)
1000f9f0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000f9f4:	e0bffc17 	ldw	r2,-16(fp)
1000f9f8:	10800104 	addi	r2,r2,4
1000f9fc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000fa00:	003f8c06 	br	1000f834 <__alt_data_end+0xf800f834>
}
1000fa04:	e037883a 	mov	sp,fp
1000fa08:	df000017 	ldw	fp,0(sp)
1000fa0c:	dec00104 	addi	sp,sp,4
1000fa10:	f800283a 	ret

1000fa14 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000fa14:	defff804 	addi	sp,sp,-32
1000fa18:	df000715 	stw	fp,28(sp)
1000fa1c:	df000704 	addi	fp,sp,28
1000fa20:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000fa24:	e0bffb17 	ldw	r2,-20(fp)
1000fa28:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000fa2c:	e0bff917 	ldw	r2,-28(fp)
1000fa30:	10800017 	ldw	r2,0(r2)
1000fa34:	10800104 	addi	r2,r2,4
1000fa38:	10800037 	ldwio	r2,0(r2)
1000fa3c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000fa40:	e0bffa17 	ldw	r2,-24(fp)
1000fa44:	1081000c 	andi	r2,r2,1024
1000fa48:	10000b26 	beq	r2,zero,1000fa78 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000fa4c:	e0bff917 	ldw	r2,-28(fp)
1000fa50:	10800017 	ldw	r2,0(r2)
1000fa54:	10800104 	addi	r2,r2,4
1000fa58:	1007883a 	mov	r3,r2
1000fa5c:	e0bff917 	ldw	r2,-28(fp)
1000fa60:	10800817 	ldw	r2,32(r2)
1000fa64:	10810014 	ori	r2,r2,1024
1000fa68:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1000fa6c:	e0bff917 	ldw	r2,-28(fp)
1000fa70:	10000915 	stw	zero,36(r2)
1000fa74:	00000a06 	br	1000faa0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000fa78:	e0bff917 	ldw	r2,-28(fp)
1000fa7c:	10c00917 	ldw	r3,36(r2)
1000fa80:	00a00034 	movhi	r2,32768
1000fa84:	10bfff04 	addi	r2,r2,-4
1000fa88:	10c00536 	bltu	r2,r3,1000faa0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1000fa8c:	e0bff917 	ldw	r2,-28(fp)
1000fa90:	10800917 	ldw	r2,36(r2)
1000fa94:	10c00044 	addi	r3,r2,1
1000fa98:	e0bff917 	ldw	r2,-28(fp)
1000fa9c:	10c00915 	stw	r3,36(r2)
1000faa0:	00840074 	movhi	r2,4097
1000faa4:	1094f504 	addi	r2,r2,21460
1000faa8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000faac:	e037883a 	mov	sp,fp
1000fab0:	df000017 	ldw	fp,0(sp)
1000fab4:	dec00104 	addi	sp,sp,4
1000fab8:	f800283a 	ret

1000fabc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000fabc:	defffd04 	addi	sp,sp,-12
1000fac0:	df000215 	stw	fp,8(sp)
1000fac4:	df000204 	addi	fp,sp,8
1000fac8:	e13ffe15 	stw	r4,-8(fp)
1000facc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000fad0:	00000506 	br	1000fae8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000fad4:	e0bfff17 	ldw	r2,-4(fp)
1000fad8:	1090000c 	andi	r2,r2,16384
1000fadc:	10000226 	beq	r2,zero,1000fae8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000fae0:	00bffd44 	movi	r2,-11
1000fae4:	00000b06 	br	1000fb14 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000fae8:	e0bffe17 	ldw	r2,-8(fp)
1000faec:	10c00d17 	ldw	r3,52(r2)
1000faf0:	e0bffe17 	ldw	r2,-8(fp)
1000faf4:	10800c17 	ldw	r2,48(r2)
1000faf8:	18800526 	beq	r3,r2,1000fb10 <altera_avalon_jtag_uart_close+0x54>
1000fafc:	e0bffe17 	ldw	r2,-8(fp)
1000fb00:	10c00917 	ldw	r3,36(r2)
1000fb04:	e0bffe17 	ldw	r2,-8(fp)
1000fb08:	10800117 	ldw	r2,4(r2)
1000fb0c:	18bff136 	bltu	r3,r2,1000fad4 <__alt_data_end+0xf800fad4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000fb10:	0005883a 	mov	r2,zero
}
1000fb14:	e037883a 	mov	sp,fp
1000fb18:	df000017 	ldw	fp,0(sp)
1000fb1c:	dec00104 	addi	sp,sp,4
1000fb20:	f800283a 	ret

1000fb24 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000fb24:	defffa04 	addi	sp,sp,-24
1000fb28:	df000515 	stw	fp,20(sp)
1000fb2c:	df000504 	addi	fp,sp,20
1000fb30:	e13ffd15 	stw	r4,-12(fp)
1000fb34:	e17ffe15 	stw	r5,-8(fp)
1000fb38:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000fb3c:	00bff9c4 	movi	r2,-25
1000fb40:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1000fb44:	e0bffe17 	ldw	r2,-8(fp)
1000fb48:	10da8060 	cmpeqi	r3,r2,27137
1000fb4c:	1800031e 	bne	r3,zero,1000fb5c <altera_avalon_jtag_uart_ioctl+0x38>
1000fb50:	109a80a0 	cmpeqi	r2,r2,27138
1000fb54:	1000191e 	bne	r2,zero,1000fbbc <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
1000fb58:	00002806 	br	1000fbfc <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000fb5c:	e0bffd17 	ldw	r2,-12(fp)
1000fb60:	10c00117 	ldw	r3,4(r2)
1000fb64:	00a00034 	movhi	r2,32768
1000fb68:	10bfffc4 	addi	r2,r2,-1
1000fb6c:	18801226 	beq	r3,r2,1000fbb8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
1000fb70:	e0bfff17 	ldw	r2,-4(fp)
1000fb74:	10800017 	ldw	r2,0(r2)
1000fb78:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000fb7c:	e0bffc17 	ldw	r2,-16(fp)
1000fb80:	10800090 	cmplti	r2,r2,2
1000fb84:	1000061e 	bne	r2,zero,1000fba0 <altera_avalon_jtag_uart_ioctl+0x7c>
1000fb88:	e0fffc17 	ldw	r3,-16(fp)
1000fb8c:	00a00034 	movhi	r2,32768
1000fb90:	10bfffc4 	addi	r2,r2,-1
1000fb94:	18800226 	beq	r3,r2,1000fba0 <altera_avalon_jtag_uart_ioctl+0x7c>
1000fb98:	e0bffc17 	ldw	r2,-16(fp)
1000fb9c:	00000206 	br	1000fba8 <altera_avalon_jtag_uart_ioctl+0x84>
1000fba0:	00a00034 	movhi	r2,32768
1000fba4:	10bfff84 	addi	r2,r2,-2
1000fba8:	e0fffd17 	ldw	r3,-12(fp)
1000fbac:	18800115 	stw	r2,4(r3)
      rc = 0;
1000fbb0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000fbb4:	00001106 	br	1000fbfc <altera_avalon_jtag_uart_ioctl+0xd8>
1000fbb8:	00001006 	br	1000fbfc <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000fbbc:	e0bffd17 	ldw	r2,-12(fp)
1000fbc0:	10c00117 	ldw	r3,4(r2)
1000fbc4:	00a00034 	movhi	r2,32768
1000fbc8:	10bfffc4 	addi	r2,r2,-1
1000fbcc:	18800a26 	beq	r3,r2,1000fbf8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000fbd0:	e0bffd17 	ldw	r2,-12(fp)
1000fbd4:	10c00917 	ldw	r3,36(r2)
1000fbd8:	e0bffd17 	ldw	r2,-12(fp)
1000fbdc:	10800117 	ldw	r2,4(r2)
1000fbe0:	1885803a 	cmpltu	r2,r3,r2
1000fbe4:	10c03fcc 	andi	r3,r2,255
1000fbe8:	e0bfff17 	ldw	r2,-4(fp)
1000fbec:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000fbf0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000fbf4:	00000006 	br	1000fbf8 <altera_avalon_jtag_uart_ioctl+0xd4>
1000fbf8:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000fbfc:	e0bffb17 	ldw	r2,-20(fp)
}
1000fc00:	e037883a 	mov	sp,fp
1000fc04:	df000017 	ldw	fp,0(sp)
1000fc08:	dec00104 	addi	sp,sp,4
1000fc0c:	f800283a 	ret

1000fc10 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000fc10:	defff304 	addi	sp,sp,-52
1000fc14:	dfc00c15 	stw	ra,48(sp)
1000fc18:	df000b15 	stw	fp,44(sp)
1000fc1c:	df000b04 	addi	fp,sp,44
1000fc20:	e13ffc15 	stw	r4,-16(fp)
1000fc24:	e17ffd15 	stw	r5,-12(fp)
1000fc28:	e1bffe15 	stw	r6,-8(fp)
1000fc2c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000fc30:	e0bffd17 	ldw	r2,-12(fp)
1000fc34:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000fc38:	00004906 	br	1000fd60 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000fc3c:	e0bffc17 	ldw	r2,-16(fp)
1000fc40:	10800a17 	ldw	r2,40(r2)
1000fc44:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1000fc48:	e0bffc17 	ldw	r2,-16(fp)
1000fc4c:	10800b17 	ldw	r2,44(r2)
1000fc50:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1000fc54:	e0fff717 	ldw	r3,-36(fp)
1000fc58:	e0bff817 	ldw	r2,-32(fp)
1000fc5c:	18800536 	bltu	r3,r2,1000fc74 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000fc60:	e0fff717 	ldw	r3,-36(fp)
1000fc64:	e0bff817 	ldw	r2,-32(fp)
1000fc68:	1885c83a 	sub	r2,r3,r2
1000fc6c:	e0bff615 	stw	r2,-40(fp)
1000fc70:	00000406 	br	1000fc84 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000fc74:	00c20004 	movi	r3,2048
1000fc78:	e0bff817 	ldw	r2,-32(fp)
1000fc7c:	1885c83a 	sub	r2,r3,r2
1000fc80:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000fc84:	e0bff617 	ldw	r2,-40(fp)
1000fc88:	1000011e 	bne	r2,zero,1000fc90 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
1000fc8c:	00001d06 	br	1000fd04 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
1000fc90:	e0fffe17 	ldw	r3,-8(fp)
1000fc94:	e0bff617 	ldw	r2,-40(fp)
1000fc98:	1880022e 	bgeu	r3,r2,1000fca4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
1000fc9c:	e0bffe17 	ldw	r2,-8(fp)
1000fca0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000fca4:	e0bff817 	ldw	r2,-32(fp)
1000fca8:	10800e04 	addi	r2,r2,56
1000fcac:	e0fffc17 	ldw	r3,-16(fp)
1000fcb0:	1885883a 	add	r2,r3,r2
1000fcb4:	e13ff517 	ldw	r4,-44(fp)
1000fcb8:	100b883a 	mov	r5,r2
1000fcbc:	e1bff617 	ldw	r6,-40(fp)
1000fcc0:	0007a740 	call	10007a74 <memcpy>
      ptr   += n;
1000fcc4:	e0fff517 	ldw	r3,-44(fp)
1000fcc8:	e0bff617 	ldw	r2,-40(fp)
1000fccc:	1885883a 	add	r2,r3,r2
1000fcd0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000fcd4:	e0fffe17 	ldw	r3,-8(fp)
1000fcd8:	e0bff617 	ldw	r2,-40(fp)
1000fcdc:	1885c83a 	sub	r2,r3,r2
1000fce0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fce4:	e0fff817 	ldw	r3,-32(fp)
1000fce8:	e0bff617 	ldw	r2,-40(fp)
1000fcec:	1885883a 	add	r2,r3,r2
1000fcf0:	10c1ffcc 	andi	r3,r2,2047
1000fcf4:	e0bffc17 	ldw	r2,-16(fp)
1000fcf8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000fcfc:	e0bffe17 	ldw	r2,-8(fp)
1000fd00:	00bfce16 	blt	zero,r2,1000fc3c <__alt_data_end+0xf800fc3c>

    /* If we read any data then return it */
    if (ptr != buffer)
1000fd04:	e0fff517 	ldw	r3,-44(fp)
1000fd08:	e0bffd17 	ldw	r2,-12(fp)
1000fd0c:	18800126 	beq	r3,r2,1000fd14 <altera_avalon_jtag_uart_read+0x104>
      break;
1000fd10:	00001506 	br	1000fd68 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000fd14:	e0bfff17 	ldw	r2,-4(fp)
1000fd18:	1090000c 	andi	r2,r2,16384
1000fd1c:	10000126 	beq	r2,zero,1000fd24 <altera_avalon_jtag_uart_read+0x114>
      break;
1000fd20:	00001106 	br	1000fd68 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1000fd24:	0001883a 	nop
1000fd28:	e0bffc17 	ldw	r2,-16(fp)
1000fd2c:	10c00a17 	ldw	r3,40(r2)
1000fd30:	e0bff717 	ldw	r2,-36(fp)
1000fd34:	1880051e 	bne	r3,r2,1000fd4c <altera_avalon_jtag_uart_read+0x13c>
1000fd38:	e0bffc17 	ldw	r2,-16(fp)
1000fd3c:	10c00917 	ldw	r3,36(r2)
1000fd40:	e0bffc17 	ldw	r2,-16(fp)
1000fd44:	10800117 	ldw	r2,4(r2)
1000fd48:	18bff736 	bltu	r3,r2,1000fd28 <__alt_data_end+0xf800fd28>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1000fd4c:	e0bffc17 	ldw	r2,-16(fp)
1000fd50:	10c00a17 	ldw	r3,40(r2)
1000fd54:	e0bff717 	ldw	r2,-36(fp)
1000fd58:	1880011e 	bne	r3,r2,1000fd60 <altera_avalon_jtag_uart_read+0x150>
      break;
1000fd5c:	00000206 	br	1000fd68 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000fd60:	e0bffe17 	ldw	r2,-8(fp)
1000fd64:	00bfb516 	blt	zero,r2,1000fc3c <__alt_data_end+0xf800fc3c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1000fd68:	e0fff517 	ldw	r3,-44(fp)
1000fd6c:	e0bffd17 	ldw	r2,-12(fp)
1000fd70:	18801826 	beq	r3,r2,1000fdd4 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fd74:	0005303a 	rdctl	r2,status
1000fd78:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fd7c:	e0fffa17 	ldw	r3,-24(fp)
1000fd80:	00bfff84 	movi	r2,-2
1000fd84:	1884703a 	and	r2,r3,r2
1000fd88:	1001703a 	wrctl	status,r2
  
  return context;
1000fd8c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1000fd90:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000fd94:	e0bffc17 	ldw	r2,-16(fp)
1000fd98:	10800817 	ldw	r2,32(r2)
1000fd9c:	10c00054 	ori	r3,r2,1
1000fda0:	e0bffc17 	ldw	r2,-16(fp)
1000fda4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000fda8:	e0bffc17 	ldw	r2,-16(fp)
1000fdac:	10800017 	ldw	r2,0(r2)
1000fdb0:	10800104 	addi	r2,r2,4
1000fdb4:	1007883a 	mov	r3,r2
1000fdb8:	e0bffc17 	ldw	r2,-16(fp)
1000fdbc:	10800817 	ldw	r2,32(r2)
1000fdc0:	18800035 	stwio	r2,0(r3)
1000fdc4:	e0bff917 	ldw	r2,-28(fp)
1000fdc8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000fdcc:	e0bffb17 	ldw	r2,-20(fp)
1000fdd0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000fdd4:	e0fff517 	ldw	r3,-44(fp)
1000fdd8:	e0bffd17 	ldw	r2,-12(fp)
1000fddc:	18800426 	beq	r3,r2,1000fdf0 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
1000fde0:	e0fff517 	ldw	r3,-44(fp)
1000fde4:	e0bffd17 	ldw	r2,-12(fp)
1000fde8:	1885c83a 	sub	r2,r3,r2
1000fdec:	00000606 	br	1000fe08 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
1000fdf0:	e0bfff17 	ldw	r2,-4(fp)
1000fdf4:	1090000c 	andi	r2,r2,16384
1000fdf8:	10000226 	beq	r2,zero,1000fe04 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
1000fdfc:	00bffd44 	movi	r2,-11
1000fe00:	00000106 	br	1000fe08 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
1000fe04:	00bffec4 	movi	r2,-5
}
1000fe08:	e037883a 	mov	sp,fp
1000fe0c:	dfc00117 	ldw	ra,4(sp)
1000fe10:	df000017 	ldw	fp,0(sp)
1000fe14:	dec00204 	addi	sp,sp,8
1000fe18:	f800283a 	ret

1000fe1c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000fe1c:	defff304 	addi	sp,sp,-52
1000fe20:	dfc00c15 	stw	ra,48(sp)
1000fe24:	df000b15 	stw	fp,44(sp)
1000fe28:	df000b04 	addi	fp,sp,44
1000fe2c:	e13ffc15 	stw	r4,-16(fp)
1000fe30:	e17ffd15 	stw	r5,-12(fp)
1000fe34:	e1bffe15 	stw	r6,-8(fp)
1000fe38:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000fe3c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1000fe40:	e0bffd17 	ldw	r2,-12(fp)
1000fe44:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000fe48:	00003806 	br	1000ff2c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000fe4c:	e0bffc17 	ldw	r2,-16(fp)
1000fe50:	10800c17 	ldw	r2,48(r2)
1000fe54:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
1000fe58:	e0bffc17 	ldw	r2,-16(fp)
1000fe5c:	10800d17 	ldw	r2,52(r2)
1000fe60:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1000fe64:	e0fff817 	ldw	r3,-32(fp)
1000fe68:	e0bff517 	ldw	r2,-44(fp)
1000fe6c:	1880062e 	bgeu	r3,r2,1000fe88 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1000fe70:	e0fff517 	ldw	r3,-44(fp)
1000fe74:	e0bff817 	ldw	r2,-32(fp)
1000fe78:	1885c83a 	sub	r2,r3,r2
1000fe7c:	10bfffc4 	addi	r2,r2,-1
1000fe80:	e0bff615 	stw	r2,-40(fp)
1000fe84:	00000b06 	br	1000feb4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1000fe88:	e0bff517 	ldw	r2,-44(fp)
1000fe8c:	10000526 	beq	r2,zero,1000fea4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1000fe90:	00c20004 	movi	r3,2048
1000fe94:	e0bff817 	ldw	r2,-32(fp)
1000fe98:	1885c83a 	sub	r2,r3,r2
1000fe9c:	e0bff615 	stw	r2,-40(fp)
1000fea0:	00000406 	br	1000feb4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000fea4:	00c1ffc4 	movi	r3,2047
1000fea8:	e0bff817 	ldw	r2,-32(fp)
1000feac:	1885c83a 	sub	r2,r3,r2
1000feb0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000feb4:	e0bff617 	ldw	r2,-40(fp)
1000feb8:	1000011e 	bne	r2,zero,1000fec0 <altera_avalon_jtag_uart_write+0xa4>
        break;
1000febc:	00001d06 	br	1000ff34 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
1000fec0:	e0fffe17 	ldw	r3,-8(fp)
1000fec4:	e0bff617 	ldw	r2,-40(fp)
1000fec8:	1880022e 	bgeu	r3,r2,1000fed4 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
1000fecc:	e0bffe17 	ldw	r2,-8(fp)
1000fed0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1000fed4:	e0bff817 	ldw	r2,-32(fp)
1000fed8:	10820e04 	addi	r2,r2,2104
1000fedc:	e0fffc17 	ldw	r3,-16(fp)
1000fee0:	1885883a 	add	r2,r3,r2
1000fee4:	1009883a 	mov	r4,r2
1000fee8:	e17ffd17 	ldw	r5,-12(fp)
1000feec:	e1bff617 	ldw	r6,-40(fp)
1000fef0:	0007a740 	call	10007a74 <memcpy>
      ptr   += n;
1000fef4:	e0fffd17 	ldw	r3,-12(fp)
1000fef8:	e0bff617 	ldw	r2,-40(fp)
1000fefc:	1885883a 	add	r2,r3,r2
1000ff00:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000ff04:	e0fffe17 	ldw	r3,-8(fp)
1000ff08:	e0bff617 	ldw	r2,-40(fp)
1000ff0c:	1885c83a 	sub	r2,r3,r2
1000ff10:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000ff14:	e0fff817 	ldw	r3,-32(fp)
1000ff18:	e0bff617 	ldw	r2,-40(fp)
1000ff1c:	1885883a 	add	r2,r3,r2
1000ff20:	10c1ffcc 	andi	r3,r2,2047
1000ff24:	e0bffc17 	ldw	r2,-16(fp)
1000ff28:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000ff2c:	e0bffe17 	ldw	r2,-8(fp)
1000ff30:	00bfc616 	blt	zero,r2,1000fe4c <__alt_data_end+0xf800fe4c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000ff34:	0005303a 	rdctl	r2,status
1000ff38:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000ff3c:	e0fffa17 	ldw	r3,-24(fp)
1000ff40:	00bfff84 	movi	r2,-2
1000ff44:	1884703a 	and	r2,r3,r2
1000ff48:	1001703a 	wrctl	status,r2
  
  return context;
1000ff4c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000ff50:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000ff54:	e0bffc17 	ldw	r2,-16(fp)
1000ff58:	10800817 	ldw	r2,32(r2)
1000ff5c:	10c00094 	ori	r3,r2,2
1000ff60:	e0bffc17 	ldw	r2,-16(fp)
1000ff64:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000ff68:	e0bffc17 	ldw	r2,-16(fp)
1000ff6c:	10800017 	ldw	r2,0(r2)
1000ff70:	10800104 	addi	r2,r2,4
1000ff74:	1007883a 	mov	r3,r2
1000ff78:	e0bffc17 	ldw	r2,-16(fp)
1000ff7c:	10800817 	ldw	r2,32(r2)
1000ff80:	18800035 	stwio	r2,0(r3)
1000ff84:	e0bff917 	ldw	r2,-28(fp)
1000ff88:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000ff8c:	e0bffb17 	ldw	r2,-20(fp)
1000ff90:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1000ff94:	e0bffe17 	ldw	r2,-8(fp)
1000ff98:	0080120e 	bge	zero,r2,1000ffe4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
1000ff9c:	e0bfff17 	ldw	r2,-4(fp)
1000ffa0:	1090000c 	andi	r2,r2,16384
1000ffa4:	10000126 	beq	r2,zero,1000ffac <altera_avalon_jtag_uart_write+0x190>
        break;
1000ffa8:	00001006 	br	1000ffec <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1000ffac:	0001883a 	nop
1000ffb0:	e0bffc17 	ldw	r2,-16(fp)
1000ffb4:	10c00d17 	ldw	r3,52(r2)
1000ffb8:	e0bff517 	ldw	r2,-44(fp)
1000ffbc:	1880051e 	bne	r3,r2,1000ffd4 <altera_avalon_jtag_uart_write+0x1b8>
1000ffc0:	e0bffc17 	ldw	r2,-16(fp)
1000ffc4:	10c00917 	ldw	r3,36(r2)
1000ffc8:	e0bffc17 	ldw	r2,-16(fp)
1000ffcc:	10800117 	ldw	r2,4(r2)
1000ffd0:	18bff736 	bltu	r3,r2,1000ffb0 <__alt_data_end+0xf800ffb0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1000ffd4:	e0bffc17 	ldw	r2,-16(fp)
1000ffd8:	10800917 	ldw	r2,36(r2)
1000ffdc:	10000126 	beq	r2,zero,1000ffe4 <altera_avalon_jtag_uart_write+0x1c8>
         break;
1000ffe0:	00000206 	br	1000ffec <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
1000ffe4:	e0bffe17 	ldw	r2,-8(fp)
1000ffe8:	00bf9716 	blt	zero,r2,1000fe48 <__alt_data_end+0xf800fe48>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1000ffec:	e0fffd17 	ldw	r3,-12(fp)
1000fff0:	e0bff717 	ldw	r2,-36(fp)
1000fff4:	18800426 	beq	r3,r2,10010008 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
1000fff8:	e0fffd17 	ldw	r3,-12(fp)
1000fffc:	e0bff717 	ldw	r2,-36(fp)
10010000:	1885c83a 	sub	r2,r3,r2
10010004:	00000606 	br	10010020 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
10010008:	e0bfff17 	ldw	r2,-4(fp)
1001000c:	1090000c 	andi	r2,r2,16384
10010010:	10000226 	beq	r2,zero,1001001c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
10010014:	00bffd44 	movi	r2,-11
10010018:	00000106 	br	10010020 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1001001c:	00bffec4 	movi	r2,-5
}
10010020:	e037883a 	mov	sp,fp
10010024:	dfc00117 	ldw	ra,4(sp)
10010028:	df000017 	ldw	fp,0(sp)
1001002c:	dec00204 	addi	sp,sp,8
10010030:	f800283a 	ret

10010034 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10010034:	defff504 	addi	sp,sp,-44
10010038:	df000a15 	stw	fp,40(sp)
1001003c:	df000a04 	addi	fp,sp,40
10010040:	e13ffc15 	stw	r4,-16(fp)
10010044:	e17ffd15 	stw	r5,-12(fp)
10010048:	e1bffe15 	stw	r6,-8(fp)
1001004c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10010050:	e03ff615 	stw	zero,-40(fp)
10010054:	00840074 	movhi	r2,4097
10010058:	1094f504 	addi	r2,r2,21460
1001005c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
10010060:	10003f26 	beq	r2,zero,10010160 <alt_alarm_start+0x12c>
  {
    if (alarm)
10010064:	e0bffc17 	ldw	r2,-16(fp)
10010068:	10003b26 	beq	r2,zero,10010158 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
1001006c:	e0bffc17 	ldw	r2,-16(fp)
10010070:	e0fffe17 	ldw	r3,-8(fp)
10010074:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10010078:	e0bffc17 	ldw	r2,-16(fp)
1001007c:	e0ffff17 	ldw	r3,-4(fp)
10010080:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010084:	0005303a 	rdctl	r2,status
10010088:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001008c:	e0fff817 	ldw	r3,-32(fp)
10010090:	00bfff84 	movi	r2,-2
10010094:	1884703a 	and	r2,r3,r2
10010098:	1001703a 	wrctl	status,r2
  
  return context;
1001009c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
100100a0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
100100a4:	00840074 	movhi	r2,4097
100100a8:	1094f604 	addi	r2,r2,21464
100100ac:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
100100b0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
100100b4:	e0fffd17 	ldw	r3,-12(fp)
100100b8:	e0bff617 	ldw	r2,-40(fp)
100100bc:	1885883a 	add	r2,r3,r2
100100c0:	10c00044 	addi	r3,r2,1
100100c4:	e0bffc17 	ldw	r2,-16(fp)
100100c8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
100100cc:	e0bffc17 	ldw	r2,-16(fp)
100100d0:	10c00217 	ldw	r3,8(r2)
100100d4:	e0bff617 	ldw	r2,-40(fp)
100100d8:	1880042e 	bgeu	r3,r2,100100ec <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
100100dc:	e0bffc17 	ldw	r2,-16(fp)
100100e0:	00c00044 	movi	r3,1
100100e4:	10c00405 	stb	r3,16(r2)
100100e8:	00000206 	br	100100f4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
100100ec:	e0bffc17 	ldw	r2,-16(fp)
100100f0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
100100f4:	e0fffc17 	ldw	r3,-16(fp)
100100f8:	00840074 	movhi	r2,4097
100100fc:	108e2c04 	addi	r2,r2,14512
10010100:	e0bff915 	stw	r2,-28(fp)
10010104:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10010108:	e0bffa17 	ldw	r2,-24(fp)
1001010c:	e0fff917 	ldw	r3,-28(fp)
10010110:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10010114:	e0bff917 	ldw	r2,-28(fp)
10010118:	10c00017 	ldw	r3,0(r2)
1001011c:	e0bffa17 	ldw	r2,-24(fp)
10010120:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10010124:	e0bff917 	ldw	r2,-28(fp)
10010128:	10800017 	ldw	r2,0(r2)
1001012c:	e0fffa17 	ldw	r3,-24(fp)
10010130:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10010134:	e0bff917 	ldw	r2,-28(fp)
10010138:	e0fffa17 	ldw	r3,-24(fp)
1001013c:	10c00015 	stw	r3,0(r2)
10010140:	e0bff717 	ldw	r2,-36(fp)
10010144:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010148:	e0bffb17 	ldw	r2,-20(fp)
1001014c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10010150:	0005883a 	mov	r2,zero
10010154:	00000306 	br	10010164 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
10010158:	00bffa84 	movi	r2,-22
1001015c:	00000106 	br	10010164 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
10010160:	00bfde84 	movi	r2,-134
  }
}
10010164:	e037883a 	mov	sp,fp
10010168:	df000017 	ldw	fp,0(sp)
1001016c:	dec00104 	addi	sp,sp,4
10010170:	f800283a 	ret

10010174 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10010174:	defffa04 	addi	sp,sp,-24
10010178:	dfc00515 	stw	ra,20(sp)
1001017c:	df000415 	stw	fp,16(sp)
10010180:	df000404 	addi	fp,sp,16
10010184:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
10010188:	00800244 	movi	r2,9
1001018c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10010190:	e13ffd17 	ldw	r4,-12(fp)
10010194:	014003f4 	movhi	r5,15
10010198:	29509004 	addi	r5,r5,16960
1001019c:	000c2ec0 	call	1000c2ec <__mulsi3>
100101a0:	0100bef4 	movhi	r4,763
100101a4:	213c2004 	addi	r4,r4,-3968
100101a8:	100b883a 	mov	r5,r2
100101ac:	000c2dc0 	call	1000c2dc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
100101b0:	01200034 	movhi	r4,32768
100101b4:	213fffc4 	addi	r4,r4,-1
100101b8:	100b883a 	mov	r5,r2
100101bc:	000c2dc0 	call	1000c2dc <__udivsi3>
100101c0:	e13fff17 	ldw	r4,-4(fp)
100101c4:	100b883a 	mov	r5,r2
100101c8:	000c2dc0 	call	1000c2dc <__udivsi3>
100101cc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
100101d0:	e0bffe17 	ldw	r2,-8(fp)
100101d4:	10002a26 	beq	r2,zero,10010280 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
100101d8:	e03ffc15 	stw	zero,-16(fp)
100101dc:	00001706 	br	1001023c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
100101e0:	00a00034 	movhi	r2,32768
100101e4:	10bfffc4 	addi	r2,r2,-1
100101e8:	10bfffc4 	addi	r2,r2,-1
100101ec:	103ffe1e 	bne	r2,zero,100101e8 <__alt_data_end+0xf80101e8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
100101f0:	e13ffd17 	ldw	r4,-12(fp)
100101f4:	014003f4 	movhi	r5,15
100101f8:	29509004 	addi	r5,r5,16960
100101fc:	000c2ec0 	call	1000c2ec <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10010200:	0100bef4 	movhi	r4,763
10010204:	213c2004 	addi	r4,r4,-3968
10010208:	100b883a 	mov	r5,r2
1001020c:	000c2dc0 	call	1000c2dc <__udivsi3>
10010210:	01200034 	movhi	r4,32768
10010214:	213fffc4 	addi	r4,r4,-1
10010218:	100b883a 	mov	r5,r2
1001021c:	000c2dc0 	call	1000c2dc <__udivsi3>
10010220:	1007883a 	mov	r3,r2
10010224:	e0bfff17 	ldw	r2,-4(fp)
10010228:	10c5c83a 	sub	r2,r2,r3
1001022c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10010230:	e0bffc17 	ldw	r2,-16(fp)
10010234:	10800044 	addi	r2,r2,1
10010238:	e0bffc15 	stw	r2,-16(fp)
1001023c:	e0fffc17 	ldw	r3,-16(fp)
10010240:	e0bffe17 	ldw	r2,-8(fp)
10010244:	18bfe616 	blt	r3,r2,100101e0 <__alt_data_end+0xf80101e0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10010248:	e13ffd17 	ldw	r4,-12(fp)
1001024c:	014003f4 	movhi	r5,15
10010250:	29509004 	addi	r5,r5,16960
10010254:	000c2ec0 	call	1000c2ec <__mulsi3>
10010258:	0100bef4 	movhi	r4,763
1001025c:	213c2004 	addi	r4,r4,-3968
10010260:	100b883a 	mov	r5,r2
10010264:	000c2dc0 	call	1000c2dc <__udivsi3>
10010268:	1009883a 	mov	r4,r2
1001026c:	e17fff17 	ldw	r5,-4(fp)
10010270:	000c2ec0 	call	1000c2ec <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10010274:	10bfffc4 	addi	r2,r2,-1
10010278:	103ffe1e 	bne	r2,zero,10010274 <__alt_data_end+0xf8010274>
1001027c:	00000d06 	br	100102b4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10010280:	e13ffd17 	ldw	r4,-12(fp)
10010284:	014003f4 	movhi	r5,15
10010288:	29509004 	addi	r5,r5,16960
1001028c:	000c2ec0 	call	1000c2ec <__mulsi3>
10010290:	0100bef4 	movhi	r4,763
10010294:	213c2004 	addi	r4,r4,-3968
10010298:	100b883a 	mov	r5,r2
1001029c:	000c2dc0 	call	1000c2dc <__udivsi3>
100102a0:	1009883a 	mov	r4,r2
100102a4:	e17fff17 	ldw	r5,-4(fp)
100102a8:	000c2ec0 	call	1000c2ec <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
100102ac:	10bfffc4 	addi	r2,r2,-1
100102b0:	00bffe16 	blt	zero,r2,100102ac <__alt_data_end+0xf80102ac>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
100102b4:	0005883a 	mov	r2,zero
}
100102b8:	e037883a 	mov	sp,fp
100102bc:	dfc00117 	ldw	ra,4(sp)
100102c0:	df000017 	ldw	fp,0(sp)
100102c4:	dec00204 	addi	sp,sp,8
100102c8:	f800283a 	ret

100102cc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100102cc:	deffff04 	addi	sp,sp,-4
100102d0:	df000015 	stw	fp,0(sp)
100102d4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100102d8:	e037883a 	mov	sp,fp
100102dc:	df000017 	ldw	fp,0(sp)
100102e0:	dec00104 	addi	sp,sp,4
100102e4:	f800283a 	ret

100102e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100102e8:	defffe04 	addi	sp,sp,-8
100102ec:	dfc00115 	stw	ra,4(sp)
100102f0:	df000015 	stw	fp,0(sp)
100102f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100102f8:	00840074 	movhi	r2,4097
100102fc:	108e2904 	addi	r2,r2,14500
10010300:	10800017 	ldw	r2,0(r2)
10010304:	10000526 	beq	r2,zero,1001031c <alt_get_errno+0x34>
10010308:	00840074 	movhi	r2,4097
1001030c:	108e2904 	addi	r2,r2,14500
10010310:	10800017 	ldw	r2,0(r2)
10010314:	103ee83a 	callr	r2
10010318:	00000206 	br	10010324 <alt_get_errno+0x3c>
1001031c:	00840074 	movhi	r2,4097
10010320:	1094f004 	addi	r2,r2,21440
}
10010324:	e037883a 	mov	sp,fp
10010328:	dfc00117 	ldw	ra,4(sp)
1001032c:	df000017 	ldw	fp,0(sp)
10010330:	dec00204 	addi	sp,sp,8
10010334:	f800283a 	ret

10010338 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10010338:	defffa04 	addi	sp,sp,-24
1001033c:	dfc00515 	stw	ra,20(sp)
10010340:	df000415 	stw	fp,16(sp)
10010344:	df000404 	addi	fp,sp,16
10010348:	e13ffe15 	stw	r4,-8(fp)
1001034c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10010350:	e0bffe17 	ldw	r2,-8(fp)
10010354:	10000326 	beq	r2,zero,10010364 <alt_dev_llist_insert+0x2c>
10010358:	e0bffe17 	ldw	r2,-8(fp)
1001035c:	10800217 	ldw	r2,8(r2)
10010360:	1000061e 	bne	r2,zero,1001037c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10010364:	00102e80 	call	100102e8 <alt_get_errno>
10010368:	1007883a 	mov	r3,r2
1001036c:	00800584 	movi	r2,22
10010370:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10010374:	00bffa84 	movi	r2,-22
10010378:	00001306 	br	100103c8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1001037c:	e0bffe17 	ldw	r2,-8(fp)
10010380:	e0ffff17 	ldw	r3,-4(fp)
10010384:	e0fffc15 	stw	r3,-16(fp)
10010388:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1001038c:	e0bffd17 	ldw	r2,-12(fp)
10010390:	e0fffc17 	ldw	r3,-16(fp)
10010394:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10010398:	e0bffc17 	ldw	r2,-16(fp)
1001039c:	10c00017 	ldw	r3,0(r2)
100103a0:	e0bffd17 	ldw	r2,-12(fp)
100103a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100103a8:	e0bffc17 	ldw	r2,-16(fp)
100103ac:	10800017 	ldw	r2,0(r2)
100103b0:	e0fffd17 	ldw	r3,-12(fp)
100103b4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100103b8:	e0bffc17 	ldw	r2,-16(fp)
100103bc:	e0fffd17 	ldw	r3,-12(fp)
100103c0:	10c00015 	stw	r3,0(r2)

  return 0;  
100103c4:	0005883a 	mov	r2,zero
}
100103c8:	e037883a 	mov	sp,fp
100103cc:	dfc00117 	ldw	ra,4(sp)
100103d0:	df000017 	ldw	fp,0(sp)
100103d4:	dec00204 	addi	sp,sp,8
100103d8:	f800283a 	ret

100103dc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
100103dc:	defffd04 	addi	sp,sp,-12
100103e0:	dfc00215 	stw	ra,8(sp)
100103e4:	df000115 	stw	fp,4(sp)
100103e8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
100103ec:	00840074 	movhi	r2,4097
100103f0:	1084d404 	addi	r2,r2,4944
100103f4:	e0bfff15 	stw	r2,-4(fp)
100103f8:	00000606 	br	10010414 <_do_ctors+0x38>
        (*ctor) (); 
100103fc:	e0bfff17 	ldw	r2,-4(fp)
10010400:	10800017 	ldw	r2,0(r2)
10010404:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10010408:	e0bfff17 	ldw	r2,-4(fp)
1001040c:	10bfff04 	addi	r2,r2,-4
10010410:	e0bfff15 	stw	r2,-4(fp)
10010414:	e0ffff17 	ldw	r3,-4(fp)
10010418:	00840074 	movhi	r2,4097
1001041c:	1084d504 	addi	r2,r2,4948
10010420:	18bff62e 	bgeu	r3,r2,100103fc <__alt_data_end+0xf80103fc>
        (*ctor) (); 
}
10010424:	e037883a 	mov	sp,fp
10010428:	dfc00117 	ldw	ra,4(sp)
1001042c:	df000017 	ldw	fp,0(sp)
10010430:	dec00204 	addi	sp,sp,8
10010434:	f800283a 	ret

10010438 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10010438:	defffd04 	addi	sp,sp,-12
1001043c:	dfc00215 	stw	ra,8(sp)
10010440:	df000115 	stw	fp,4(sp)
10010444:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010448:	00840074 	movhi	r2,4097
1001044c:	1084d404 	addi	r2,r2,4944
10010450:	e0bfff15 	stw	r2,-4(fp)
10010454:	00000606 	br	10010470 <_do_dtors+0x38>
        (*dtor) (); 
10010458:	e0bfff17 	ldw	r2,-4(fp)
1001045c:	10800017 	ldw	r2,0(r2)
10010460:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10010464:	e0bfff17 	ldw	r2,-4(fp)
10010468:	10bfff04 	addi	r2,r2,-4
1001046c:	e0bfff15 	stw	r2,-4(fp)
10010470:	e0ffff17 	ldw	r3,-4(fp)
10010474:	00840074 	movhi	r2,4097
10010478:	1084d504 	addi	r2,r2,4948
1001047c:	18bff62e 	bgeu	r3,r2,10010458 <__alt_data_end+0xf8010458>
        (*dtor) (); 
}
10010480:	e037883a 	mov	sp,fp
10010484:	dfc00117 	ldw	ra,4(sp)
10010488:	df000017 	ldw	fp,0(sp)
1001048c:	dec00204 	addi	sp,sp,8
10010490:	f800283a 	ret

10010494 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10010494:	deffff04 	addi	sp,sp,-4
10010498:	df000015 	stw	fp,0(sp)
1001049c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
100104a0:	e037883a 	mov	sp,fp
100104a4:	df000017 	ldw	fp,0(sp)
100104a8:	dec00104 	addi	sp,sp,4
100104ac:	f800283a 	ret

100104b0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100104b0:	defff904 	addi	sp,sp,-28
100104b4:	dfc00615 	stw	ra,24(sp)
100104b8:	df000515 	stw	fp,20(sp)
100104bc:	df000504 	addi	fp,sp,20
100104c0:	e13ffc15 	stw	r4,-16(fp)
100104c4:	e17ffd15 	stw	r5,-12(fp)
100104c8:	e1bffe15 	stw	r6,-8(fp)
100104cc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
100104d0:	e0800217 	ldw	r2,8(fp)
100104d4:	d8800015 	stw	r2,0(sp)
100104d8:	e13ffc17 	ldw	r4,-16(fp)
100104dc:	e17ffd17 	ldw	r5,-12(fp)
100104e0:	e1bffe17 	ldw	r6,-8(fp)
100104e4:	e1ffff17 	ldw	r7,-4(fp)
100104e8:	00106900 	call	10010690 <alt_iic_isr_register>
}  
100104ec:	e037883a 	mov	sp,fp
100104f0:	dfc00117 	ldw	ra,4(sp)
100104f4:	df000017 	ldw	fp,0(sp)
100104f8:	dec00204 	addi	sp,sp,8
100104fc:	f800283a 	ret

10010500 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10010500:	defff904 	addi	sp,sp,-28
10010504:	df000615 	stw	fp,24(sp)
10010508:	df000604 	addi	fp,sp,24
1001050c:	e13ffe15 	stw	r4,-8(fp)
10010510:	e17fff15 	stw	r5,-4(fp)
10010514:	e0bfff17 	ldw	r2,-4(fp)
10010518:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001051c:	0005303a 	rdctl	r2,status
10010520:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010524:	e0fffb17 	ldw	r3,-20(fp)
10010528:	00bfff84 	movi	r2,-2
1001052c:	1884703a 	and	r2,r3,r2
10010530:	1001703a 	wrctl	status,r2
  
  return context;
10010534:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10010538:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1001053c:	e0bffa17 	ldw	r2,-24(fp)
10010540:	00c00044 	movi	r3,1
10010544:	1884983a 	sll	r2,r3,r2
10010548:	1007883a 	mov	r3,r2
1001054c:	00840074 	movhi	r2,4097
10010550:	1094f404 	addi	r2,r2,21456
10010554:	10800017 	ldw	r2,0(r2)
10010558:	1886b03a 	or	r3,r3,r2
1001055c:	00840074 	movhi	r2,4097
10010560:	1094f404 	addi	r2,r2,21456
10010564:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010568:	00840074 	movhi	r2,4097
1001056c:	1094f404 	addi	r2,r2,21456
10010570:	10800017 	ldw	r2,0(r2)
10010574:	100170fa 	wrctl	ienable,r2
10010578:	e0bffc17 	ldw	r2,-16(fp)
1001057c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010580:	e0bffd17 	ldw	r2,-12(fp)
10010584:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010588:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1001058c:	0001883a 	nop
}
10010590:	e037883a 	mov	sp,fp
10010594:	df000017 	ldw	fp,0(sp)
10010598:	dec00104 	addi	sp,sp,4
1001059c:	f800283a 	ret

100105a0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
100105a0:	defff904 	addi	sp,sp,-28
100105a4:	df000615 	stw	fp,24(sp)
100105a8:	df000604 	addi	fp,sp,24
100105ac:	e13ffe15 	stw	r4,-8(fp)
100105b0:	e17fff15 	stw	r5,-4(fp)
100105b4:	e0bfff17 	ldw	r2,-4(fp)
100105b8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100105bc:	0005303a 	rdctl	r2,status
100105c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100105c4:	e0fffb17 	ldw	r3,-20(fp)
100105c8:	00bfff84 	movi	r2,-2
100105cc:	1884703a 	and	r2,r3,r2
100105d0:	1001703a 	wrctl	status,r2
  
  return context;
100105d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100105d8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
100105dc:	e0bffa17 	ldw	r2,-24(fp)
100105e0:	00c00044 	movi	r3,1
100105e4:	1884983a 	sll	r2,r3,r2
100105e8:	0084303a 	nor	r2,zero,r2
100105ec:	1007883a 	mov	r3,r2
100105f0:	00840074 	movhi	r2,4097
100105f4:	1094f404 	addi	r2,r2,21456
100105f8:	10800017 	ldw	r2,0(r2)
100105fc:	1886703a 	and	r3,r3,r2
10010600:	00840074 	movhi	r2,4097
10010604:	1094f404 	addi	r2,r2,21456
10010608:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1001060c:	00840074 	movhi	r2,4097
10010610:	1094f404 	addi	r2,r2,21456
10010614:	10800017 	ldw	r2,0(r2)
10010618:	100170fa 	wrctl	ienable,r2
1001061c:	e0bffc17 	ldw	r2,-16(fp)
10010620:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010624:	e0bffd17 	ldw	r2,-12(fp)
10010628:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1001062c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10010630:	0001883a 	nop
}
10010634:	e037883a 	mov	sp,fp
10010638:	df000017 	ldw	fp,0(sp)
1001063c:	dec00104 	addi	sp,sp,4
10010640:	f800283a 	ret

10010644 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10010644:	defffc04 	addi	sp,sp,-16
10010648:	df000315 	stw	fp,12(sp)
1001064c:	df000304 	addi	fp,sp,12
10010650:	e13ffe15 	stw	r4,-8(fp)
10010654:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10010658:	000530fa 	rdctl	r2,ienable
1001065c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10010660:	e0bfff17 	ldw	r2,-4(fp)
10010664:	00c00044 	movi	r3,1
10010668:	1884983a 	sll	r2,r3,r2
1001066c:	1007883a 	mov	r3,r2
10010670:	e0bffd17 	ldw	r2,-12(fp)
10010674:	1884703a 	and	r2,r3,r2
10010678:	1004c03a 	cmpne	r2,r2,zero
1001067c:	10803fcc 	andi	r2,r2,255
}
10010680:	e037883a 	mov	sp,fp
10010684:	df000017 	ldw	fp,0(sp)
10010688:	dec00104 	addi	sp,sp,4
1001068c:	f800283a 	ret

10010690 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10010690:	defff504 	addi	sp,sp,-44
10010694:	dfc00a15 	stw	ra,40(sp)
10010698:	df000915 	stw	fp,36(sp)
1001069c:	df000904 	addi	fp,sp,36
100106a0:	e13ffc15 	stw	r4,-16(fp)
100106a4:	e17ffd15 	stw	r5,-12(fp)
100106a8:	e1bffe15 	stw	r6,-8(fp)
100106ac:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
100106b0:	00bffa84 	movi	r2,-22
100106b4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
100106b8:	e0bffd17 	ldw	r2,-12(fp)
100106bc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
100106c0:	e0bff817 	ldw	r2,-32(fp)
100106c4:	10800808 	cmpgei	r2,r2,32
100106c8:	1000271e 	bne	r2,zero,10010768 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100106cc:	0005303a 	rdctl	r2,status
100106d0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100106d4:	e0fffa17 	ldw	r3,-24(fp)
100106d8:	00bfff84 	movi	r2,-2
100106dc:	1884703a 	and	r2,r3,r2
100106e0:	1001703a 	wrctl	status,r2
  
  return context;
100106e4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
100106e8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
100106ec:	00840074 	movhi	r2,4097
100106f0:	10950104 	addi	r2,r2,21508
100106f4:	e0fff817 	ldw	r3,-32(fp)
100106f8:	180690fa 	slli	r3,r3,3
100106fc:	10c5883a 	add	r2,r2,r3
10010700:	e0fffe17 	ldw	r3,-8(fp)
10010704:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10010708:	00840074 	movhi	r2,4097
1001070c:	10950104 	addi	r2,r2,21508
10010710:	e0fff817 	ldw	r3,-32(fp)
10010714:	180690fa 	slli	r3,r3,3
10010718:	10c5883a 	add	r2,r2,r3
1001071c:	10800104 	addi	r2,r2,4
10010720:	e0ffff17 	ldw	r3,-4(fp)
10010724:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10010728:	e0bffe17 	ldw	r2,-8(fp)
1001072c:	10000526 	beq	r2,zero,10010744 <alt_iic_isr_register+0xb4>
10010730:	e0bff817 	ldw	r2,-32(fp)
10010734:	e13ffc17 	ldw	r4,-16(fp)
10010738:	100b883a 	mov	r5,r2
1001073c:	00105000 	call	10010500 <alt_ic_irq_enable>
10010740:	00000406 	br	10010754 <alt_iic_isr_register+0xc4>
10010744:	e0bff817 	ldw	r2,-32(fp)
10010748:	e13ffc17 	ldw	r4,-16(fp)
1001074c:	100b883a 	mov	r5,r2
10010750:	00105a00 	call	100105a0 <alt_ic_irq_disable>
10010754:	e0bff715 	stw	r2,-36(fp)
10010758:	e0bff917 	ldw	r2,-28(fp)
1001075c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010760:	e0bffb17 	ldw	r2,-20(fp)
10010764:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10010768:	e0bff717 	ldw	r2,-36(fp)
}
1001076c:	e037883a 	mov	sp,fp
10010770:	dfc00117 	ldw	ra,4(sp)
10010774:	df000017 	ldw	fp,0(sp)
10010778:	dec00204 	addi	sp,sp,8
1001077c:	f800283a 	ret

10010780 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10010780:	defff804 	addi	sp,sp,-32
10010784:	dfc00715 	stw	ra,28(sp)
10010788:	df000615 	stw	fp,24(sp)
1001078c:	dc000515 	stw	r16,20(sp)
10010790:	df000604 	addi	fp,sp,24
10010794:	e13ffb15 	stw	r4,-20(fp)
10010798:	e17ffc15 	stw	r5,-16(fp)
1001079c:	e1bffd15 	stw	r6,-12(fp)
100107a0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
100107a4:	e13ffc17 	ldw	r4,-16(fp)
100107a8:	e17ffd17 	ldw	r5,-12(fp)
100107ac:	e1bffe17 	ldw	r6,-8(fp)
100107b0:	0010a1c0 	call	10010a1c <open>
100107b4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
100107b8:	e0bffa17 	ldw	r2,-24(fp)
100107bc:	10002216 	blt	r2,zero,10010848 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
100107c0:	04040074 	movhi	r16,4097
100107c4:	8409a604 	addi	r16,r16,9880
100107c8:	e0bffa17 	ldw	r2,-24(fp)
100107cc:	1009883a 	mov	r4,r2
100107d0:	01400304 	movi	r5,12
100107d4:	000c2ec0 	call	1000c2ec <__mulsi3>
100107d8:	8085883a 	add	r2,r16,r2
100107dc:	10c00017 	ldw	r3,0(r2)
100107e0:	e0bffb17 	ldw	r2,-20(fp)
100107e4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
100107e8:	04040074 	movhi	r16,4097
100107ec:	8409a604 	addi	r16,r16,9880
100107f0:	e0bffa17 	ldw	r2,-24(fp)
100107f4:	1009883a 	mov	r4,r2
100107f8:	01400304 	movi	r5,12
100107fc:	000c2ec0 	call	1000c2ec <__mulsi3>
10010800:	8085883a 	add	r2,r16,r2
10010804:	10800104 	addi	r2,r2,4
10010808:	10c00017 	ldw	r3,0(r2)
1001080c:	e0bffb17 	ldw	r2,-20(fp)
10010810:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10010814:	04040074 	movhi	r16,4097
10010818:	8409a604 	addi	r16,r16,9880
1001081c:	e0bffa17 	ldw	r2,-24(fp)
10010820:	1009883a 	mov	r4,r2
10010824:	01400304 	movi	r5,12
10010828:	000c2ec0 	call	1000c2ec <__mulsi3>
1001082c:	8085883a 	add	r2,r16,r2
10010830:	10800204 	addi	r2,r2,8
10010834:	10c00017 	ldw	r3,0(r2)
10010838:	e0bffb17 	ldw	r2,-20(fp)
1001083c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10010840:	e13ffa17 	ldw	r4,-24(fp)
10010844:	000f2840 	call	1000f284 <alt_release_fd>
  }
} 
10010848:	e6ffff04 	addi	sp,fp,-4
1001084c:	dfc00217 	ldw	ra,8(sp)
10010850:	df000117 	ldw	fp,4(sp)
10010854:	dc000017 	ldw	r16,0(sp)
10010858:	dec00304 	addi	sp,sp,12
1001085c:	f800283a 	ret

10010860 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10010860:	defffb04 	addi	sp,sp,-20
10010864:	dfc00415 	stw	ra,16(sp)
10010868:	df000315 	stw	fp,12(sp)
1001086c:	df000304 	addi	fp,sp,12
10010870:	e13ffd15 	stw	r4,-12(fp)
10010874:	e17ffe15 	stw	r5,-8(fp)
10010878:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1001087c:	01040074 	movhi	r4,4097
10010880:	2109a904 	addi	r4,r4,9892
10010884:	e17ffd17 	ldw	r5,-12(fp)
10010888:	01800044 	movi	r6,1
1001088c:	01c07fc4 	movi	r7,511
10010890:	00107800 	call	10010780 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10010894:	01040074 	movhi	r4,4097
10010898:	2109a604 	addi	r4,r4,9880
1001089c:	e17ffe17 	ldw	r5,-8(fp)
100108a0:	000d883a 	mov	r6,zero
100108a4:	01c07fc4 	movi	r7,511
100108a8:	00107800 	call	10010780 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
100108ac:	01040074 	movhi	r4,4097
100108b0:	2109ac04 	addi	r4,r4,9904
100108b4:	e17fff17 	ldw	r5,-4(fp)
100108b8:	01800044 	movi	r6,1
100108bc:	01c07fc4 	movi	r7,511
100108c0:	00107800 	call	10010780 <alt_open_fd>
}  
100108c4:	e037883a 	mov	sp,fp
100108c8:	dfc00117 	ldw	ra,4(sp)
100108cc:	df000017 	ldw	fp,0(sp)
100108d0:	dec00204 	addi	sp,sp,8
100108d4:	f800283a 	ret

100108d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100108d8:	defffe04 	addi	sp,sp,-8
100108dc:	dfc00115 	stw	ra,4(sp)
100108e0:	df000015 	stw	fp,0(sp)
100108e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100108e8:	00840074 	movhi	r2,4097
100108ec:	108e2904 	addi	r2,r2,14500
100108f0:	10800017 	ldw	r2,0(r2)
100108f4:	10000526 	beq	r2,zero,1001090c <alt_get_errno+0x34>
100108f8:	00840074 	movhi	r2,4097
100108fc:	108e2904 	addi	r2,r2,14500
10010900:	10800017 	ldw	r2,0(r2)
10010904:	103ee83a 	callr	r2
10010908:	00000206 	br	10010914 <alt_get_errno+0x3c>
1001090c:	00840074 	movhi	r2,4097
10010910:	1094f004 	addi	r2,r2,21440
}
10010914:	e037883a 	mov	sp,fp
10010918:	dfc00117 	ldw	ra,4(sp)
1001091c:	df000017 	ldw	fp,0(sp)
10010920:	dec00204 	addi	sp,sp,8
10010924:	f800283a 	ret

10010928 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10010928:	defffb04 	addi	sp,sp,-20
1001092c:	dfc00415 	stw	ra,16(sp)
10010930:	df000315 	stw	fp,12(sp)
10010934:	dc000215 	stw	r16,8(sp)
10010938:	df000304 	addi	fp,sp,12
1001093c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10010940:	e0bffe17 	ldw	r2,-8(fp)
10010944:	10800217 	ldw	r2,8(r2)
10010948:	10d00034 	orhi	r3,r2,16384
1001094c:	e0bffe17 	ldw	r2,-8(fp)
10010950:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10010954:	e03ffd15 	stw	zero,-12(fp)
10010958:	00002306 	br	100109e8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1001095c:	04040074 	movhi	r16,4097
10010960:	8409a604 	addi	r16,r16,9880
10010964:	e0bffd17 	ldw	r2,-12(fp)
10010968:	1009883a 	mov	r4,r2
1001096c:	01400304 	movi	r5,12
10010970:	000c2ec0 	call	1000c2ec <__mulsi3>
10010974:	8085883a 	add	r2,r16,r2
10010978:	10c00017 	ldw	r3,0(r2)
1001097c:	e0bffe17 	ldw	r2,-8(fp)
10010980:	10800017 	ldw	r2,0(r2)
10010984:	1880151e 	bne	r3,r2,100109dc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10010988:	04040074 	movhi	r16,4097
1001098c:	8409a604 	addi	r16,r16,9880
10010990:	e0bffd17 	ldw	r2,-12(fp)
10010994:	1009883a 	mov	r4,r2
10010998:	01400304 	movi	r5,12
1001099c:	000c2ec0 	call	1000c2ec <__mulsi3>
100109a0:	8085883a 	add	r2,r16,r2
100109a4:	10800204 	addi	r2,r2,8
100109a8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100109ac:	10000b0e 	bge	r2,zero,100109dc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
100109b0:	e13ffd17 	ldw	r4,-12(fp)
100109b4:	01400304 	movi	r5,12
100109b8:	000c2ec0 	call	1000c2ec <__mulsi3>
100109bc:	1007883a 	mov	r3,r2
100109c0:	00840074 	movhi	r2,4097
100109c4:	1089a604 	addi	r2,r2,9880
100109c8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100109cc:	e0bffe17 	ldw	r2,-8(fp)
100109d0:	18800226 	beq	r3,r2,100109dc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
100109d4:	00bffcc4 	movi	r2,-13
100109d8:	00000a06 	br	10010a04 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100109dc:	e0bffd17 	ldw	r2,-12(fp)
100109e0:	10800044 	addi	r2,r2,1
100109e4:	e0bffd15 	stw	r2,-12(fp)
100109e8:	00840074 	movhi	r2,4097
100109ec:	108e2804 	addi	r2,r2,14496
100109f0:	10800017 	ldw	r2,0(r2)
100109f4:	1007883a 	mov	r3,r2
100109f8:	e0bffd17 	ldw	r2,-12(fp)
100109fc:	18bfd72e 	bgeu	r3,r2,1001095c <__alt_data_end+0xf801095c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10010a00:	0005883a 	mov	r2,zero
}
10010a04:	e6ffff04 	addi	sp,fp,-4
10010a08:	dfc00217 	ldw	ra,8(sp)
10010a0c:	df000117 	ldw	fp,4(sp)
10010a10:	dc000017 	ldw	r16,0(sp)
10010a14:	dec00304 	addi	sp,sp,12
10010a18:	f800283a 	ret

10010a1c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10010a1c:	defff604 	addi	sp,sp,-40
10010a20:	dfc00915 	stw	ra,36(sp)
10010a24:	df000815 	stw	fp,32(sp)
10010a28:	df000804 	addi	fp,sp,32
10010a2c:	e13ffd15 	stw	r4,-12(fp)
10010a30:	e17ffe15 	stw	r5,-8(fp)
10010a34:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10010a38:	00bfffc4 	movi	r2,-1
10010a3c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10010a40:	00bffb44 	movi	r2,-19
10010a44:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10010a48:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10010a4c:	e13ffd17 	ldw	r4,-12(fp)
10010a50:	01440074 	movhi	r5,4097
10010a54:	294e2604 	addi	r5,r5,14488
10010a58:	0010d380 	call	10010d38 <alt_find_dev>
10010a5c:	e0bff815 	stw	r2,-32(fp)
10010a60:	e0bff817 	ldw	r2,-32(fp)
10010a64:	1000051e 	bne	r2,zero,10010a7c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10010a68:	e13ffd17 	ldw	r4,-12(fp)
10010a6c:	0010dc80 	call	10010dc8 <alt_find_file>
10010a70:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10010a74:	00800044 	movi	r2,1
10010a78:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10010a7c:	e0bff817 	ldw	r2,-32(fp)
10010a80:	10002b26 	beq	r2,zero,10010b30 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10010a84:	e13ff817 	ldw	r4,-32(fp)
10010a88:	0010edc0 	call	10010edc <alt_get_fd>
10010a8c:	e0bff915 	stw	r2,-28(fp)
10010a90:	e0bff917 	ldw	r2,-28(fp)
10010a94:	1000030e 	bge	r2,zero,10010aa4 <open+0x88>
    {
      status = index;
10010a98:	e0bff917 	ldw	r2,-28(fp)
10010a9c:	e0bffa15 	stw	r2,-24(fp)
10010aa0:	00002506 	br	10010b38 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10010aa4:	e13ff917 	ldw	r4,-28(fp)
10010aa8:	01400304 	movi	r5,12
10010aac:	000c2ec0 	call	1000c2ec <__mulsi3>
10010ab0:	1007883a 	mov	r3,r2
10010ab4:	00840074 	movhi	r2,4097
10010ab8:	1089a604 	addi	r2,r2,9880
10010abc:	1885883a 	add	r2,r3,r2
10010ac0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10010ac4:	e0fffe17 	ldw	r3,-8(fp)
10010ac8:	00900034 	movhi	r2,16384
10010acc:	10bfffc4 	addi	r2,r2,-1
10010ad0:	1886703a 	and	r3,r3,r2
10010ad4:	e0bffc17 	ldw	r2,-16(fp)
10010ad8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10010adc:	e0bffb17 	ldw	r2,-20(fp)
10010ae0:	1000051e 	bne	r2,zero,10010af8 <open+0xdc>
10010ae4:	e13ffc17 	ldw	r4,-16(fp)
10010ae8:	00109280 	call	10010928 <alt_file_locked>
10010aec:	e0bffa15 	stw	r2,-24(fp)
10010af0:	e0bffa17 	ldw	r2,-24(fp)
10010af4:	10001016 	blt	r2,zero,10010b38 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10010af8:	e0bff817 	ldw	r2,-32(fp)
10010afc:	10800317 	ldw	r2,12(r2)
10010b00:	10000826 	beq	r2,zero,10010b24 <open+0x108>
10010b04:	e0bff817 	ldw	r2,-32(fp)
10010b08:	10800317 	ldw	r2,12(r2)
10010b0c:	e13ffc17 	ldw	r4,-16(fp)
10010b10:	e17ffd17 	ldw	r5,-12(fp)
10010b14:	e1bffe17 	ldw	r6,-8(fp)
10010b18:	e1ffff17 	ldw	r7,-4(fp)
10010b1c:	103ee83a 	callr	r2
10010b20:	00000106 	br	10010b28 <open+0x10c>
10010b24:	0005883a 	mov	r2,zero
10010b28:	e0bffa15 	stw	r2,-24(fp)
10010b2c:	00000206 	br	10010b38 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10010b30:	00bffb44 	movi	r2,-19
10010b34:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10010b38:	e0bffa17 	ldw	r2,-24(fp)
10010b3c:	1000090e 	bge	r2,zero,10010b64 <open+0x148>
  {
    alt_release_fd (index);  
10010b40:	e13ff917 	ldw	r4,-28(fp)
10010b44:	000f2840 	call	1000f284 <alt_release_fd>
    ALT_ERRNO = -status;
10010b48:	00108d80 	call	100108d8 <alt_get_errno>
10010b4c:	1007883a 	mov	r3,r2
10010b50:	e0bffa17 	ldw	r2,-24(fp)
10010b54:	0085c83a 	sub	r2,zero,r2
10010b58:	18800015 	stw	r2,0(r3)
    return -1;
10010b5c:	00bfffc4 	movi	r2,-1
10010b60:	00000106 	br	10010b68 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10010b64:	e0bff917 	ldw	r2,-28(fp)
}
10010b68:	e037883a 	mov	sp,fp
10010b6c:	dfc00117 	ldw	ra,4(sp)
10010b70:	df000017 	ldw	fp,0(sp)
10010b74:	dec00204 	addi	sp,sp,8
10010b78:	f800283a 	ret

10010b7c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10010b7c:	defffa04 	addi	sp,sp,-24
10010b80:	df000515 	stw	fp,20(sp)
10010b84:	df000504 	addi	fp,sp,20
10010b88:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010b8c:	0005303a 	rdctl	r2,status
10010b90:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010b94:	e0fffc17 	ldw	r3,-16(fp)
10010b98:	00bfff84 	movi	r2,-2
10010b9c:	1884703a 	and	r2,r3,r2
10010ba0:	1001703a 	wrctl	status,r2
  
  return context;
10010ba4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10010ba8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10010bac:	e0bfff17 	ldw	r2,-4(fp)
10010bb0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10010bb4:	e0bffd17 	ldw	r2,-12(fp)
10010bb8:	10800017 	ldw	r2,0(r2)
10010bbc:	e0fffd17 	ldw	r3,-12(fp)
10010bc0:	18c00117 	ldw	r3,4(r3)
10010bc4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10010bc8:	e0bffd17 	ldw	r2,-12(fp)
10010bcc:	10800117 	ldw	r2,4(r2)
10010bd0:	e0fffd17 	ldw	r3,-12(fp)
10010bd4:	18c00017 	ldw	r3,0(r3)
10010bd8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10010bdc:	e0bffd17 	ldw	r2,-12(fp)
10010be0:	e0fffd17 	ldw	r3,-12(fp)
10010be4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10010be8:	e0bffd17 	ldw	r2,-12(fp)
10010bec:	e0fffd17 	ldw	r3,-12(fp)
10010bf0:	10c00015 	stw	r3,0(r2)
10010bf4:	e0bffb17 	ldw	r2,-20(fp)
10010bf8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010bfc:	e0bffe17 	ldw	r2,-8(fp)
10010c00:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10010c04:	e037883a 	mov	sp,fp
10010c08:	df000017 	ldw	fp,0(sp)
10010c0c:	dec00104 	addi	sp,sp,4
10010c10:	f800283a 	ret

10010c14 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10010c14:	defffb04 	addi	sp,sp,-20
10010c18:	dfc00415 	stw	ra,16(sp)
10010c1c:	df000315 	stw	fp,12(sp)
10010c20:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10010c24:	d0a00e17 	ldw	r2,-32712(gp)
10010c28:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10010c2c:	d0a6d817 	ldw	r2,-25760(gp)
10010c30:	10800044 	addi	r2,r2,1
10010c34:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10010c38:	00002e06 	br	10010cf4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10010c3c:	e0bffd17 	ldw	r2,-12(fp)
10010c40:	10800017 	ldw	r2,0(r2)
10010c44:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10010c48:	e0bffd17 	ldw	r2,-12(fp)
10010c4c:	10800403 	ldbu	r2,16(r2)
10010c50:	10803fcc 	andi	r2,r2,255
10010c54:	10000426 	beq	r2,zero,10010c68 <alt_tick+0x54>
10010c58:	d0a6d817 	ldw	r2,-25760(gp)
10010c5c:	1000021e 	bne	r2,zero,10010c68 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10010c60:	e0bffd17 	ldw	r2,-12(fp)
10010c64:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10010c68:	e0bffd17 	ldw	r2,-12(fp)
10010c6c:	10800217 	ldw	r2,8(r2)
10010c70:	d0e6d817 	ldw	r3,-25760(gp)
10010c74:	18801d36 	bltu	r3,r2,10010cec <alt_tick+0xd8>
10010c78:	e0bffd17 	ldw	r2,-12(fp)
10010c7c:	10800403 	ldbu	r2,16(r2)
10010c80:	10803fcc 	andi	r2,r2,255
10010c84:	1000191e 	bne	r2,zero,10010cec <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10010c88:	e0bffd17 	ldw	r2,-12(fp)
10010c8c:	10800317 	ldw	r2,12(r2)
10010c90:	e0fffd17 	ldw	r3,-12(fp)
10010c94:	18c00517 	ldw	r3,20(r3)
10010c98:	1809883a 	mov	r4,r3
10010c9c:	103ee83a 	callr	r2
10010ca0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10010ca4:	e0bfff17 	ldw	r2,-4(fp)
10010ca8:	1000031e 	bne	r2,zero,10010cb8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10010cac:	e13ffd17 	ldw	r4,-12(fp)
10010cb0:	0010b7c0 	call	10010b7c <alt_alarm_stop>
10010cb4:	00000d06 	br	10010cec <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10010cb8:	e0bffd17 	ldw	r2,-12(fp)
10010cbc:	10c00217 	ldw	r3,8(r2)
10010cc0:	e0bfff17 	ldw	r2,-4(fp)
10010cc4:	1887883a 	add	r3,r3,r2
10010cc8:	e0bffd17 	ldw	r2,-12(fp)
10010ccc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10010cd0:	e0bffd17 	ldw	r2,-12(fp)
10010cd4:	10c00217 	ldw	r3,8(r2)
10010cd8:	d0a6d817 	ldw	r2,-25760(gp)
10010cdc:	1880032e 	bgeu	r3,r2,10010cec <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10010ce0:	e0bffd17 	ldw	r2,-12(fp)
10010ce4:	00c00044 	movi	r3,1
10010ce8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10010cec:	e0bffe17 	ldw	r2,-8(fp)
10010cf0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10010cf4:	e0fffd17 	ldw	r3,-12(fp)
10010cf8:	d0a00e04 	addi	r2,gp,-32712
10010cfc:	18bfcf1e 	bne	r3,r2,10010c3c <__alt_data_end+0xf8010c3c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10010d00:	0001883a 	nop
}
10010d04:	e037883a 	mov	sp,fp
10010d08:	dfc00117 	ldw	ra,4(sp)
10010d0c:	df000017 	ldw	fp,0(sp)
10010d10:	dec00204 	addi	sp,sp,8
10010d14:	f800283a 	ret

10010d18 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10010d18:	deffff04 	addi	sp,sp,-4
10010d1c:	df000015 	stw	fp,0(sp)
10010d20:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10010d24:	000170fa 	wrctl	ienable,zero
}
10010d28:	e037883a 	mov	sp,fp
10010d2c:	df000017 	ldw	fp,0(sp)
10010d30:	dec00104 	addi	sp,sp,4
10010d34:	f800283a 	ret

10010d38 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10010d38:	defffa04 	addi	sp,sp,-24
10010d3c:	dfc00515 	stw	ra,20(sp)
10010d40:	df000415 	stw	fp,16(sp)
10010d44:	df000404 	addi	fp,sp,16
10010d48:	e13ffe15 	stw	r4,-8(fp)
10010d4c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10010d50:	e0bfff17 	ldw	r2,-4(fp)
10010d54:	10800017 	ldw	r2,0(r2)
10010d58:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10010d5c:	e13ffe17 	ldw	r4,-8(fp)
10010d60:	00022e00 	call	100022e0 <strlen>
10010d64:	10800044 	addi	r2,r2,1
10010d68:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10010d6c:	00000d06 	br	10010da4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10010d70:	e0bffc17 	ldw	r2,-16(fp)
10010d74:	10c00217 	ldw	r3,8(r2)
10010d78:	e0bffd17 	ldw	r2,-12(fp)
10010d7c:	1809883a 	mov	r4,r3
10010d80:	e17ffe17 	ldw	r5,-8(fp)
10010d84:	100d883a 	mov	r6,r2
10010d88:	0010ffc0 	call	10010ffc <memcmp>
10010d8c:	1000021e 	bne	r2,zero,10010d98 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10010d90:	e0bffc17 	ldw	r2,-16(fp)
10010d94:	00000706 	br	10010db4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10010d98:	e0bffc17 	ldw	r2,-16(fp)
10010d9c:	10800017 	ldw	r2,0(r2)
10010da0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10010da4:	e0fffc17 	ldw	r3,-16(fp)
10010da8:	e0bfff17 	ldw	r2,-4(fp)
10010dac:	18bff01e 	bne	r3,r2,10010d70 <__alt_data_end+0xf8010d70>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10010db0:	0005883a 	mov	r2,zero
}
10010db4:	e037883a 	mov	sp,fp
10010db8:	dfc00117 	ldw	ra,4(sp)
10010dbc:	df000017 	ldw	fp,0(sp)
10010dc0:	dec00204 	addi	sp,sp,8
10010dc4:	f800283a 	ret

10010dc8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10010dc8:	defffb04 	addi	sp,sp,-20
10010dcc:	dfc00415 	stw	ra,16(sp)
10010dd0:	df000315 	stw	fp,12(sp)
10010dd4:	df000304 	addi	fp,sp,12
10010dd8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10010ddc:	00840074 	movhi	r2,4097
10010de0:	108e2404 	addi	r2,r2,14480
10010de4:	10800017 	ldw	r2,0(r2)
10010de8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10010dec:	00003106 	br	10010eb4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
10010df0:	e0bffd17 	ldw	r2,-12(fp)
10010df4:	10800217 	ldw	r2,8(r2)
10010df8:	1009883a 	mov	r4,r2
10010dfc:	00022e00 	call	100022e0 <strlen>
10010e00:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10010e04:	e0bffd17 	ldw	r2,-12(fp)
10010e08:	10c00217 	ldw	r3,8(r2)
10010e0c:	e0bffe17 	ldw	r2,-8(fp)
10010e10:	10bfffc4 	addi	r2,r2,-1
10010e14:	1885883a 	add	r2,r3,r2
10010e18:	10800003 	ldbu	r2,0(r2)
10010e1c:	10803fcc 	andi	r2,r2,255
10010e20:	1080201c 	xori	r2,r2,128
10010e24:	10bfe004 	addi	r2,r2,-128
10010e28:	10800bd8 	cmpnei	r2,r2,47
10010e2c:	1000031e 	bne	r2,zero,10010e3c <alt_find_file+0x74>
    {
      len -= 1;
10010e30:	e0bffe17 	ldw	r2,-8(fp)
10010e34:	10bfffc4 	addi	r2,r2,-1
10010e38:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10010e3c:	e0bffe17 	ldw	r2,-8(fp)
10010e40:	e0ffff17 	ldw	r3,-4(fp)
10010e44:	1885883a 	add	r2,r3,r2
10010e48:	10800003 	ldbu	r2,0(r2)
10010e4c:	10803fcc 	andi	r2,r2,255
10010e50:	1080201c 	xori	r2,r2,128
10010e54:	10bfe004 	addi	r2,r2,-128
10010e58:	10800be0 	cmpeqi	r2,r2,47
10010e5c:	1000081e 	bne	r2,zero,10010e80 <alt_find_file+0xb8>
10010e60:	e0bffe17 	ldw	r2,-8(fp)
10010e64:	e0ffff17 	ldw	r3,-4(fp)
10010e68:	1885883a 	add	r2,r3,r2
10010e6c:	10800003 	ldbu	r2,0(r2)
10010e70:	10803fcc 	andi	r2,r2,255
10010e74:	1080201c 	xori	r2,r2,128
10010e78:	10bfe004 	addi	r2,r2,-128
10010e7c:	10000a1e 	bne	r2,zero,10010ea8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10010e80:	e0bffd17 	ldw	r2,-12(fp)
10010e84:	10c00217 	ldw	r3,8(r2)
10010e88:	e0bffe17 	ldw	r2,-8(fp)
10010e8c:	1809883a 	mov	r4,r3
10010e90:	e17fff17 	ldw	r5,-4(fp)
10010e94:	100d883a 	mov	r6,r2
10010e98:	0010ffc0 	call	10010ffc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10010e9c:	1000021e 	bne	r2,zero,10010ea8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10010ea0:	e0bffd17 	ldw	r2,-12(fp)
10010ea4:	00000806 	br	10010ec8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10010ea8:	e0bffd17 	ldw	r2,-12(fp)
10010eac:	10800017 	ldw	r2,0(r2)
10010eb0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10010eb4:	e0fffd17 	ldw	r3,-12(fp)
10010eb8:	00840074 	movhi	r2,4097
10010ebc:	108e2404 	addi	r2,r2,14480
10010ec0:	18bfcb1e 	bne	r3,r2,10010df0 <__alt_data_end+0xf8010df0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10010ec4:	0005883a 	mov	r2,zero
}
10010ec8:	e037883a 	mov	sp,fp
10010ecc:	dfc00117 	ldw	ra,4(sp)
10010ed0:	df000017 	ldw	fp,0(sp)
10010ed4:	dec00204 	addi	sp,sp,8
10010ed8:	f800283a 	ret

10010edc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10010edc:	defffa04 	addi	sp,sp,-24
10010ee0:	dfc00515 	stw	ra,20(sp)
10010ee4:	df000415 	stw	fp,16(sp)
10010ee8:	dc000315 	stw	r16,12(sp)
10010eec:	df000404 	addi	fp,sp,16
10010ef0:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10010ef4:	00bffa04 	movi	r2,-24
10010ef8:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10010efc:	e03ffc15 	stw	zero,-16(fp)
10010f00:	00002106 	br	10010f88 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10010f04:	04040074 	movhi	r16,4097
10010f08:	8409a604 	addi	r16,r16,9880
10010f0c:	e0bffc17 	ldw	r2,-16(fp)
10010f10:	1009883a 	mov	r4,r2
10010f14:	01400304 	movi	r5,12
10010f18:	000c2ec0 	call	1000c2ec <__mulsi3>
10010f1c:	8085883a 	add	r2,r16,r2
10010f20:	10800017 	ldw	r2,0(r2)
10010f24:	1000151e 	bne	r2,zero,10010f7c <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10010f28:	04040074 	movhi	r16,4097
10010f2c:	8409a604 	addi	r16,r16,9880
10010f30:	e0bffc17 	ldw	r2,-16(fp)
10010f34:	1009883a 	mov	r4,r2
10010f38:	01400304 	movi	r5,12
10010f3c:	000c2ec0 	call	1000c2ec <__mulsi3>
10010f40:	8085883a 	add	r2,r16,r2
10010f44:	e0fffe17 	ldw	r3,-8(fp)
10010f48:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10010f4c:	00840074 	movhi	r2,4097
10010f50:	108e2804 	addi	r2,r2,14496
10010f54:	10c00017 	ldw	r3,0(r2)
10010f58:	e0bffc17 	ldw	r2,-16(fp)
10010f5c:	1880040e 	bge	r3,r2,10010f70 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10010f60:	00840074 	movhi	r2,4097
10010f64:	108e2804 	addi	r2,r2,14496
10010f68:	e0fffc17 	ldw	r3,-16(fp)
10010f6c:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10010f70:	e0bffc17 	ldw	r2,-16(fp)
10010f74:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10010f78:	00000606 	br	10010f94 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10010f7c:	e0bffc17 	ldw	r2,-16(fp)
10010f80:	10800044 	addi	r2,r2,1
10010f84:	e0bffc15 	stw	r2,-16(fp)
10010f88:	e0bffc17 	ldw	r2,-16(fp)
10010f8c:	10800810 	cmplti	r2,r2,32
10010f90:	103fdc1e 	bne	r2,zero,10010f04 <__alt_data_end+0xf8010f04>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10010f94:	e0bffd17 	ldw	r2,-12(fp)
}
10010f98:	e6ffff04 	addi	sp,fp,-4
10010f9c:	dfc00217 	ldw	ra,8(sp)
10010fa0:	df000117 	ldw	fp,4(sp)
10010fa4:	dc000017 	ldw	r16,0(sp)
10010fa8:	dec00304 	addi	sp,sp,12
10010fac:	f800283a 	ret

10010fb0 <atexit>:
10010fb0:	200b883a 	mov	r5,r4
10010fb4:	000d883a 	mov	r6,zero
10010fb8:	0009883a 	mov	r4,zero
10010fbc:	000f883a 	mov	r7,zero
10010fc0:	00110781 	jmpi	10011078 <__register_exitproc>

10010fc4 <exit>:
10010fc4:	defffe04 	addi	sp,sp,-8
10010fc8:	000b883a 	mov	r5,zero
10010fcc:	dc000015 	stw	r16,0(sp)
10010fd0:	dfc00115 	stw	ra,4(sp)
10010fd4:	2021883a 	mov	r16,r4
10010fd8:	001118c0 	call	1001118c <__call_exitprocs>
10010fdc:	00840074 	movhi	r2,4097
10010fe0:	108e1e04 	addi	r2,r2,14456
10010fe4:	11000017 	ldw	r4,0(r2)
10010fe8:	20800f17 	ldw	r2,60(r4)
10010fec:	10000126 	beq	r2,zero,10010ff4 <exit+0x30>
10010ff0:	103ee83a 	callr	r2
10010ff4:	8009883a 	mov	r4,r16
10010ff8:	00113200 	call	10011320 <_exit>

10010ffc <memcmp>:
10010ffc:	01c000c4 	movi	r7,3
10011000:	3980192e 	bgeu	r7,r6,10011068 <memcmp+0x6c>
10011004:	2144b03a 	or	r2,r4,r5
10011008:	11c4703a 	and	r2,r2,r7
1001100c:	10000f26 	beq	r2,zero,1001104c <memcmp+0x50>
10011010:	20800003 	ldbu	r2,0(r4)
10011014:	28c00003 	ldbu	r3,0(r5)
10011018:	10c0151e 	bne	r2,r3,10011070 <memcmp+0x74>
1001101c:	31bfff84 	addi	r6,r6,-2
10011020:	01ffffc4 	movi	r7,-1
10011024:	00000406 	br	10011038 <memcmp+0x3c>
10011028:	20800003 	ldbu	r2,0(r4)
1001102c:	28c00003 	ldbu	r3,0(r5)
10011030:	31bfffc4 	addi	r6,r6,-1
10011034:	10c00e1e 	bne	r2,r3,10011070 <memcmp+0x74>
10011038:	21000044 	addi	r4,r4,1
1001103c:	29400044 	addi	r5,r5,1
10011040:	31fff91e 	bne	r6,r7,10011028 <__alt_data_end+0xf8011028>
10011044:	0005883a 	mov	r2,zero
10011048:	f800283a 	ret
1001104c:	20c00017 	ldw	r3,0(r4)
10011050:	28800017 	ldw	r2,0(r5)
10011054:	1880041e 	bne	r3,r2,10011068 <memcmp+0x6c>
10011058:	31bfff04 	addi	r6,r6,-4
1001105c:	21000104 	addi	r4,r4,4
10011060:	29400104 	addi	r5,r5,4
10011064:	39bff936 	bltu	r7,r6,1001104c <__alt_data_end+0xf801104c>
10011068:	303fe91e 	bne	r6,zero,10011010 <__alt_data_end+0xf8011010>
1001106c:	003ff506 	br	10011044 <__alt_data_end+0xf8011044>
10011070:	10c5c83a 	sub	r2,r2,r3
10011074:	f800283a 	ret

10011078 <__register_exitproc>:
10011078:	00840074 	movhi	r2,4097
1001107c:	defffa04 	addi	sp,sp,-24
10011080:	108e1e04 	addi	r2,r2,14456
10011084:	dc000315 	stw	r16,12(sp)
10011088:	14000017 	ldw	r16,0(r2)
1001108c:	dc400415 	stw	r17,16(sp)
10011090:	dfc00515 	stw	ra,20(sp)
10011094:	80805217 	ldw	r2,328(r16)
10011098:	2023883a 	mov	r17,r4
1001109c:	10003626 	beq	r2,zero,10011178 <__register_exitproc+0x100>
100110a0:	10c00117 	ldw	r3,4(r2)
100110a4:	010007c4 	movi	r4,31
100110a8:	20c00e16 	blt	r4,r3,100110e4 <__register_exitproc+0x6c>
100110ac:	1a400044 	addi	r9,r3,1
100110b0:	8800211e 	bne	r17,zero,10011138 <__register_exitproc+0xc0>
100110b4:	18c00084 	addi	r3,r3,2
100110b8:	18c7883a 	add	r3,r3,r3
100110bc:	18c7883a 	add	r3,r3,r3
100110c0:	12400115 	stw	r9,4(r2)
100110c4:	10c7883a 	add	r3,r2,r3
100110c8:	19400015 	stw	r5,0(r3)
100110cc:	0005883a 	mov	r2,zero
100110d0:	dfc00517 	ldw	ra,20(sp)
100110d4:	dc400417 	ldw	r17,16(sp)
100110d8:	dc000317 	ldw	r16,12(sp)
100110dc:	dec00604 	addi	sp,sp,24
100110e0:	f800283a 	ret
100110e4:	00800034 	movhi	r2,0
100110e8:	10800004 	addi	r2,r2,0
100110ec:	10002526 	beq	r2,zero,10011184 <__register_exitproc+0x10c>
100110f0:	01006404 	movi	r4,400
100110f4:	d9400015 	stw	r5,0(sp)
100110f8:	d9800115 	stw	r6,4(sp)
100110fc:	d9c00215 	stw	r7,8(sp)
10011100:	00000000 	call	10000000 <__reset>
10011104:	d9400017 	ldw	r5,0(sp)
10011108:	d9800117 	ldw	r6,4(sp)
1001110c:	d9c00217 	ldw	r7,8(sp)
10011110:	10001c26 	beq	r2,zero,10011184 <__register_exitproc+0x10c>
10011114:	80c05217 	ldw	r3,328(r16)
10011118:	10000115 	stw	zero,4(r2)
1001111c:	02400044 	movi	r9,1
10011120:	10c00015 	stw	r3,0(r2)
10011124:	80805215 	stw	r2,328(r16)
10011128:	10006215 	stw	zero,392(r2)
1001112c:	10006315 	stw	zero,396(r2)
10011130:	0007883a 	mov	r3,zero
10011134:	883fdf26 	beq	r17,zero,100110b4 <__alt_data_end+0xf80110b4>
10011138:	18d1883a 	add	r8,r3,r3
1001113c:	4211883a 	add	r8,r8,r8
10011140:	1211883a 	add	r8,r2,r8
10011144:	41802215 	stw	r6,136(r8)
10011148:	01000044 	movi	r4,1
1001114c:	11806217 	ldw	r6,392(r2)
10011150:	20c8983a 	sll	r4,r4,r3
10011154:	310cb03a 	or	r6,r6,r4
10011158:	11806215 	stw	r6,392(r2)
1001115c:	41c04215 	stw	r7,264(r8)
10011160:	01800084 	movi	r6,2
10011164:	89bfd31e 	bne	r17,r6,100110b4 <__alt_data_end+0xf80110b4>
10011168:	11806317 	ldw	r6,396(r2)
1001116c:	3108b03a 	or	r4,r6,r4
10011170:	11006315 	stw	r4,396(r2)
10011174:	003fcf06 	br	100110b4 <__alt_data_end+0xf80110b4>
10011178:	80805304 	addi	r2,r16,332
1001117c:	80805215 	stw	r2,328(r16)
10011180:	003fc706 	br	100110a0 <__alt_data_end+0xf80110a0>
10011184:	00bfffc4 	movi	r2,-1
10011188:	003fd106 	br	100110d0 <__alt_data_end+0xf80110d0>

1001118c <__call_exitprocs>:
1001118c:	00840074 	movhi	r2,4097
10011190:	108e1e04 	addi	r2,r2,14456
10011194:	10800017 	ldw	r2,0(r2)
10011198:	defff404 	addi	sp,sp,-48
1001119c:	dd800815 	stw	r22,32(sp)
100111a0:	d8800015 	stw	r2,0(sp)
100111a4:	10805204 	addi	r2,r2,328
100111a8:	dd000615 	stw	r20,24(sp)
100111ac:	dc800415 	stw	r18,16(sp)
100111b0:	dfc00b15 	stw	ra,44(sp)
100111b4:	df000a15 	stw	fp,40(sp)
100111b8:	ddc00915 	stw	r23,36(sp)
100111bc:	dd400715 	stw	r21,28(sp)
100111c0:	dcc00515 	stw	r19,20(sp)
100111c4:	dc400315 	stw	r17,12(sp)
100111c8:	dc000215 	stw	r16,8(sp)
100111cc:	2025883a 	mov	r18,r4
100111d0:	2829883a 	mov	r20,r5
100111d4:	d8800115 	stw	r2,4(sp)
100111d8:	05bfffc4 	movi	r22,-1
100111dc:	d8800017 	ldw	r2,0(sp)
100111e0:	14c05217 	ldw	r19,328(r2)
100111e4:	98001d26 	beq	r19,zero,1001125c <__call_exitprocs+0xd0>
100111e8:	dd400117 	ldw	r21,4(sp)
100111ec:	98800117 	ldw	r2,4(r19)
100111f0:	173fffc4 	addi	fp,r2,-1
100111f4:	e0000d16 	blt	fp,zero,1001122c <__call_exitprocs+0xa0>
100111f8:	14000044 	addi	r16,r2,1
100111fc:	8421883a 	add	r16,r16,r16
10011200:	8421883a 	add	r16,r16,r16
10011204:	84402004 	addi	r17,r16,128
10011208:	9c63883a 	add	r17,r19,r17
1001120c:	9c21883a 	add	r16,r19,r16
10011210:	a0001e26 	beq	r20,zero,1001128c <__call_exitprocs+0x100>
10011214:	80804017 	ldw	r2,256(r16)
10011218:	15001c26 	beq	r2,r20,1001128c <__call_exitprocs+0x100>
1001121c:	e73fffc4 	addi	fp,fp,-1
10011220:	843fff04 	addi	r16,r16,-4
10011224:	8c7fff04 	addi	r17,r17,-4
10011228:	e5bff91e 	bne	fp,r22,10011210 <__alt_data_end+0xf8011210>
1001122c:	00800034 	movhi	r2,0
10011230:	10800004 	addi	r2,r2,0
10011234:	10000926 	beq	r2,zero,1001125c <__call_exitprocs+0xd0>
10011238:	98800117 	ldw	r2,4(r19)
1001123c:	1000311e 	bne	r2,zero,10011304 <__call_exitprocs+0x178>
10011240:	98800017 	ldw	r2,0(r19)
10011244:	10003426 	beq	r2,zero,10011318 <__call_exitprocs+0x18c>
10011248:	9809883a 	mov	r4,r19
1001124c:	a8800015 	stw	r2,0(r21)
10011250:	00000000 	call	10000000 <__reset>
10011254:	acc00017 	ldw	r19,0(r21)
10011258:	983fe41e 	bne	r19,zero,100111ec <__alt_data_end+0xf80111ec>
1001125c:	dfc00b17 	ldw	ra,44(sp)
10011260:	df000a17 	ldw	fp,40(sp)
10011264:	ddc00917 	ldw	r23,36(sp)
10011268:	dd800817 	ldw	r22,32(sp)
1001126c:	dd400717 	ldw	r21,28(sp)
10011270:	dd000617 	ldw	r20,24(sp)
10011274:	dcc00517 	ldw	r19,20(sp)
10011278:	dc800417 	ldw	r18,16(sp)
1001127c:	dc400317 	ldw	r17,12(sp)
10011280:	dc000217 	ldw	r16,8(sp)
10011284:	dec00c04 	addi	sp,sp,48
10011288:	f800283a 	ret
1001128c:	98800117 	ldw	r2,4(r19)
10011290:	80c00017 	ldw	r3,0(r16)
10011294:	10bfffc4 	addi	r2,r2,-1
10011298:	17001526 	beq	r2,fp,100112f0 <__call_exitprocs+0x164>
1001129c:	80000015 	stw	zero,0(r16)
100112a0:	183fde26 	beq	r3,zero,1001121c <__alt_data_end+0xf801121c>
100112a4:	00800044 	movi	r2,1
100112a8:	1708983a 	sll	r4,r2,fp
100112ac:	98806217 	ldw	r2,392(r19)
100112b0:	9dc00117 	ldw	r23,4(r19)
100112b4:	2084703a 	and	r2,r4,r2
100112b8:	1000061e 	bne	r2,zero,100112d4 <__call_exitprocs+0x148>
100112bc:	183ee83a 	callr	r3
100112c0:	98800117 	ldw	r2,4(r19)
100112c4:	15ffc51e 	bne	r2,r23,100111dc <__alt_data_end+0xf80111dc>
100112c8:	a8800017 	ldw	r2,0(r21)
100112cc:	14ffd326 	beq	r2,r19,1001121c <__alt_data_end+0xf801121c>
100112d0:	003fc206 	br	100111dc <__alt_data_end+0xf80111dc>
100112d4:	98806317 	ldw	r2,396(r19)
100112d8:	2084703a 	and	r2,r4,r2
100112dc:	1000061e 	bne	r2,zero,100112f8 <__call_exitprocs+0x16c>
100112e0:	89400017 	ldw	r5,0(r17)
100112e4:	9009883a 	mov	r4,r18
100112e8:	183ee83a 	callr	r3
100112ec:	003ff406 	br	100112c0 <__alt_data_end+0xf80112c0>
100112f0:	9f000115 	stw	fp,4(r19)
100112f4:	003fea06 	br	100112a0 <__alt_data_end+0xf80112a0>
100112f8:	89000017 	ldw	r4,0(r17)
100112fc:	183ee83a 	callr	r3
10011300:	003fef06 	br	100112c0 <__alt_data_end+0xf80112c0>
10011304:	98800017 	ldw	r2,0(r19)
10011308:	982b883a 	mov	r21,r19
1001130c:	1027883a 	mov	r19,r2
10011310:	983fb61e 	bne	r19,zero,100111ec <__alt_data_end+0xf80111ec>
10011314:	003fd106 	br	1001125c <__alt_data_end+0xf801125c>
10011318:	0005883a 	mov	r2,zero
1001131c:	003ffa06 	br	10011308 <__alt_data_end+0xf8011308>

10011320 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10011320:	defffd04 	addi	sp,sp,-12
10011324:	df000215 	stw	fp,8(sp)
10011328:	df000204 	addi	fp,sp,8
1001132c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10011330:	0001883a 	nop
10011334:	e0bfff17 	ldw	r2,-4(fp)
10011338:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1001133c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10011340:	10000226 	beq	r2,zero,1001134c <_exit+0x2c>
    ALT_SIM_FAIL();
10011344:	002af070 	cmpltui	zero,zero,43969
10011348:	00000106 	br	10011350 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
1001134c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10011350:	003fff06 	br	10011350 <__alt_data_end+0xf8011350>
